
RTC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  000031d2  00003266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800098  00800098  0000329e  2**0
                  ALLOC
  3 .stab         00003690  00000000  00000000  000032a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000019dd  00000000  00000000  00006930  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000830d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000844d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000085bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a206  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b0f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000bea0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000c000  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c28d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 63 06 	jmp	0xcc6	; 0xcc6 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 ed       	ldi	r30, 0xD2	; 210
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 39       	cpi	r26, 0x9A	; 154
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 18 	call	0x3078	; 0x3078 <main>
      8a:	0c 94 e7 18 	jmp	0x31ce	; 0x31ce <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e6       	ldi	r26, 0x66	; 102
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e6       	ldi	r24, 0x66	; 102
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cc 18 	jmp	0x3198	; 0x3198 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bc 18 	jmp	0x3178	; 0x3178 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c0 18 	jmp	0x3180	; 0x3180 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_Init>:


void (*ptr_isr)(void)=0;

void UART_Init()
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62

	// selection and 8bit data
	UCSRC = (1<<UCSRC_UCSZ0)|(1<<UCSRC_UCSZ1)|(1<<UCSRC_URSEL);
     b4e:	e0 e4       	ldi	r30, 0x40	; 64
     b50:	f0 e0       	ldi	r31, 0x00	; 0
     b52:	86 e8       	ldi	r24, 0x86	; 134
     b54:	80 83       	st	Z, r24

	UBRRL = UART_BOUDRATE_9600;
     b56:	e9 e2       	ldi	r30, 0x29	; 41
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	83 e3       	ldi	r24, 0x33	; 51
     b5c:	80 83       	st	Z, r24


	// Enable TX and RX
	SET_BIT(UCSRB, UCSRB_TXEN);
     b5e:	aa e2       	ldi	r26, 0x2A	; 42
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	ea e2       	ldi	r30, 0x2A	; 42
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	88 60       	ori	r24, 0x08	; 8
     b6a:	8c 93       	st	X, r24
	SET_BIT(UCSRB, UCSRB_RXEN);
     b6c:	aa e2       	ldi	r26, 0x2A	; 42
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	ea e2       	ldi	r30, 0x2A	; 42
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	80 61       	ori	r24, 0x10	; 16
     b78:	8c 93       	st	X, r24
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <UART_sendByte>:

void UART_sendByte(u8 ch)
{
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	89 83       	std	Y+1, r24	; 0x01

	while(READ_BIT(UCSRA, UCSRA_UDRE)==0);
     b8c:	eb e2       	ldi	r30, 0x2B	; 43
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	82 95       	swap	r24
     b94:	86 95       	lsr	r24
     b96:	87 70       	andi	r24, 0x07	; 7
     b98:	88 2f       	mov	r24, r24
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	81 70       	andi	r24, 0x01	; 1
     b9e:	90 70       	andi	r25, 0x00	; 0
     ba0:	00 97       	sbiw	r24, 0x00	; 0
     ba2:	a1 f3       	breq	.-24     	; 0xb8c <UART_sendByte+0xc>
	UDR = ch;
     ba4:	ec e2       	ldi	r30, 0x2C	; 44
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	89 81       	ldd	r24, Y+1	; 0x01
     baa:	80 83       	st	Z, r24
}
     bac:	0f 90       	pop	r0
     bae:	cf 91       	pop	r28
     bb0:	df 91       	pop	r29
     bb2:	08 95       	ret

00000bb4 <UART_sendString>:

void UART_sendString(u8* str)
{
     bb4:	df 93       	push	r29
     bb6:	cf 93       	push	r28
     bb8:	00 d0       	rcall	.+0      	; 0xbba <UART_sendString+0x6>
     bba:	0f 92       	push	r0
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	9b 83       	std	Y+3, r25	; 0x03
     bc2:	8a 83       	std	Y+2, r24	; 0x02

	u8 i=0;
     bc4:	19 82       	std	Y+1, r1	; 0x01

	UART_sendByte(str[i]);
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	28 2f       	mov	r18, r24
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	8a 81       	ldd	r24, Y+2	; 0x02
     bce:	9b 81       	ldd	r25, Y+3	; 0x03
     bd0:	fc 01       	movw	r30, r24
     bd2:	e2 0f       	add	r30, r18
     bd4:	f3 1f       	adc	r31, r19
     bd6:	80 81       	ld	r24, Z
     bd8:	0e 94 c0 05 	call	0xb80	; 0xb80 <UART_sendByte>
     bdc:	0e c0       	rjmp	.+28     	; 0xbfa <UART_sendString+0x46>

	for(;str[i];)
	{
		i++;
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	8f 5f       	subi	r24, 0xFF	; 255
     be2:	89 83       	std	Y+1, r24	; 0x01

		UART_sendByte(str[i]);
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	28 2f       	mov	r18, r24
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	8a 81       	ldd	r24, Y+2	; 0x02
     bec:	9b 81       	ldd	r25, Y+3	; 0x03
     bee:	fc 01       	movw	r30, r24
     bf0:	e2 0f       	add	r30, r18
     bf2:	f3 1f       	adc	r31, r19
     bf4:	80 81       	ld	r24, Z
     bf6:	0e 94 c0 05 	call	0xb80	; 0xb80 <UART_sendByte>

	u8 i=0;

	UART_sendByte(str[i]);

	for(;str[i];)
     bfa:	89 81       	ldd	r24, Y+1	; 0x01
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	8a 81       	ldd	r24, Y+2	; 0x02
     c02:	9b 81       	ldd	r25, Y+3	; 0x03
     c04:	fc 01       	movw	r30, r24
     c06:	e2 0f       	add	r30, r18
     c08:	f3 1f       	adc	r31, r19
     c0a:	80 81       	ld	r24, Z
     c0c:	88 23       	and	r24, r24
     c0e:	39 f7       	brne	.-50     	; 0xbde <UART_sendString+0x2a>
	{
		i++;

		UART_sendByte(str[i]);
	}
	str[i] = '\0';
     c10:	89 81       	ldd	r24, Y+1	; 0x01
     c12:	28 2f       	mov	r18, r24
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	8a 81       	ldd	r24, Y+2	; 0x02
     c18:	9b 81       	ldd	r25, Y+3	; 0x03
     c1a:	fc 01       	movw	r30, r24
     c1c:	e2 0f       	add	r30, r18
     c1e:	f3 1f       	adc	r31, r19
     c20:	10 82       	st	Z, r1

}
     c22:	0f 90       	pop	r0
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	cf 91       	pop	r28
     c2a:	df 91       	pop	r29
     c2c:	08 95       	ret

00000c2e <UART_receiveByteSynch>:

u8 UART_receiveByteSynch()
{
     c2e:	df 93       	push	r29
     c30:	cf 93       	push	r28
     c32:	cd b7       	in	r28, 0x3d	; 61
     c34:	de b7       	in	r29, 0x3e	; 62

	while(READ_BIT(UCSRA, UCSRA_RXC)==0);
     c36:	eb e2       	ldi	r30, 0x2B	; 43
     c38:	f0 e0       	ldi	r31, 0x00	; 0
     c3a:	80 81       	ld	r24, Z
     c3c:	88 23       	and	r24, r24
     c3e:	dc f7       	brge	.-10     	; 0xc36 <UART_receiveByteSynch+0x8>
	return UDR;
     c40:	ec e2       	ldi	r30, 0x2C	; 44
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z


}
     c46:	cf 91       	pop	r28
     c48:	df 91       	pop	r29
     c4a:	08 95       	ret

00000c4c <UART_RX_InterruptEnable>:

void UART_RX_InterruptEnable(void)
{
     c4c:	df 93       	push	r29
     c4e:	cf 93       	push	r28
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(UCSRB,UCSRB_RXCIE);
     c54:	aa e2       	ldi	r26, 0x2A	; 42
     c56:	b0 e0       	ldi	r27, 0x00	; 0
     c58:	ea e2       	ldi	r30, 0x2A	; 42
     c5a:	f0 e0       	ldi	r31, 0x00	; 0
     c5c:	80 81       	ld	r24, Z
     c5e:	80 68       	ori	r24, 0x80	; 128
     c60:	8c 93       	st	X, r24
}
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <UART_RX_InterruptDisable>:

void UART_RX_InterruptDisable(void)
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(UCSRB,UCSRB_RXCIE);
     c70:	aa e2       	ldi	r26, 0x2A	; 42
     c72:	b0 e0       	ldi	r27, 0x00	; 0
     c74:	ea e2       	ldi	r30, 0x2A	; 42
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 77       	andi	r24, 0x7F	; 127
     c7c:	8c 93       	st	X, r24
}
     c7e:	cf 91       	pop	r28
     c80:	df 91       	pop	r29
     c82:	08 95       	ret

00000c84 <UART_receiveByteAsynchCallBack>:


void UART_receiveByteAsynchCallBack(void (*ptr)(void))
{
     c84:	df 93       	push	r29
     c86:	cf 93       	push	r28
     c88:	00 d0       	rcall	.+0      	; 0xc8a <UART_receiveByteAsynchCallBack+0x6>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01

	if (ptr != NULL)
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	82 30       	cpi	r24, 0x02	; 2
     c98:	91 05       	cpc	r25, r1
     c9a:	31 f0       	breq	.+12     	; 0xca8 <UART_receiveByteAsynchCallBack+0x24>
	{
		ptr_isr = ptr;
     c9c:	89 81       	ldd	r24, Y+1	; 0x01
     c9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ca0:	90 93 99 00 	sts	0x0099, r25
     ca4:	80 93 98 00 	sts	0x0098, r24
	}


}
     ca8:	0f 90       	pop	r0
     caa:	0f 90       	pop	r0
     cac:	cf 91       	pop	r28
     cae:	df 91       	pop	r29
     cb0:	08 95       	ret

00000cb2 <UART_ReciveNoBlock>:
u8 UART_ReciveNoBlock(void)
{
     cb2:	df 93       	push	r29
     cb4:	cf 93       	push	r28
     cb6:	cd b7       	in	r28, 0x3d	; 61
     cb8:	de b7       	in	r29, 0x3e	; 62
    return UDR;
     cba:	ec e2       	ldi	r30, 0x2C	; 44
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
}
     cc0:	cf 91       	pop	r28
     cc2:	df 91       	pop	r29
     cc4:	08 95       	ret

00000cc6 <__vector_13>:

ISR(UART_RX_vect)
{
     cc6:	1f 92       	push	r1
     cc8:	0f 92       	push	r0
     cca:	0f b6       	in	r0, 0x3f	; 63
     ccc:	0f 92       	push	r0
     cce:	11 24       	eor	r1, r1
     cd0:	2f 93       	push	r18
     cd2:	3f 93       	push	r19
     cd4:	4f 93       	push	r20
     cd6:	5f 93       	push	r21
     cd8:	6f 93       	push	r22
     cda:	7f 93       	push	r23
     cdc:	8f 93       	push	r24
     cde:	9f 93       	push	r25
     ce0:	af 93       	push	r26
     ce2:	bf 93       	push	r27
     ce4:	ef 93       	push	r30
     ce6:	ff 93       	push	r31
     ce8:	df 93       	push	r29
     cea:	cf 93       	push	r28
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62

	if (ptr_isr != NULL)
     cf0:	80 91 98 00 	lds	r24, 0x0098
     cf4:	90 91 99 00 	lds	r25, 0x0099
     cf8:	82 30       	cpi	r24, 0x02	; 2
     cfa:	91 05       	cpc	r25, r1
     cfc:	29 f0       	breq	.+10     	; 0xd08 <__vector_13+0x42>
	{
		ptr_isr();
     cfe:	e0 91 98 00 	lds	r30, 0x0098
     d02:	f0 91 99 00 	lds	r31, 0x0099
     d06:	09 95       	icall
	}

}
     d08:	cf 91       	pop	r28
     d0a:	df 91       	pop	r29
     d0c:	ff 91       	pop	r31
     d0e:	ef 91       	pop	r30
     d10:	bf 91       	pop	r27
     d12:	af 91       	pop	r26
     d14:	9f 91       	pop	r25
     d16:	8f 91       	pop	r24
     d18:	7f 91       	pop	r23
     d1a:	6f 91       	pop	r22
     d1c:	5f 91       	pop	r21
     d1e:	4f 91       	pop	r20
     d20:	3f 91       	pop	r19
     d22:	2f 91       	pop	r18
     d24:	0f 90       	pop	r0
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	0f 90       	pop	r0
     d2a:	1f 90       	pop	r1
     d2c:	18 95       	reti

00000d2e <SPI_Init>:
#include "SPI.h"
#include <util/delay.h>


void SPI_Init(SPIMode_t mode)
{
     d2e:	df 93       	push	r29
     d30:	cf 93       	push	r28
     d32:	0f 92       	push	r0
     d34:	cd b7       	in	r28, 0x3d	; 61
     d36:	de b7       	in	r29, 0x3e	; 62
     d38:	89 83       	std	Y+1, r24	; 0x01
    if (mode == MASTER)
     d3a:	89 81       	ldd	r24, Y+1	; 0x01
     d3c:	88 23       	and	r24, r24
     d3e:	41 f4       	brne	.+16     	; 0xd50 <SPI_Init+0x22>
    {
        // clock 2MHZ

        // master
        SET_BIT(SPCR,MSTR); 
     d40:	ad e2       	ldi	r26, 0x2D	; 45
     d42:	b0 e0       	ldi	r27, 0x00	; 0
     d44:	ed e2       	ldi	r30, 0x2D	; 45
     d46:	f0 e0       	ldi	r31, 0x00	; 0
     d48:	80 81       	ld	r24, Z
     d4a:	80 61       	ori	r24, 0x10	; 16
     d4c:	8c 93       	st	X, r24
     d4e:	07 c0       	rjmp	.+14     	; 0xd5e <SPI_Init+0x30>
    }
    else
    {
        // slave
        CLR_BIT(SPCR,MSTR); 
     d50:	ad e2       	ldi	r26, 0x2D	; 45
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ed e2       	ldi	r30, 0x2D	; 45
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	8f 7e       	andi	r24, 0xEF	; 239
     d5c:	8c 93       	st	X, r24
    }

    // SPI Enable 
    SET_BIT(SPCR,SPE);
     d5e:	ad e2       	ldi	r26, 0x2D	; 45
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	ed e2       	ldi	r30, 0x2D	; 45
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	80 81       	ld	r24, Z
     d68:	80 64       	ori	r24, 0x40	; 64
     d6a:	8c 93       	st	X, r24
    
}
     d6c:	0f 90       	pop	r0
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <SPI_SendRecive>:

// busy wait 
u8 SPI_SendRecive(u8 data)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	0f 92       	push	r0
     d7a:	cd b7       	in	r28, 0x3d	; 61
     d7c:	de b7       	in	r29, 0x3e	; 62
     d7e:	89 83       	std	Y+1, r24	; 0x01

    SPDR = data; // write data to master and wait until it sent to slave 
     d80:	ef e2       	ldi	r30, 0x2F	; 47
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	89 81       	ldd	r24, Y+1	; 0x01
     d86:	80 83       	st	Z, r24
    
    while(!READ_BIT(SPSR,SPIF));
     d88:	ee e2       	ldi	r30, 0x2E	; 46
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	88 23       	and	r24, r24
     d90:	dc f7       	brge	.-10     	; 0xd88 <SPI_SendRecive+0x14>
 
    
    SET_BIT(SPSR,SPIF);
     d92:	ae e2       	ldi	r26, 0x2E	; 46
     d94:	b0 e0       	ldi	r27, 0x00	; 0
     d96:	ee e2       	ldi	r30, 0x2E	; 46
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	80 81       	ld	r24, Z
     d9c:	80 68       	ori	r24, 0x80	; 128
     d9e:	8c 93       	st	X, r24
    
    return SPDR; // return what's inside slave 
     da0:	ef e2       	ldi	r30, 0x2F	; 47
     da2:	f0 e0       	ldi	r31, 0x00	; 0
     da4:	80 81       	ld	r24, Z
       
    
}
     da6:	0f 90       	pop	r0
     da8:	cf 91       	pop	r28
     daa:	df 91       	pop	r29
     dac:	08 95       	ret

00000dae <SPI_SlaveRecivePeriodic>:

// only for slave because slave doesn't initiate the communication and wait the master
u8 SPI_SlaveRecivePeriodic (u8 *pdata)
{                                                    
     dae:	df 93       	push	r29
     db0:	cf 93       	push	r28
     db2:	00 d0       	rcall	.+0      	; 0xdb4 <SPI_SlaveRecivePeriodic+0x6>
     db4:	0f 92       	push	r0
     db6:	cd b7       	in	r28, 0x3d	; 61
     db8:	de b7       	in	r29, 0x3e	; 62
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
    if (READ_BIT(SPSR,SPIF))
     dbe:	ee e2       	ldi	r30, 0x2E	; 46
     dc0:	f0 e0       	ldi	r31, 0x00	; 0
     dc2:	80 81       	ld	r24, Z
     dc4:	88 23       	and	r24, r24
     dc6:	4c f4       	brge	.+18     	; 0xdda <SPI_SlaveRecivePeriodic+0x2c>
    {
        *pdata = SPDR;
     dc8:	ef e2       	ldi	r30, 0x2F	; 47
     dca:	f0 e0       	ldi	r31, 0x00	; 0
     dcc:	80 81       	ld	r24, Z
     dce:	e9 81       	ldd	r30, Y+1	; 0x01
     dd0:	fa 81       	ldd	r31, Y+2	; 0x02
     dd2:	80 83       	st	Z, r24
        return 1;
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	8b 83       	std	Y+3, r24	; 0x03
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <SPI_SlaveRecivePeriodic+0x2e>
    }
    return 0 ;
     dda:	1b 82       	std	Y+3, r1	; 0x03
     ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    
}
     dde:	0f 90       	pop	r0
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	cf 91       	pop	r28
     de6:	df 91       	pop	r29
     de8:	08 95       	ret

00000dea <SPI_SendNoBlockInBuffer>:

void SPI_SendNoBlockInBuffer(u8 data)
{
     dea:	df 93       	push	r29
     dec:	cf 93       	push	r28
     dee:	0f 92       	push	r0
     df0:	cd b7       	in	r28, 0x3d	; 61
     df2:	de b7       	in	r29, 0x3e	; 62
     df4:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
     df6:	ef e2       	ldi	r30, 0x2F	; 47
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	80 83       	st	Z, r24
    
}
     dfe:	0f 90       	pop	r0
     e00:	cf 91       	pop	r28
     e02:	df 91       	pop	r29
     e04:	08 95       	ret

00000e06 <SPI_SendRecive_RuntimeOut>:

u8 SPI_SendRecive_RuntimeOut(u8 data,u8*ptrdata,u8 timeout)
{
     e06:	df 93       	push	r29
     e08:	cf 93       	push	r28
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	64 97       	sbiw	r28, 0x14	; 20
     e10:	0f b6       	in	r0, 0x3f	; 63
     e12:	f8 94       	cli
     e14:	de bf       	out	0x3e, r29	; 62
     e16:	0f be       	out	0x3f, r0	; 63
     e18:	cd bf       	out	0x3d, r28	; 61
     e1a:	88 8b       	std	Y+16, r24	; 0x10
     e1c:	7a 8b       	std	Y+18, r23	; 0x12
     e1e:	69 8b       	std	Y+17, r22	; 0x11
     e20:	4b 8b       	std	Y+19, r20	; 0x13
    SPDR = data; // write data to master and wait until it sent to slave
     e22:	ef e2       	ldi	r30, 0x2F	; 47
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	88 89       	ldd	r24, Y+16	; 0x10
     e28:	80 83       	st	Z, r24
    
    u8 counter = 0;
     e2a:	1f 86       	std	Y+15, r1	; 0x0f
     e2c:	75 c0       	rjmp	.+234    	; 0xf18 <SPI_SendRecive_RuntimeOut+0x112>
    
    while(!READ_BIT(SPSR,SPIF)&&(counter < timeout))
    {
        counter++;
     e2e:	8f 85       	ldd	r24, Y+15	; 0x0f
     e30:	8f 5f       	subi	r24, 0xFF	; 255
     e32:	8f 87       	std	Y+15, r24	; 0x0f
     e34:	80 e0       	ldi	r24, 0x00	; 0
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	a0 e8       	ldi	r26, 0x80	; 128
     e3a:	bf e3       	ldi	r27, 0x3F	; 63
     e3c:	8b 87       	std	Y+11, r24	; 0x0b
     e3e:	9c 87       	std	Y+12, r25	; 0x0c
     e40:	ad 87       	std	Y+13, r26	; 0x0d
     e42:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e44:	6b 85       	ldd	r22, Y+11	; 0x0b
     e46:	7c 85       	ldd	r23, Y+12	; 0x0c
     e48:	8d 85       	ldd	r24, Y+13	; 0x0d
     e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e4c:	20 e0       	ldi	r18, 0x00	; 0
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	4a e7       	ldi	r20, 0x7A	; 122
     e52:	55 e4       	ldi	r21, 0x45	; 69
     e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	8f 83       	std	Y+7, r24	; 0x07
     e5e:	98 87       	std	Y+8, r25	; 0x08
     e60:	a9 87       	std	Y+9, r26	; 0x09
     e62:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e64:	6f 81       	ldd	r22, Y+7	; 0x07
     e66:	78 85       	ldd	r23, Y+8	; 0x08
     e68:	89 85       	ldd	r24, Y+9	; 0x09
     e6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e6c:	20 e0       	ldi	r18, 0x00	; 0
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	40 e8       	ldi	r20, 0x80	; 128
     e72:	5f e3       	ldi	r21, 0x3F	; 63
     e74:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e78:	88 23       	and	r24, r24
     e7a:	2c f4       	brge	.+10     	; 0xe86 <SPI_SendRecive_RuntimeOut+0x80>
		__ticks = 1;
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	90 e0       	ldi	r25, 0x00	; 0
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
     e84:	3f c0       	rjmp	.+126    	; 0xf04 <SPI_SendRecive_RuntimeOut+0xfe>
	else if (__tmp > 65535)
     e86:	6f 81       	ldd	r22, Y+7	; 0x07
     e88:	78 85       	ldd	r23, Y+8	; 0x08
     e8a:	89 85       	ldd	r24, Y+9	; 0x09
     e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e8e:	20 e0       	ldi	r18, 0x00	; 0
     e90:	3f ef       	ldi	r19, 0xFF	; 255
     e92:	4f e7       	ldi	r20, 0x7F	; 127
     e94:	57 e4       	ldi	r21, 0x47	; 71
     e96:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e9a:	18 16       	cp	r1, r24
     e9c:	4c f5       	brge	.+82     	; 0xef0 <SPI_SendRecive_RuntimeOut+0xea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e9e:	6b 85       	ldd	r22, Y+11	; 0x0b
     ea0:	7c 85       	ldd	r23, Y+12	; 0x0c
     ea2:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea4:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea6:	20 e0       	ldi	r18, 0x00	; 0
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	40 e2       	ldi	r20, 0x20	; 32
     eac:	51 e4       	ldi	r21, 0x41	; 65
     eae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb2:	dc 01       	movw	r26, r24
     eb4:	cb 01       	movw	r24, r22
     eb6:	bc 01       	movw	r22, r24
     eb8:	cd 01       	movw	r24, r26
     eba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebe:	dc 01       	movw	r26, r24
     ec0:	cb 01       	movw	r24, r22
     ec2:	9e 83       	std	Y+6, r25	; 0x06
     ec4:	8d 83       	std	Y+5, r24	; 0x05
     ec6:	0f c0       	rjmp	.+30     	; 0xee6 <SPI_SendRecive_RuntimeOut+0xe0>
     ec8:	80 e9       	ldi	r24, 0x90	; 144
     eca:	91 e0       	ldi	r25, 0x01	; 1
     ecc:	9c 83       	std	Y+4, r25	; 0x04
     ece:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ed0:	8b 81       	ldd	r24, Y+3	; 0x03
     ed2:	9c 81       	ldd	r25, Y+4	; 0x04
     ed4:	01 97       	sbiw	r24, 0x01	; 1
     ed6:	f1 f7       	brne	.-4      	; 0xed4 <SPI_SendRecive_RuntimeOut+0xce>
     ed8:	9c 83       	std	Y+4, r25	; 0x04
     eda:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     edc:	8d 81       	ldd	r24, Y+5	; 0x05
     ede:	9e 81       	ldd	r25, Y+6	; 0x06
     ee0:	01 97       	sbiw	r24, 0x01	; 1
     ee2:	9e 83       	std	Y+6, r25	; 0x06
     ee4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee6:	8d 81       	ldd	r24, Y+5	; 0x05
     ee8:	9e 81       	ldd	r25, Y+6	; 0x06
     eea:	00 97       	sbiw	r24, 0x00	; 0
     eec:	69 f7       	brne	.-38     	; 0xec8 <SPI_SendRecive_RuntimeOut+0xc2>
     eee:	14 c0       	rjmp	.+40     	; 0xf18 <SPI_SendRecive_RuntimeOut+0x112>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ef0:	6f 81       	ldd	r22, Y+7	; 0x07
     ef2:	78 85       	ldd	r23, Y+8	; 0x08
     ef4:	89 85       	ldd	r24, Y+9	; 0x09
     ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	9e 83       	std	Y+6, r25	; 0x06
     f02:	8d 83       	std	Y+5, r24	; 0x05
     f04:	8d 81       	ldd	r24, Y+5	; 0x05
     f06:	9e 81       	ldd	r25, Y+6	; 0x06
     f08:	9a 83       	std	Y+2, r25	; 0x02
     f0a:	89 83       	std	Y+1, r24	; 0x01
     f0c:	89 81       	ldd	r24, Y+1	; 0x01
     f0e:	9a 81       	ldd	r25, Y+2	; 0x02
     f10:	01 97       	sbiw	r24, 0x01	; 1
     f12:	f1 f7       	brne	.-4      	; 0xf10 <SPI_SendRecive_RuntimeOut+0x10a>
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
{
    SPDR = data; // write data to master and wait until it sent to slave
    
    u8 counter = 0;
    
    while(!READ_BIT(SPSR,SPIF)&&(counter < timeout))
     f18:	ee e2       	ldi	r30, 0x2E	; 46
     f1a:	f0 e0       	ldi	r31, 0x00	; 0
     f1c:	80 81       	ld	r24, Z
     f1e:	88 23       	and	r24, r24
     f20:	2c f0       	brlt	.+10     	; 0xf2c <SPI_SendRecive_RuntimeOut+0x126>
     f22:	9f 85       	ldd	r25, Y+15	; 0x0f
     f24:	8b 89       	ldd	r24, Y+19	; 0x13
     f26:	98 17       	cp	r25, r24
     f28:	08 f4       	brcc	.+2      	; 0xf2c <SPI_SendRecive_RuntimeOut+0x126>
     f2a:	81 cf       	rjmp	.-254    	; 0xe2e <SPI_SendRecive_RuntimeOut+0x28>
    {
        counter++;
        _delay_ms(1);
    }
    if (counter == timeout )
     f2c:	9f 85       	ldd	r25, Y+15	; 0x0f
     f2e:	8b 89       	ldd	r24, Y+19	; 0x13
     f30:	98 17       	cp	r25, r24
     f32:	11 f4       	brne	.+4      	; 0xf38 <SPI_SendRecive_RuntimeOut+0x132>
    {
        return 0;
     f34:	1c 8a       	std	Y+20, r1	; 0x14
     f36:	08 c0       	rjmp	.+16     	; 0xf48 <SPI_SendRecive_RuntimeOut+0x142>
    }
    
    *ptrdata = SPDR; // return what's inside slave
     f38:	ef e2       	ldi	r30, 0x2F	; 47
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	e9 89       	ldd	r30, Y+17	; 0x11
     f40:	fa 89       	ldd	r31, Y+18	; 0x12
     f42:	80 83       	st	Z, r24
    return 1;
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	8c 8b       	std	Y+20, r24	; 0x14
     f48:	8c 89       	ldd	r24, Y+20	; 0x14
    
    
    
}
     f4a:	64 96       	adiw	r28, 0x14	; 20
     f4c:	0f b6       	in	r0, 0x3f	; 63
     f4e:	f8 94       	cli
     f50:	de bf       	out	0x3e, r29	; 62
     f52:	0f be       	out	0x3f, r0	; 63
     f54:	cd bf       	out	0x3d, r28	; 61
     f56:	cf 91       	pop	r28
     f58:	df 91       	pop	r29
     f5a:	08 95       	ret

00000f5c <M_TWI_voidInit>:
#include "TWI_Private.h"
#include "TWI_Interface.h"
#include "TWI_Config.h"

void M_TWI_voidInit(void)
{
     f5c:	df 93       	push	r29
     f5e:	cf 93       	push	r28
     f60:	cd b7       	in	r28, 0x3d	; 61
     f62:	de b7       	in	r29, 0x3e	; 62
	/*set prescaler to 1*/
	TWSR = 0;
     f64:	e1 e2       	ldi	r30, 0x21	; 33
     f66:	f0 e0       	ldi	r31, 0x00	; 0
     f68:	10 82       	st	Z, r1
	/*this is to make clock = 100khz*/
	TWBR = 32;
     f6a:	e0 e2       	ldi	r30, 0x20	; 32
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	80 e2       	ldi	r24, 0x20	; 32
     f70:	80 83       	st	Z, r24
}
     f72:	cf 91       	pop	r28
     f74:	df 91       	pop	r29
     f76:	08 95       	ret

00000f78 <Send_Start>:

void Send_Start(void)
{
     f78:	df 93       	push	r29
     f7a:	cf 93       	push	r28
     f7c:	cd b7       	in	r28, 0x3d	; 61
     f7e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWCR,TWSTA);
     f80:	a6 e5       	ldi	r26, 0x56	; 86
     f82:	b0 e0       	ldi	r27, 0x00	; 0
     f84:	e6 e5       	ldi	r30, 0x56	; 86
     f86:	f0 e0       	ldi	r31, 0x00	; 0
     f88:	80 81       	ld	r24, Z
     f8a:	8f 7d       	andi	r24, 0xDF	; 223
     f8c:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN) | (1<<TWEA);
     f8e:	e6 e5       	ldi	r30, 0x56	; 86
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	84 ee       	ldi	r24, 0xE4	; 228
     f94:	80 83       	st	Z, r24
	while((!READ_BIT(TWCR,TWINT)));
     f96:	e6 e5       	ldi	r30, 0x56	; 86
     f98:	f0 e0       	ldi	r31, 0x00	; 0
     f9a:	80 81       	ld	r24, Z
     f9c:	88 23       	and	r24, r24
     f9e:	dc f7       	brge	.-10     	; 0xf96 <Send_Start+0x1e>
//    case SLAVE_READ:
//    	while((!READ_BIT(TWCR,TWINT)) && (TWSR != 0x40));
//    	break;
//    }

}
     fa0:	cf 91       	pop	r28
     fa2:	df 91       	pop	r29
     fa4:	08 95       	ret

00000fa6 <sendByte>:

void sendByte(u8 copy_u8data)
{
     fa6:	df 93       	push	r29
     fa8:	cf 93       	push	r28
     faa:	0f 92       	push	r0
     fac:	cd b7       	in	r28, 0x3d	; 61
     fae:	de b7       	in	r29, 0x3e	; 62
     fb0:	89 83       	std	Y+1, r24	; 0x01
	TWDR = copy_u8data;
     fb2:	e3 e2       	ldi	r30, 0x23	; 35
     fb4:	f0 e0       	ldi	r31, 0x00	; 0
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	80 83       	st	Z, r24
	CLR_BIT(TWCR,TWSTA);
     fba:	a6 e5       	ldi	r26, 0x56	; 86
     fbc:	b0 e0       	ldi	r27, 0x00	; 0
     fbe:	e6 e5       	ldi	r30, 0x56	; 86
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	8f 7d       	andi	r24, 0xDF	; 223
     fc6:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	84 e8       	ldi	r24, 0x84	; 132
     fce:	80 83       	st	Z, r24
	while((!READ_BIT(TWCR,TWINT))/* && (TWSR != 0x28)*/);
     fd0:	e6 e5       	ldi	r30, 0x56	; 86
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	88 23       	and	r24, r24
     fd8:	dc f7       	brge	.-10     	; 0xfd0 <sendByte+0x2a>
}
     fda:	0f 90       	pop	r0
     fdc:	cf 91       	pop	r28
     fde:	df 91       	pop	r29
     fe0:	08 95       	ret

00000fe2 <receiveByte_ACK>:

void receiveByte_ACK(u8 * ptr)
{
     fe2:	df 93       	push	r29
     fe4:	cf 93       	push	r28
     fe6:	00 d0       	rcall	.+0      	; 0xfe8 <receiveByte_ACK+0x6>
     fe8:	cd b7       	in	r28, 0x3d	; 61
     fea:	de b7       	in	r29, 0x3e	; 62
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(TWCR,TWSTA);
     ff0:	a6 e5       	ldi	r26, 0x56	; 86
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	e6 e5       	ldi	r30, 0x56	; 86
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8f 7d       	andi	r24, 0xDF	; 223
     ffc:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     ffe:	e6 e5       	ldi	r30, 0x56	; 86
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	84 ec       	ldi	r24, 0xC4	; 196
    1004:	80 83       	st	Z, r24
    while((!READ_BIT(TWCR,TWINT)) /*&& (TWSR != 0x50)*/);
    1006:	e6 e5       	ldi	r30, 0x56	; 86
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	88 23       	and	r24, r24
    100e:	dc f7       	brge	.-10     	; 0x1006 <receiveByte_ACK+0x24>
    *ptr = TWDR;
    1010:	e3 e2       	ldi	r30, 0x23	; 35
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	e9 81       	ldd	r30, Y+1	; 0x01
    1018:	fa 81       	ldd	r31, Y+2	; 0x02
    101a:	80 83       	st	Z, r24
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <receiveByte_NoACK>:
void receiveByte_NoACK(u8 * ptr)
{
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <receiveByte_NoACK+0x6>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
    1030:	9a 83       	std	Y+2, r25	; 0x02
    1032:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(TWCR,TWSTA);
    1034:	a6 e5       	ldi	r26, 0x56	; 86
    1036:	b0 e0       	ldi	r27, 0x00	; 0
    1038:	e6 e5       	ldi	r30, 0x56	; 86
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	8f 7d       	andi	r24, 0xDF	; 223
    1040:	8c 93       	st	X, r24
	TWCR = (1<<TWINT) | (1<<TWEN);
    1042:	e6 e5       	ldi	r30, 0x56	; 86
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	84 e8       	ldi	r24, 0x84	; 132
    1048:	80 83       	st	Z, r24
	while((!READ_BIT(TWCR,TWINT)) /*&& (TWSR != 0x58)*/);
    104a:	e6 e5       	ldi	r30, 0x56	; 86
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	88 23       	and	r24, r24
    1052:	dc f7       	brge	.-10     	; 0x104a <receiveByte_NoACK+0x24>
	*ptr = TWDR;
    1054:	e3 e2       	ldi	r30, 0x23	; 35
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	80 81       	ld	r24, Z
    105a:	e9 81       	ldd	r30, Y+1	; 0x01
    105c:	fa 81       	ldd	r31, Y+2	; 0x02
    105e:	80 83       	st	Z, r24

}
    1060:	0f 90       	pop	r0
    1062:	0f 90       	pop	r0
    1064:	cf 91       	pop	r28
    1066:	df 91       	pop	r29
    1068:	08 95       	ret

0000106a <Send_Stop>:
void Send_Stop(void)
{
    106a:	df 93       	push	r29
    106c:	cf 93       	push	r28
    106e:	cd b7       	in	r28, 0x3d	; 61
    1070:	de b7       	in	r29, 0x3e	; 62
//	TWCR = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
	CLR_BIT(TWCR,TWSTA);
    1072:	a6 e5       	ldi	r26, 0x56	; 86
    1074:	b0 e0       	ldi	r27, 0x00	; 0
    1076:	e6 e5       	ldi	r30, 0x56	; 86
    1078:	f0 e0       	ldi	r31, 0x00	; 0
    107a:	80 81       	ld	r24, Z
    107c:	8f 7d       	andi	r24, 0xDF	; 223
    107e:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWSTO);
    1080:	a6 e5       	ldi	r26, 0x56	; 86
    1082:	b0 e0       	ldi	r27, 0x00	; 0
    1084:	e6 e5       	ldi	r30, 0x56	; 86
    1086:	f0 e0       	ldi	r31, 0x00	; 0
    1088:	80 81       	ld	r24, Z
    108a:	80 61       	ori	r24, 0x10	; 16
    108c:	8c 93       	st	X, r24
	SET_BIT(TWCR,TWINT);
    108e:	a6 e5       	ldi	r26, 0x56	; 86
    1090:	b0 e0       	ldi	r27, 0x00	; 0
    1092:	e6 e5       	ldi	r30, 0x56	; 86
    1094:	f0 e0       	ldi	r31, 0x00	; 0
    1096:	80 81       	ld	r24, Z
    1098:	80 68       	ori	r24, 0x80	; 128
    109a:	8c 93       	st	X, r24
//	while(!READ_BIT(TWCR,TWINT));
}
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	08 95       	ret

000010a2 <getStatus>:
void getStatus(u8* Status )
{
    10a2:	df 93       	push	r29
    10a4:	cf 93       	push	r28
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <getStatus+0x6>
    10a8:	cd b7       	in	r28, 0x3d	; 61
    10aa:	de b7       	in	r29, 0x3e	; 62
    10ac:	9a 83       	std	Y+2, r25	; 0x02
    10ae:	89 83       	std	Y+1, r24	; 0x01
	*Status = TWSR & 0xF8;
    10b0:	e1 e2       	ldi	r30, 0x21	; 33
    10b2:	f0 e0       	ldi	r31, 0x00	; 0
    10b4:	80 81       	ld	r24, Z
    10b6:	88 7f       	andi	r24, 0xF8	; 248
    10b8:	e9 81       	ldd	r30, Y+1	; 0x01
    10ba:	fa 81       	ldd	r31, Y+2	; 0x02
    10bc:	80 83       	st	Z, r24
}
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	08 95       	ret

000010c8 <sendrepeatedstart>:
void sendrepeatedstart(void)
{
    10c8:	df 93       	push	r29
    10ca:	cf 93       	push	r28
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA);
    10d0:	e6 e5       	ldi	r30, 0x56	; 86
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	84 ee       	ldi	r24, 0xE4	; 228
    10d6:	80 83       	st	Z, r24

	while(READ_BIT(TWCR,TWINT)==0);
    10d8:	e6 e5       	ldi	r30, 0x56	; 86
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	88 23       	and	r24, r24
    10e0:	dc f7       	brge	.-10     	; 0x10d8 <sendrepeatedstart+0x10>
}
    10e2:	cf 91       	pop	r28
    10e4:	df 91       	pop	r29
    10e6:	08 95       	ret

000010e8 <M_U8_I2C_ReadWithAck>:
u8 M_U8_I2C_ReadWithAck(){
    10e8:	df 93       	push	r29
    10ea:	cf 93       	push	r28
    10ec:	cd b7       	in	r28, 0x3d	; 61
    10ee:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
    10f0:	e6 e5       	ldi	r30, 0x56	; 86
    10f2:	f0 e0       	ldi	r31, 0x00	; 0
    10f4:	84 ec       	ldi	r24, 0xC4	; 196
    10f6:	80 83       	st	Z, r24
    while(!(TWCR&(1<<TWINT)));
    10f8:	e6 e5       	ldi	r30, 0x56	; 86
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	80 81       	ld	r24, Z
    10fe:	88 23       	and	r24, r24
    1100:	dc f7       	brge	.-10     	; 0x10f8 <M_U8_I2C_ReadWithAck+0x10>
    return TWDR;
    1102:	e3 e2       	ldi	r30, 0x23	; 35
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	80 81       	ld	r24, Z
}
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <M_U8_I2C_ReadWithNack>:
u8 M_U8_I2C_ReadWithNack(){
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	cd b7       	in	r28, 0x3d	; 61
    1114:	de b7       	in	r29, 0x3e	; 62
	TWCR =(1<<TWEN)|(1<<TWINT);
    1116:	e6 e5       	ldi	r30, 0x56	; 86
    1118:	f0 e0       	ldi	r31, 0x00	; 0
    111a:	84 e8       	ldi	r24, 0x84	; 132
    111c:	80 83       	st	Z, r24
    while(!(TWCR&(1<<TWINT)));
    111e:	e6 e5       	ldi	r30, 0x56	; 86
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	88 23       	and	r24, r24
    1126:	dc f7       	brge	.-10     	; 0x111e <M_U8_I2C_ReadWithNack+0x10>
    return TWDR;
    1128:	e3 e2       	ldi	r30, 0x23	; 35
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
}
    112e:	cf 91       	pop	r28
    1130:	df 91       	pop	r29
    1132:	08 95       	ret

00001134 <M_U8_I2C_Repeated_Start>:


u8 M_U8_I2C_Repeated_Start(){
    1134:	df 93       	push	r29
    1136:	cf 93       	push	r28
    1138:	0f 92       	push	r0
    113a:	cd b7       	in	r28, 0x3d	; 61
    113c:	de b7       	in	r29, 0x3e	; 62
	u8 transmit_status;
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);
    113e:	e6 e5       	ldi	r30, 0x56	; 86
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	84 ea       	ldi	r24, 0xA4	; 164
    1144:	80 83       	st	Z, r24
	while(!(TWCR& (1<<TWINT)));
    1146:	e6 e5       	ldi	r30, 0x56	; 86
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	88 23       	and	r24, r24
    114e:	dc f7       	brge	.-10     	; 0x1146 <M_U8_I2C_Repeated_Start+0x12>
	transmit_status = TWSR & 0xF8;
    1150:	e1 e2       	ldi	r30, 0x21	; 33
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	80 81       	ld	r24, Z
    1156:	88 7f       	andi	r24, 0xF8	; 248
    1158:	89 83       	std	Y+1, r24	; 0x01
	if(transmit_status!= 0x10)
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	80 31       	cpi	r24, 0x10	; 16
    115e:	09 f0       	breq	.+2      	; 0x1162 <M_U8_I2C_Repeated_Start+0x2e>
	transmit_status = 0x00;
    1160:	19 82       	std	Y+1, r1	; 0x01

	return transmit_status;
    1162:	89 81       	ldd	r24, Y+1	; 0x01
}
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <DIO_InitPin>:




static void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type status)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	2c 97       	sbiw	r28, 0x0c	; 12
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	8b 83       	std	Y+3, r24	; 0x03
    1182:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port_type port=pin/8;
    1184:	8b 81       	ldd	r24, Y+3	; 0x03
    1186:	86 95       	lsr	r24
    1188:	86 95       	lsr	r24
    118a:	86 95       	lsr	r24
    118c:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num=pin%8;
    118e:	8b 81       	ldd	r24, Y+3	; 0x03
    1190:	87 70       	andi	r24, 0x07	; 7
    1192:	89 83       	std	Y+1, r24	; 0x01
	
	switch(status)
    1194:	8c 81       	ldd	r24, Y+4	; 0x04
    1196:	28 2f       	mov	r18, r24
    1198:	30 e0       	ldi	r19, 0x00	; 0
    119a:	3c 87       	std	Y+12, r19	; 0x0c
    119c:	2b 87       	std	Y+11, r18	; 0x0b
    119e:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    11a2:	88 30       	cpi	r24, 0x08	; 8
    11a4:	91 05       	cpc	r25, r1
    11a6:	09 f4       	brne	.+2      	; 0x11aa <DIO_InitPin+0x3e>
    11a8:	ca c0       	rjmp	.+404    	; 0x133e <DIO_InitPin+0x1d2>
    11aa:	2b 85       	ldd	r18, Y+11	; 0x0b
    11ac:	3c 85       	ldd	r19, Y+12	; 0x0c
    11ae:	29 30       	cpi	r18, 0x09	; 9
    11b0:	31 05       	cpc	r19, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <DIO_InitPin+0x4a>
    11b4:	86 c1       	rjmp	.+780    	; 0x14c2 <DIO_InitPin+0x356>
    11b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    11b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ba:	87 30       	cpi	r24, 0x07	; 7
    11bc:	91 05       	cpc	r25, r1
    11be:	09 f0       	breq	.+2      	; 0x11c2 <DIO_InitPin+0x56>
    11c0:	3d c2       	rjmp	.+1146   	; 0x163c <DIO_InitPin+0x4d0>
	{
		case OUTPUT:
		switch(port)
    11c2:	8a 81       	ldd	r24, Y+2	; 0x02
    11c4:	28 2f       	mov	r18, r24
    11c6:	30 e0       	ldi	r19, 0x00	; 0
    11c8:	3a 87       	std	Y+10, r19	; 0x0a
    11ca:	29 87       	std	Y+9, r18	; 0x09
    11cc:	89 85       	ldd	r24, Y+9	; 0x09
    11ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    11d0:	81 30       	cpi	r24, 0x01	; 1
    11d2:	91 05       	cpc	r25, r1
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <DIO_InitPin+0x6c>
    11d6:	3e c0       	rjmp	.+124    	; 0x1254 <DIO_InitPin+0xe8>
    11d8:	29 85       	ldd	r18, Y+9	; 0x09
    11da:	3a 85       	ldd	r19, Y+10	; 0x0a
    11dc:	22 30       	cpi	r18, 0x02	; 2
    11de:	31 05       	cpc	r19, r1
    11e0:	2c f4       	brge	.+10     	; 0x11ec <DIO_InitPin+0x80>
    11e2:	89 85       	ldd	r24, Y+9	; 0x09
    11e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11e6:	00 97       	sbiw	r24, 0x00	; 0
    11e8:	71 f0       	breq	.+28     	; 0x1206 <DIO_InitPin+0x9a>
    11ea:	28 c2       	rjmp	.+1104   	; 0x163c <DIO_InitPin+0x4d0>
    11ec:	29 85       	ldd	r18, Y+9	; 0x09
    11ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    11f0:	22 30       	cpi	r18, 0x02	; 2
    11f2:	31 05       	cpc	r19, r1
    11f4:	09 f4       	brne	.+2      	; 0x11f8 <DIO_InitPin+0x8c>
    11f6:	55 c0       	rjmp	.+170    	; 0x12a2 <DIO_InitPin+0x136>
    11f8:	89 85       	ldd	r24, Y+9	; 0x09
    11fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    11fc:	83 30       	cpi	r24, 0x03	; 3
    11fe:	91 05       	cpc	r25, r1
    1200:	09 f4       	brne	.+2      	; 0x1204 <DIO_InitPin+0x98>
    1202:	76 c0       	rjmp	.+236    	; 0x12f0 <DIO_InitPin+0x184>
    1204:	1b c2       	rjmp	.+1078   	; 0x163c <DIO_InitPin+0x4d0>
		{
		case PA:
			SET_BIT(DDRA,pin_num);
    1206:	aa e3       	ldi	r26, 0x3A	; 58
    1208:	b0 e0       	ldi	r27, 0x00	; 0
    120a:	ea e3       	ldi	r30, 0x3A	; 58
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	80 81       	ld	r24, Z
    1210:	48 2f       	mov	r20, r24
    1212:	89 81       	ldd	r24, Y+1	; 0x01
    1214:	28 2f       	mov	r18, r24
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <DIO_InitPin+0xb6>
    121e:	88 0f       	add	r24, r24
    1220:	99 1f       	adc	r25, r25
    1222:	2a 95       	dec	r18
    1224:	e2 f7       	brpl	.-8      	; 0x121e <DIO_InitPin+0xb2>
    1226:	84 2b       	or	r24, r20
    1228:	8c 93       	st	X, r24
			CLR_BIT(PORTA, pin_num);
    122a:	ab e3       	ldi	r26, 0x3B	; 59
    122c:	b0 e0       	ldi	r27, 0x00	; 0
    122e:	eb e3       	ldi	r30, 0x3B	; 59
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	80 81       	ld	r24, Z
    1234:	48 2f       	mov	r20, r24
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	02 2e       	mov	r0, r18
    1242:	02 c0       	rjmp	.+4      	; 0x1248 <DIO_InitPin+0xdc>
    1244:	88 0f       	add	r24, r24
    1246:	99 1f       	adc	r25, r25
    1248:	0a 94       	dec	r0
    124a:	e2 f7       	brpl	.-8      	; 0x1244 <DIO_InitPin+0xd8>
    124c:	80 95       	com	r24
    124e:	84 23       	and	r24, r20
    1250:	8c 93       	st	X, r24
    1252:	f4 c1       	rjmp	.+1000   	; 0x163c <DIO_InitPin+0x4d0>
			break;
			case PB: 
			SET_BIT(DDRB,pin_num);
    1254:	a7 e3       	ldi	r26, 0x37	; 55
    1256:	b0 e0       	ldi	r27, 0x00	; 0
    1258:	e7 e3       	ldi	r30, 0x37	; 55
    125a:	f0 e0       	ldi	r31, 0x00	; 0
    125c:	80 81       	ld	r24, Z
    125e:	48 2f       	mov	r20, r24
    1260:	89 81       	ldd	r24, Y+1	; 0x01
    1262:	28 2f       	mov	r18, r24
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	02 c0       	rjmp	.+4      	; 0x1270 <DIO_InitPin+0x104>
    126c:	88 0f       	add	r24, r24
    126e:	99 1f       	adc	r25, r25
    1270:	2a 95       	dec	r18
    1272:	e2 f7       	brpl	.-8      	; 0x126c <DIO_InitPin+0x100>
    1274:	84 2b       	or	r24, r20
    1276:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
    1278:	a8 e3       	ldi	r26, 0x38	; 56
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e8 e3       	ldi	r30, 0x38	; 56
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <DIO_InitPin+0x12a>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <DIO_InitPin+0x126>
    129a:	80 95       	com	r24
    129c:	84 23       	and	r24, r20
    129e:	8c 93       	st	X, r24
    12a0:	cd c1       	rjmp	.+922    	; 0x163c <DIO_InitPin+0x4d0>
			break;
			case PC:
			SET_BIT(DDRC,pin_num);
    12a2:	a4 e3       	ldi	r26, 0x34	; 52
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e4 e3       	ldi	r30, 0x34	; 52
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	48 2f       	mov	r20, r24
    12ae:	89 81       	ldd	r24, Y+1	; 0x01
    12b0:	28 2f       	mov	r18, r24
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	90 e0       	ldi	r25, 0x00	; 0
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <DIO_InitPin+0x152>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	2a 95       	dec	r18
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <DIO_InitPin+0x14e>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
    12c6:	a5 e3       	ldi	r26, 0x35	; 53
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	48 2f       	mov	r20, r24
    12d2:	89 81       	ldd	r24, Y+1	; 0x01
    12d4:	28 2f       	mov	r18, r24
    12d6:	30 e0       	ldi	r19, 0x00	; 0
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <DIO_InitPin+0x178>
    12e0:	88 0f       	add	r24, r24
    12e2:	99 1f       	adc	r25, r25
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <DIO_InitPin+0x174>
    12e8:	80 95       	com	r24
    12ea:	84 23       	and	r24, r20
    12ec:	8c 93       	st	X, r24
    12ee:	a6 c1       	rjmp	.+844    	; 0x163c <DIO_InitPin+0x4d0>
			break;
			case PD:
			SET_BIT(DDRD,pin_num);
    12f0:	a1 e3       	ldi	r26, 0x31	; 49
    12f2:	b0 e0       	ldi	r27, 0x00	; 0
    12f4:	e1 e3       	ldi	r30, 0x31	; 49
    12f6:	f0 e0       	ldi	r31, 0x00	; 0
    12f8:	80 81       	ld	r24, Z
    12fa:	48 2f       	mov	r20, r24
    12fc:	89 81       	ldd	r24, Y+1	; 0x01
    12fe:	28 2f       	mov	r18, r24
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	81 e0       	ldi	r24, 0x01	; 1
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	02 c0       	rjmp	.+4      	; 0x130c <DIO_InitPin+0x1a0>
    1308:	88 0f       	add	r24, r24
    130a:	99 1f       	adc	r25, r25
    130c:	2a 95       	dec	r18
    130e:	e2 f7       	brpl	.-8      	; 0x1308 <DIO_InitPin+0x19c>
    1310:	84 2b       	or	r24, r20
    1312:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
    1314:	a2 e3       	ldi	r26, 0x32	; 50
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e2 e3       	ldi	r30, 0x32	; 50
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	48 2f       	mov	r20, r24
    1320:	89 81       	ldd	r24, Y+1	; 0x01
    1322:	28 2f       	mov	r18, r24
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	02 2e       	mov	r0, r18
    132c:	02 c0       	rjmp	.+4      	; 0x1332 <DIO_InitPin+0x1c6>
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	0a 94       	dec	r0
    1334:	e2 f7       	brpl	.-8      	; 0x132e <DIO_InitPin+0x1c2>
    1336:	80 95       	com	r24
    1338:	84 23       	and	r24, r20
    133a:	8c 93       	st	X, r24
    133c:	7f c1       	rjmp	.+766    	; 0x163c <DIO_InitPin+0x4d0>
			break;
		}
		break;
		case INFREE:
		switch(port)
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	28 2f       	mov	r18, r24
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	38 87       	std	Y+8, r19	; 0x08
    1346:	2f 83       	std	Y+7, r18	; 0x07
    1348:	8f 81       	ldd	r24, Y+7	; 0x07
    134a:	98 85       	ldd	r25, Y+8	; 0x08
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	91 05       	cpc	r25, r1
    1350:	09 f4       	brne	.+2      	; 0x1354 <DIO_InitPin+0x1e8>
    1352:	3f c0       	rjmp	.+126    	; 0x13d2 <DIO_InitPin+0x266>
    1354:	2f 81       	ldd	r18, Y+7	; 0x07
    1356:	38 85       	ldd	r19, Y+8	; 0x08
    1358:	22 30       	cpi	r18, 0x02	; 2
    135a:	31 05       	cpc	r19, r1
    135c:	2c f4       	brge	.+10     	; 0x1368 <DIO_InitPin+0x1fc>
    135e:	8f 81       	ldd	r24, Y+7	; 0x07
    1360:	98 85       	ldd	r25, Y+8	; 0x08
    1362:	00 97       	sbiw	r24, 0x00	; 0
    1364:	71 f0       	breq	.+28     	; 0x1382 <DIO_InitPin+0x216>
    1366:	6a c1       	rjmp	.+724    	; 0x163c <DIO_InitPin+0x4d0>
    1368:	2f 81       	ldd	r18, Y+7	; 0x07
    136a:	38 85       	ldd	r19, Y+8	; 0x08
    136c:	22 30       	cpi	r18, 0x02	; 2
    136e:	31 05       	cpc	r19, r1
    1370:	09 f4       	brne	.+2      	; 0x1374 <DIO_InitPin+0x208>
    1372:	57 c0       	rjmp	.+174    	; 0x1422 <DIO_InitPin+0x2b6>
    1374:	8f 81       	ldd	r24, Y+7	; 0x07
    1376:	98 85       	ldd	r25, Y+8	; 0x08
    1378:	83 30       	cpi	r24, 0x03	; 3
    137a:	91 05       	cpc	r25, r1
    137c:	09 f4       	brne	.+2      	; 0x1380 <DIO_InitPin+0x214>
    137e:	79 c0       	rjmp	.+242    	; 0x1472 <DIO_InitPin+0x306>
    1380:	5d c1       	rjmp	.+698    	; 0x163c <DIO_InitPin+0x4d0>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
    1382:	aa e3       	ldi	r26, 0x3A	; 58
    1384:	b0 e0       	ldi	r27, 0x00	; 0
    1386:	ea e3       	ldi	r30, 0x3A	; 58
    1388:	f0 e0       	ldi	r31, 0x00	; 0
    138a:	80 81       	ld	r24, Z
    138c:	48 2f       	mov	r20, r24
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	28 2f       	mov	r18, r24
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	02 c0       	rjmp	.+4      	; 0x139e <DIO_InitPin+0x232>
    139a:	88 0f       	add	r24, r24
    139c:	99 1f       	adc	r25, r25
    139e:	2a 95       	dec	r18
    13a0:	e2 f7       	brpl	.-8      	; 0x139a <DIO_InitPin+0x22e>
    13a2:	80 95       	com	r24
    13a4:	84 23       	and	r24, r20
    13a6:	8c 93       	st	X, r24
			CLR_BIT(PORTA, pin_num);
    13a8:	ab e3       	ldi	r26, 0x3B	; 59
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	eb e3       	ldi	r30, 0x3B	; 59
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	48 2f       	mov	r20, r24
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	90 e0       	ldi	r25, 0x00	; 0
    13be:	02 2e       	mov	r0, r18
    13c0:	02 c0       	rjmp	.+4      	; 0x13c6 <DIO_InitPin+0x25a>
    13c2:	88 0f       	add	r24, r24
    13c4:	99 1f       	adc	r25, r25
    13c6:	0a 94       	dec	r0
    13c8:	e2 f7       	brpl	.-8      	; 0x13c2 <DIO_InitPin+0x256>
    13ca:	80 95       	com	r24
    13cc:	84 23       	and	r24, r20
    13ce:	8c 93       	st	X, r24
    13d0:	35 c1       	rjmp	.+618    	; 0x163c <DIO_InitPin+0x4d0>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
    13d2:	a7 e3       	ldi	r26, 0x37	; 55
    13d4:	b0 e0       	ldi	r27, 0x00	; 0
    13d6:	e7 e3       	ldi	r30, 0x37	; 55
    13d8:	f0 e0       	ldi	r31, 0x00	; 0
    13da:	80 81       	ld	r24, Z
    13dc:	48 2f       	mov	r20, r24
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	28 2f       	mov	r18, r24
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <DIO_InitPin+0x282>
    13ea:	88 0f       	add	r24, r24
    13ec:	99 1f       	adc	r25, r25
    13ee:	2a 95       	dec	r18
    13f0:	e2 f7       	brpl	.-8      	; 0x13ea <DIO_InitPin+0x27e>
    13f2:	80 95       	com	r24
    13f4:	84 23       	and	r24, r20
    13f6:	8c 93       	st	X, r24
			CLR_BIT(PORTB,pin_num);
    13f8:	a8 e3       	ldi	r26, 0x38	; 56
    13fa:	b0 e0       	ldi	r27, 0x00	; 0
    13fc:	e8 e3       	ldi	r30, 0x38	; 56
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	48 2f       	mov	r20, r24
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	02 2e       	mov	r0, r18
    1410:	02 c0       	rjmp	.+4      	; 0x1416 <DIO_InitPin+0x2aa>
    1412:	88 0f       	add	r24, r24
    1414:	99 1f       	adc	r25, r25
    1416:	0a 94       	dec	r0
    1418:	e2 f7       	brpl	.-8      	; 0x1412 <DIO_InitPin+0x2a6>
    141a:	80 95       	com	r24
    141c:	84 23       	and	r24, r20
    141e:	8c 93       	st	X, r24
    1420:	0d c1       	rjmp	.+538    	; 0x163c <DIO_InitPin+0x4d0>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
    1422:	a4 e3       	ldi	r26, 0x34	; 52
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	e4 e3       	ldi	r30, 0x34	; 52
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	80 81       	ld	r24, Z
    142c:	48 2f       	mov	r20, r24
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	28 2f       	mov	r18, r24
    1432:	30 e0       	ldi	r19, 0x00	; 0
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	02 c0       	rjmp	.+4      	; 0x143e <DIO_InitPin+0x2d2>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	2a 95       	dec	r18
    1440:	e2 f7       	brpl	.-8      	; 0x143a <DIO_InitPin+0x2ce>
    1442:	80 95       	com	r24
    1444:	84 23       	and	r24, r20
    1446:	8c 93       	st	X, r24
			CLR_BIT(PORTC,pin_num);
    1448:	a5 e3       	ldi	r26, 0x35	; 53
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	e5 e3       	ldi	r30, 0x35	; 53
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	89 81       	ldd	r24, Y+1	; 0x01
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <DIO_InitPin+0x2fa>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <DIO_InitPin+0x2f6>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	e5 c0       	rjmp	.+458    	; 0x163c <DIO_InitPin+0x4d0>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
    1472:	a1 e3       	ldi	r26, 0x31	; 49
    1474:	b0 e0       	ldi	r27, 0x00	; 0
    1476:	e1 e3       	ldi	r30, 0x31	; 49
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	80 81       	ld	r24, Z
    147c:	48 2f       	mov	r20, r24
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	81 e0       	ldi	r24, 0x01	; 1
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	02 c0       	rjmp	.+4      	; 0x148e <DIO_InitPin+0x322>
    148a:	88 0f       	add	r24, r24
    148c:	99 1f       	adc	r25, r25
    148e:	2a 95       	dec	r18
    1490:	e2 f7       	brpl	.-8      	; 0x148a <DIO_InitPin+0x31e>
    1492:	80 95       	com	r24
    1494:	84 23       	and	r24, r20
    1496:	8c 93       	st	X, r24
			CLR_BIT(PORTD,pin_num);
    1498:	a2 e3       	ldi	r26, 0x32	; 50
    149a:	b0 e0       	ldi	r27, 0x00	; 0
    149c:	e2 e3       	ldi	r30, 0x32	; 50
    149e:	f0 e0       	ldi	r31, 0x00	; 0
    14a0:	80 81       	ld	r24, Z
    14a2:	48 2f       	mov	r20, r24
    14a4:	89 81       	ldd	r24, Y+1	; 0x01
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	81 e0       	ldi	r24, 0x01	; 1
    14ac:	90 e0       	ldi	r25, 0x00	; 0
    14ae:	02 2e       	mov	r0, r18
    14b0:	02 c0       	rjmp	.+4      	; 0x14b6 <DIO_InitPin+0x34a>
    14b2:	88 0f       	add	r24, r24
    14b4:	99 1f       	adc	r25, r25
    14b6:	0a 94       	dec	r0
    14b8:	e2 f7       	brpl	.-8      	; 0x14b2 <DIO_InitPin+0x346>
    14ba:	80 95       	com	r24
    14bc:	84 23       	and	r24, r20
    14be:	8c 93       	st	X, r24
    14c0:	bd c0       	rjmp	.+378    	; 0x163c <DIO_InitPin+0x4d0>
			break;
		}
		break;
		
		case INPULL:
		switch(port)
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	3e 83       	std	Y+6, r19	; 0x06
    14ca:	2d 83       	std	Y+5, r18	; 0x05
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	9e 81       	ldd	r25, Y+6	; 0x06
    14d0:	81 30       	cpi	r24, 0x01	; 1
    14d2:	91 05       	cpc	r25, r1
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <DIO_InitPin+0x36c>
    14d6:	3e c0       	rjmp	.+124    	; 0x1554 <DIO_InitPin+0x3e8>
    14d8:	2d 81       	ldd	r18, Y+5	; 0x05
    14da:	3e 81       	ldd	r19, Y+6	; 0x06
    14dc:	22 30       	cpi	r18, 0x02	; 2
    14de:	31 05       	cpc	r19, r1
    14e0:	2c f4       	brge	.+10     	; 0x14ec <DIO_InitPin+0x380>
    14e2:	8d 81       	ldd	r24, Y+5	; 0x05
    14e4:	9e 81       	ldd	r25, Y+6	; 0x06
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	71 f0       	breq	.+28     	; 0x1506 <DIO_InitPin+0x39a>
    14ea:	a8 c0       	rjmp	.+336    	; 0x163c <DIO_InitPin+0x4d0>
    14ec:	2d 81       	ldd	r18, Y+5	; 0x05
    14ee:	3e 81       	ldd	r19, Y+6	; 0x06
    14f0:	22 30       	cpi	r18, 0x02	; 2
    14f2:	31 05       	cpc	r19, r1
    14f4:	09 f4       	brne	.+2      	; 0x14f8 <DIO_InitPin+0x38c>
    14f6:	55 c0       	rjmp	.+170    	; 0x15a2 <DIO_InitPin+0x436>
    14f8:	8d 81       	ldd	r24, Y+5	; 0x05
    14fa:	9e 81       	ldd	r25, Y+6	; 0x06
    14fc:	83 30       	cpi	r24, 0x03	; 3
    14fe:	91 05       	cpc	r25, r1
    1500:	09 f4       	brne	.+2      	; 0x1504 <DIO_InitPin+0x398>
    1502:	76 c0       	rjmp	.+236    	; 0x15f0 <DIO_InitPin+0x484>
    1504:	9b c0       	rjmp	.+310    	; 0x163c <DIO_InitPin+0x4d0>
		{
			case PA:
			CLR_BIT(DDRA,pin_num);
    1506:	aa e3       	ldi	r26, 0x3A	; 58
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	ea e3       	ldi	r30, 0x3A	; 58
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	80 81       	ld	r24, Z
    1510:	48 2f       	mov	r20, r24
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	81 e0       	ldi	r24, 0x01	; 1
    151a:	90 e0       	ldi	r25, 0x00	; 0
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <DIO_InitPin+0x3b6>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	2a 95       	dec	r18
    1524:	e2 f7       	brpl	.-8      	; 0x151e <DIO_InitPin+0x3b2>
    1526:	80 95       	com	r24
    1528:	84 23       	and	r24, r20
    152a:	8c 93       	st	X, r24
			SET_BIT(PORTA, pin_num);
    152c:	ab e3       	ldi	r26, 0x3B	; 59
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	eb e3       	ldi	r30, 0x3B	; 59
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <DIO_InitPin+0x3de>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <DIO_InitPin+0x3da>
    154e:	84 2b       	or	r24, r20
    1550:	8c 93       	st	X, r24
    1552:	74 c0       	rjmp	.+232    	; 0x163c <DIO_InitPin+0x4d0>
			break;
			case PB:
			CLR_BIT(DDRB,pin_num);
    1554:	a7 e3       	ldi	r26, 0x37	; 55
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	e7 e3       	ldi	r30, 0x37	; 55
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	48 2f       	mov	r20, r24
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	28 2f       	mov	r18, r24
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	81 e0       	ldi	r24, 0x01	; 1
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <DIO_InitPin+0x404>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	2a 95       	dec	r18
    1572:	e2 f7       	brpl	.-8      	; 0x156c <DIO_InitPin+0x400>
    1574:	80 95       	com	r24
    1576:	84 23       	and	r24, r20
    1578:	8c 93       	st	X, r24
			SET_BIT(PORTB,pin_num);
    157a:	a8 e3       	ldi	r26, 0x38	; 56
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e8 e3       	ldi	r30, 0x38	; 56
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_InitPin+0x42c>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_InitPin+0x428>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	4d c0       	rjmp	.+154    	; 0x163c <DIO_InitPin+0x4d0>
			break;
			case PC:
			CLR_BIT(DDRC,pin_num);
    15a2:	a4 e3       	ldi	r26, 0x34	; 52
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e4 e3       	ldi	r30, 0x34	; 52
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <DIO_InitPin+0x452>
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	2a 95       	dec	r18
    15c0:	e2 f7       	brpl	.-8      	; 0x15ba <DIO_InitPin+0x44e>
    15c2:	80 95       	com	r24
    15c4:	84 23       	and	r24, r20
    15c6:	8c 93       	st	X, r24
			SET_BIT(PORTC,pin_num);
    15c8:	a5 e3       	ldi	r26, 0x35	; 53
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	e5 e3       	ldi	r30, 0x35	; 53
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	48 2f       	mov	r20, r24
    15d4:	89 81       	ldd	r24, Y+1	; 0x01
    15d6:	28 2f       	mov	r18, r24
    15d8:	30 e0       	ldi	r19, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	02 2e       	mov	r0, r18
    15e0:	02 c0       	rjmp	.+4      	; 0x15e6 <DIO_InitPin+0x47a>
    15e2:	88 0f       	add	r24, r24
    15e4:	99 1f       	adc	r25, r25
    15e6:	0a 94       	dec	r0
    15e8:	e2 f7       	brpl	.-8      	; 0x15e2 <DIO_InitPin+0x476>
    15ea:	84 2b       	or	r24, r20
    15ec:	8c 93       	st	X, r24
    15ee:	26 c0       	rjmp	.+76     	; 0x163c <DIO_InitPin+0x4d0>
			break;
			case PD:
			CLR_BIT(DDRD,pin_num);
    15f0:	a1 e3       	ldi	r26, 0x31	; 49
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e1 e3       	ldi	r30, 0x31	; 49
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	48 2f       	mov	r20, r24
    15fc:	89 81       	ldd	r24, Y+1	; 0x01
    15fe:	28 2f       	mov	r18, r24
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 c0       	rjmp	.+4      	; 0x160c <DIO_InitPin+0x4a0>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	2a 95       	dec	r18
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <DIO_InitPin+0x49c>
    1610:	80 95       	com	r24
    1612:	84 23       	and	r24, r20
    1614:	8c 93       	st	X, r24
			SET_BIT(PORTD,pin_num);
    1616:	a2 e3       	ldi	r26, 0x32	; 50
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e2 e3       	ldi	r30, 0x32	; 50
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <DIO_InitPin+0x4c8>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <DIO_InitPin+0x4c4>
    1638:	84 2b       	or	r24, r20
    163a:	8c 93       	st	X, r24
			break;
		}
		break;
	}
	
}
    163c:	2c 96       	adiw	r28, 0x0c	; 12
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <DIO_WritePin>:



void DIO_WritePin(DIO_Pin_type pin,DIO_PinVoltage_type volt)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	cd b7       	in	r28, 0x3d	; 61
    1654:	de b7       	in	r29, 0x3e	; 62
    1656:	28 97       	sbiw	r28, 0x08	; 8
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	de bf       	out	0x3e, r29	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	cd bf       	out	0x3d, r28	; 61
    1662:	8b 83       	std	Y+3, r24	; 0x03
    1664:	6c 83       	std	Y+4, r22	; 0x04
	DIO_Port_type port=pin/8;
    1666:	8b 81       	ldd	r24, Y+3	; 0x03
    1668:	86 95       	lsr	r24
    166a:	86 95       	lsr	r24
    166c:	86 95       	lsr	r24
    166e:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num=pin%8;
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	87 70       	andi	r24, 0x07	; 7
    1674:	89 83       	std	Y+1, r24	; 0x01
	
	if (volt==HIGH)
    1676:	8c 81       	ldd	r24, Y+4	; 0x04
    1678:	81 30       	cpi	r24, 0x01	; 1
    167a:	09 f0       	breq	.+2      	; 0x167e <DIO_WritePin+0x30>
    167c:	6f c0       	rjmp	.+222    	; 0x175c <DIO_WritePin+0x10e>
	{
		switch(port)
    167e:	8a 81       	ldd	r24, Y+2	; 0x02
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	38 87       	std	Y+8, r19	; 0x08
    1686:	2f 83       	std	Y+7, r18	; 0x07
    1688:	8f 81       	ldd	r24, Y+7	; 0x07
    168a:	98 85       	ldd	r25, Y+8	; 0x08
    168c:	81 30       	cpi	r24, 0x01	; 1
    168e:	91 05       	cpc	r25, r1
    1690:	49 f1       	breq	.+82     	; 0x16e4 <DIO_WritePin+0x96>
    1692:	2f 81       	ldd	r18, Y+7	; 0x07
    1694:	38 85       	ldd	r19, Y+8	; 0x08
    1696:	22 30       	cpi	r18, 0x02	; 2
    1698:	31 05       	cpc	r19, r1
    169a:	2c f4       	brge	.+10     	; 0x16a6 <DIO_WritePin+0x58>
    169c:	8f 81       	ldd	r24, Y+7	; 0x07
    169e:	98 85       	ldd	r25, Y+8	; 0x08
    16a0:	00 97       	sbiw	r24, 0x00	; 0
    16a2:	61 f0       	breq	.+24     	; 0x16bc <DIO_WritePin+0x6e>
    16a4:	d2 c0       	rjmp	.+420    	; 0x184a <DIO_WritePin+0x1fc>
    16a6:	2f 81       	ldd	r18, Y+7	; 0x07
    16a8:	38 85       	ldd	r19, Y+8	; 0x08
    16aa:	22 30       	cpi	r18, 0x02	; 2
    16ac:	31 05       	cpc	r19, r1
    16ae:	71 f1       	breq	.+92     	; 0x170c <DIO_WritePin+0xbe>
    16b0:	8f 81       	ldd	r24, Y+7	; 0x07
    16b2:	98 85       	ldd	r25, Y+8	; 0x08
    16b4:	83 30       	cpi	r24, 0x03	; 3
    16b6:	91 05       	cpc	r25, r1
    16b8:	e9 f1       	breq	.+122    	; 0x1734 <DIO_WritePin+0xe6>
    16ba:	c7 c0       	rjmp	.+398    	; 0x184a <DIO_WritePin+0x1fc>
		{
			case PA:

			SET_BIT(PORTA, pin_num);
    16bc:	ab e3       	ldi	r26, 0x3B	; 59
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	eb e3       	ldi	r30, 0x3B	; 59
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <DIO_WritePin+0x8c>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <DIO_WritePin+0x88>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	b3 c0       	rjmp	.+358    	; 0x184a <DIO_WritePin+0x1fc>
			break;
			case PB:
			
			SET_BIT(PORTB,pin_num);
    16e4:	a8 e3       	ldi	r26, 0x38	; 56
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	e8 e3       	ldi	r30, 0x38	; 56
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <DIO_WritePin+0xb4>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <DIO_WritePin+0xb0>
    1706:	84 2b       	or	r24, r20
    1708:	8c 93       	st	X, r24
    170a:	9f c0       	rjmp	.+318    	; 0x184a <DIO_WritePin+0x1fc>
			break;
			case PC:
			
			SET_BIT(PORTC,pin_num);
    170c:	a5 e3       	ldi	r26, 0x35	; 53
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	e5 e3       	ldi	r30, 0x35	; 53
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	80 81       	ld	r24, Z
    1716:	48 2f       	mov	r20, r24
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	02 2e       	mov	r0, r18
    1724:	02 c0       	rjmp	.+4      	; 0x172a <DIO_WritePin+0xdc>
    1726:	88 0f       	add	r24, r24
    1728:	99 1f       	adc	r25, r25
    172a:	0a 94       	dec	r0
    172c:	e2 f7       	brpl	.-8      	; 0x1726 <DIO_WritePin+0xd8>
    172e:	84 2b       	or	r24, r20
    1730:	8c 93       	st	X, r24
    1732:	8b c0       	rjmp	.+278    	; 0x184a <DIO_WritePin+0x1fc>
			break;
			case PD:
			
			SET_BIT(PORTD,pin_num);
    1734:	a2 e3       	ldi	r26, 0x32	; 50
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	e2 e3       	ldi	r30, 0x32	; 50
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_WritePin+0x104>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <DIO_WritePin+0x100>
    1756:	84 2b       	or	r24, r20
    1758:	8c 93       	st	X, r24
    175a:	77 c0       	rjmp	.+238    	; 0x184a <DIO_WritePin+0x1fc>
			break;
		}
	}
	else if (volt==LOW)
    175c:	8c 81       	ldd	r24, Y+4	; 0x04
    175e:	88 23       	and	r24, r24
    1760:	09 f0       	breq	.+2      	; 0x1764 <DIO_WritePin+0x116>
    1762:	73 c0       	rjmp	.+230    	; 0x184a <DIO_WritePin+0x1fc>
	{
		switch(port)
    1764:	8a 81       	ldd	r24, Y+2	; 0x02
    1766:	28 2f       	mov	r18, r24
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	3e 83       	std	Y+6, r19	; 0x06
    176c:	2d 83       	std	Y+5, r18	; 0x05
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	81 30       	cpi	r24, 0x01	; 1
    1774:	91 05       	cpc	r25, r1
    1776:	59 f1       	breq	.+86     	; 0x17ce <DIO_WritePin+0x180>
    1778:	2d 81       	ldd	r18, Y+5	; 0x05
    177a:	3e 81       	ldd	r19, Y+6	; 0x06
    177c:	22 30       	cpi	r18, 0x02	; 2
    177e:	31 05       	cpc	r19, r1
    1780:	2c f4       	brge	.+10     	; 0x178c <DIO_WritePin+0x13e>
    1782:	8d 81       	ldd	r24, Y+5	; 0x05
    1784:	9e 81       	ldd	r25, Y+6	; 0x06
    1786:	00 97       	sbiw	r24, 0x00	; 0
    1788:	69 f0       	breq	.+26     	; 0x17a4 <DIO_WritePin+0x156>
    178a:	5f c0       	rjmp	.+190    	; 0x184a <DIO_WritePin+0x1fc>
    178c:	2d 81       	ldd	r18, Y+5	; 0x05
    178e:	3e 81       	ldd	r19, Y+6	; 0x06
    1790:	22 30       	cpi	r18, 0x02	; 2
    1792:	31 05       	cpc	r19, r1
    1794:	89 f1       	breq	.+98     	; 0x17f8 <DIO_WritePin+0x1aa>
    1796:	8d 81       	ldd	r24, Y+5	; 0x05
    1798:	9e 81       	ldd	r25, Y+6	; 0x06
    179a:	83 30       	cpi	r24, 0x03	; 3
    179c:	91 05       	cpc	r25, r1
    179e:	09 f4       	brne	.+2      	; 0x17a2 <DIO_WritePin+0x154>
    17a0:	40 c0       	rjmp	.+128    	; 0x1822 <DIO_WritePin+0x1d4>
    17a2:	53 c0       	rjmp	.+166    	; 0x184a <DIO_WritePin+0x1fc>
		{
			case PA:

			CLR_BIT(PORTA, pin_num);
    17a4:	ab e3       	ldi	r26, 0x3B	; 59
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	eb e3       	ldi	r30, 0x3B	; 59
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	48 2f       	mov	r20, r24
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	28 2f       	mov	r18, r24
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	81 e0       	ldi	r24, 0x01	; 1
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	02 2e       	mov	r0, r18
    17bc:	02 c0       	rjmp	.+4      	; 0x17c2 <DIO_WritePin+0x174>
    17be:	88 0f       	add	r24, r24
    17c0:	99 1f       	adc	r25, r25
    17c2:	0a 94       	dec	r0
    17c4:	e2 f7       	brpl	.-8      	; 0x17be <DIO_WritePin+0x170>
    17c6:	80 95       	com	r24
    17c8:	84 23       	and	r24, r20
    17ca:	8c 93       	st	X, r24
    17cc:	3e c0       	rjmp	.+124    	; 0x184a <DIO_WritePin+0x1fc>
			break;
			case PB:
			
			CLR_BIT(PORTB,pin_num);
    17ce:	a8 e3       	ldi	r26, 0x38	; 56
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e8 e3       	ldi	r30, 0x38	; 56
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	48 2f       	mov	r20, r24
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	81 e0       	ldi	r24, 0x01	; 1
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	02 2e       	mov	r0, r18
    17e6:	02 c0       	rjmp	.+4      	; 0x17ec <DIO_WritePin+0x19e>
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	0a 94       	dec	r0
    17ee:	e2 f7       	brpl	.-8      	; 0x17e8 <DIO_WritePin+0x19a>
    17f0:	80 95       	com	r24
    17f2:	84 23       	and	r24, r20
    17f4:	8c 93       	st	X, r24
    17f6:	29 c0       	rjmp	.+82     	; 0x184a <DIO_WritePin+0x1fc>
			break;
			case PC:
			
			CLR_BIT(PORTC,pin_num);
    17f8:	a5 e3       	ldi	r26, 0x35	; 53
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	e5 e3       	ldi	r30, 0x35	; 53
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	48 2f       	mov	r20, r24
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	28 2f       	mov	r18, r24
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	90 e0       	ldi	r25, 0x00	; 0
    180e:	02 2e       	mov	r0, r18
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <DIO_WritePin+0x1c8>
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	0a 94       	dec	r0
    1818:	e2 f7       	brpl	.-8      	; 0x1812 <DIO_WritePin+0x1c4>
    181a:	80 95       	com	r24
    181c:	84 23       	and	r24, r20
    181e:	8c 93       	st	X, r24
    1820:	14 c0       	rjmp	.+40     	; 0x184a <DIO_WritePin+0x1fc>
			break;
			case PD:
			
			CLR_BIT(PORTD,pin_num);
    1822:	a2 e3       	ldi	r26, 0x32	; 50
    1824:	b0 e0       	ldi	r27, 0x00	; 0
    1826:	e2 e3       	ldi	r30, 0x32	; 50
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	80 81       	ld	r24, Z
    182c:	48 2f       	mov	r20, r24
    182e:	89 81       	ldd	r24, Y+1	; 0x01
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	81 e0       	ldi	r24, 0x01	; 1
    1836:	90 e0       	ldi	r25, 0x00	; 0
    1838:	02 2e       	mov	r0, r18
    183a:	02 c0       	rjmp	.+4      	; 0x1840 <DIO_WritePin+0x1f2>
    183c:	88 0f       	add	r24, r24
    183e:	99 1f       	adc	r25, r25
    1840:	0a 94       	dec	r0
    1842:	e2 f7       	brpl	.-8      	; 0x183c <DIO_WritePin+0x1ee>
    1844:	80 95       	com	r24
    1846:	84 23       	and	r24, r20
    1848:	8c 93       	st	X, r24
			break;
		}
	}

}
    184a:	28 96       	adiw	r28, 0x08	; 8
    184c:	0f b6       	in	r0, 0x3f	; 63
    184e:	f8 94       	cli
    1850:	de bf       	out	0x3e, r29	; 62
    1852:	0f be       	out	0x3f, r0	; 63
    1854:	cd bf       	out	0x3d, r28	; 61
    1856:	cf 91       	pop	r28
    1858:	df 91       	pop	r29
    185a:	08 95       	ret

0000185c <DIO_ReadPin>:


DIO_PinVoltage_type DIO_ReadPin(DIO_Pin_type pin)
{
    185c:	df 93       	push	r29
    185e:	cf 93       	push	r28
    1860:	00 d0       	rcall	.+0      	; 0x1862 <DIO_ReadPin+0x6>
    1862:	00 d0       	rcall	.+0      	; 0x1864 <DIO_ReadPin+0x8>
    1864:	00 d0       	rcall	.+0      	; 0x1866 <DIO_ReadPin+0xa>
    1866:	cd b7       	in	r28, 0x3d	; 61
    1868:	de b7       	in	r29, 0x3e	; 62
    186a:	8c 83       	std	Y+4, r24	; 0x04
	DIO_Port_type port=pin/8;
    186c:	8c 81       	ldd	r24, Y+4	; 0x04
    186e:	86 95       	lsr	r24
    1870:	86 95       	lsr	r24
    1872:	86 95       	lsr	r24
    1874:	8b 83       	std	Y+3, r24	; 0x03
	u8 pin_num=pin%8;
    1876:	8c 81       	ldd	r24, Y+4	; 0x04
    1878:	87 70       	andi	r24, 0x07	; 7
    187a:	8a 83       	std	Y+2, r24	; 0x02
	DIO_PinVoltage_type volt=LOW;
    187c:	19 82       	std	Y+1, r1	; 0x01
	
	switch(port)
    187e:	8b 81       	ldd	r24, Y+3	; 0x03
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	3e 83       	std	Y+6, r19	; 0x06
    1886:	2d 83       	std	Y+5, r18	; 0x05
    1888:	4d 81       	ldd	r20, Y+5	; 0x05
    188a:	5e 81       	ldd	r21, Y+6	; 0x06
    188c:	41 30       	cpi	r20, 0x01	; 1
    188e:	51 05       	cpc	r21, r1
    1890:	41 f1       	breq	.+80     	; 0x18e2 <DIO_ReadPin+0x86>
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	82 30       	cpi	r24, 0x02	; 2
    1898:	91 05       	cpc	r25, r1
    189a:	34 f4       	brge	.+12     	; 0x18a8 <DIO_ReadPin+0x4c>
    189c:	2d 81       	ldd	r18, Y+5	; 0x05
    189e:	3e 81       	ldd	r19, Y+6	; 0x06
    18a0:	21 15       	cp	r18, r1
    18a2:	31 05       	cpc	r19, r1
    18a4:	61 f0       	breq	.+24     	; 0x18be <DIO_ReadPin+0x62>
    18a6:	52 c0       	rjmp	.+164    	; 0x194c <DIO_ReadPin+0xf0>
    18a8:	4d 81       	ldd	r20, Y+5	; 0x05
    18aa:	5e 81       	ldd	r21, Y+6	; 0x06
    18ac:	42 30       	cpi	r20, 0x02	; 2
    18ae:	51 05       	cpc	r21, r1
    18b0:	51 f1       	breq	.+84     	; 0x1906 <DIO_ReadPin+0xaa>
    18b2:	8d 81       	ldd	r24, Y+5	; 0x05
    18b4:	9e 81       	ldd	r25, Y+6	; 0x06
    18b6:	83 30       	cpi	r24, 0x03	; 3
    18b8:	91 05       	cpc	r25, r1
    18ba:	b9 f1       	breq	.+110    	; 0x192a <DIO_ReadPin+0xce>
    18bc:	47 c0       	rjmp	.+142    	; 0x194c <DIO_ReadPin+0xf0>
	{
		case PA:
		
		volt=READ_BIT(PINA,pin_num);
    18be:	e9 e3       	ldi	r30, 0x39	; 57
    18c0:	f0 e0       	ldi	r31, 0x00	; 0
    18c2:	80 81       	ld	r24, Z
    18c4:	28 2f       	mov	r18, r24
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	88 2f       	mov	r24, r24
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	a9 01       	movw	r20, r18
    18d0:	02 c0       	rjmp	.+4      	; 0x18d6 <DIO_ReadPin+0x7a>
    18d2:	55 95       	asr	r21
    18d4:	47 95       	ror	r20
    18d6:	8a 95       	dec	r24
    18d8:	e2 f7       	brpl	.-8      	; 0x18d2 <DIO_ReadPin+0x76>
    18da:	ca 01       	movw	r24, r20
    18dc:	81 70       	andi	r24, 0x01	; 1
    18de:	89 83       	std	Y+1, r24	; 0x01
    18e0:	35 c0       	rjmp	.+106    	; 0x194c <DIO_ReadPin+0xf0>
		break;
		case PB:
		
		volt=READ_BIT(PINB,pin_num);
    18e2:	e6 e3       	ldi	r30, 0x36	; 54
    18e4:	f0 e0       	ldi	r31, 0x00	; 0
    18e6:	80 81       	ld	r24, Z
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	88 2f       	mov	r24, r24
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	a9 01       	movw	r20, r18
    18f4:	02 c0       	rjmp	.+4      	; 0x18fa <DIO_ReadPin+0x9e>
    18f6:	55 95       	asr	r21
    18f8:	47 95       	ror	r20
    18fa:	8a 95       	dec	r24
    18fc:	e2 f7       	brpl	.-8      	; 0x18f6 <DIO_ReadPin+0x9a>
    18fe:	ca 01       	movw	r24, r20
    1900:	81 70       	andi	r24, 0x01	; 1
    1902:	89 83       	std	Y+1, r24	; 0x01
    1904:	23 c0       	rjmp	.+70     	; 0x194c <DIO_ReadPin+0xf0>
		break;
		case PC:
		
		volt=READ_BIT(PINC,pin_num);
    1906:	e3 e3       	ldi	r30, 0x33	; 51
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	28 2f       	mov	r18, r24
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	88 2f       	mov	r24, r24
    1914:	90 e0       	ldi	r25, 0x00	; 0
    1916:	a9 01       	movw	r20, r18
    1918:	02 c0       	rjmp	.+4      	; 0x191e <DIO_ReadPin+0xc2>
    191a:	55 95       	asr	r21
    191c:	47 95       	ror	r20
    191e:	8a 95       	dec	r24
    1920:	e2 f7       	brpl	.-8      	; 0x191a <DIO_ReadPin+0xbe>
    1922:	ca 01       	movw	r24, r20
    1924:	81 70       	andi	r24, 0x01	; 1
    1926:	89 83       	std	Y+1, r24	; 0x01
    1928:	11 c0       	rjmp	.+34     	; 0x194c <DIO_ReadPin+0xf0>
		break;
		case PD:
		
		volt=READ_BIT(PIND,pin_num);
    192a:	e0 e3       	ldi	r30, 0x30	; 48
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	80 81       	ld	r24, Z
    1930:	28 2f       	mov	r18, r24
    1932:	30 e0       	ldi	r19, 0x00	; 0
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	88 2f       	mov	r24, r24
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	a9 01       	movw	r20, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <DIO_ReadPin+0xe6>
    193e:	55 95       	asr	r21
    1940:	47 95       	ror	r20
    1942:	8a 95       	dec	r24
    1944:	e2 f7       	brpl	.-8      	; 0x193e <DIO_ReadPin+0xe2>
    1946:	ca 01       	movw	r24, r20
    1948:	81 70       	andi	r24, 0x01	; 1
    194a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	
	return volt;
    194c:	89 81       	ldd	r24, Y+1	; 0x01
	
	
}
    194e:	26 96       	adiw	r28, 0x06	; 6
    1950:	0f b6       	in	r0, 0x3f	; 63
    1952:	f8 94       	cli
    1954:	de bf       	out	0x3e, r29	; 62
    1956:	0f be       	out	0x3f, r0	; 63
    1958:	cd bf       	out	0x3d, r28	; 61
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <DIO_Init>:


void DIO_Init(void)
{
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	0f 92       	push	r0
    1966:	cd b7       	in	r28, 0x3d	; 61
    1968:	de b7       	in	r29, 0x3e	; 62
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
    196a:	19 82       	std	Y+1, r1	; 0x01
    196c:	0e c0       	rjmp	.+28     	; 0x198a <DIO_Init+0x2a>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
    196e:	89 81       	ldd	r24, Y+1	; 0x01
    1970:	88 2f       	mov	r24, r24
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	fc 01       	movw	r30, r24
    1976:	e9 58       	subi	r30, 0x89	; 137
    1978:	ff 4f       	sbci	r31, 0xFF	; 255
    197a:	90 81       	ld	r25, Z
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	69 2f       	mov	r22, r25
    1980:	0e 94 b6 08 	call	0x116c	; 0x116c <DIO_InitPin>


void DIO_Init(void)
{
	DIO_Pin_type i;
	for (i=PINA0;i<TOTAL_PINS;i++)
    1984:	89 81       	ldd	r24, Y+1	; 0x01
    1986:	8f 5f       	subi	r24, 0xFF	; 255
    1988:	89 83       	std	Y+1, r24	; 0x01
    198a:	89 81       	ldd	r24, Y+1	; 0x01
    198c:	80 32       	cpi	r24, 0x20	; 32
    198e:	78 f3       	brcs	.-34     	; 0x196e <DIO_Init+0xe>
	{
		DIO_InitPin(i,PinsStatusArray[i]);
	}

}
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <DIO_WritePort>:

void DIO_WritePort(DIO_Port_type port, u8 value) {
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <DIO_WritePort+0x6>
    199e:	00 d0       	rcall	.+0      	; 0x19a0 <DIO_WritePort+0x8>
    19a0:	cd b7       	in	r28, 0x3d	; 61
    19a2:	de b7       	in	r29, 0x3e	; 62
    19a4:	89 83       	std	Y+1, r24	; 0x01
    19a6:	6a 83       	std	Y+2, r22	; 0x02


	switch (port) {
    19a8:	89 81       	ldd	r24, Y+1	; 0x01
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	3c 83       	std	Y+4, r19	; 0x04
    19b0:	2b 83       	std	Y+3, r18	; 0x03
    19b2:	8b 81       	ldd	r24, Y+3	; 0x03
    19b4:	9c 81       	ldd	r25, Y+4	; 0x04
    19b6:	81 30       	cpi	r24, 0x01	; 1
    19b8:	91 05       	cpc	r25, r1
    19ba:	d1 f0       	breq	.+52     	; 0x19f0 <DIO_WritePort+0x58>
    19bc:	2b 81       	ldd	r18, Y+3	; 0x03
    19be:	3c 81       	ldd	r19, Y+4	; 0x04
    19c0:	22 30       	cpi	r18, 0x02	; 2
    19c2:	31 05       	cpc	r19, r1
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <DIO_WritePort+0x38>
    19c6:	8b 81       	ldd	r24, Y+3	; 0x03
    19c8:	9c 81       	ldd	r25, Y+4	; 0x04
    19ca:	00 97       	sbiw	r24, 0x00	; 0
    19cc:	61 f0       	breq	.+24     	; 0x19e6 <DIO_WritePort+0x4e>
    19ce:	1e c0       	rjmp	.+60     	; 0x1a0c <DIO_WritePort+0x74>
    19d0:	2b 81       	ldd	r18, Y+3	; 0x03
    19d2:	3c 81       	ldd	r19, Y+4	; 0x04
    19d4:	22 30       	cpi	r18, 0x02	; 2
    19d6:	31 05       	cpc	r19, r1
    19d8:	81 f0       	breq	.+32     	; 0x19fa <DIO_WritePort+0x62>
    19da:	8b 81       	ldd	r24, Y+3	; 0x03
    19dc:	9c 81       	ldd	r25, Y+4	; 0x04
    19de:	83 30       	cpi	r24, 0x03	; 3
    19e0:	91 05       	cpc	r25, r1
    19e2:	81 f0       	breq	.+32     	; 0x1a04 <DIO_WritePort+0x6c>
    19e4:	13 c0       	rjmp	.+38     	; 0x1a0c <DIO_WritePort+0x74>
	case PA:
		PORTA = value;
    19e6:	eb e3       	ldi	r30, 0x3B	; 59
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	80 83       	st	Z, r24
    19ee:	0e c0       	rjmp	.+28     	; 0x1a0c <DIO_WritePort+0x74>
		break;
	case PB:
		PORTB = value;
    19f0:	e8 e3       	ldi	r30, 0x38	; 56
    19f2:	f0 e0       	ldi	r31, 0x00	; 0
    19f4:	8a 81       	ldd	r24, Y+2	; 0x02
    19f6:	80 83       	st	Z, r24
    19f8:	09 c0       	rjmp	.+18     	; 0x1a0c <DIO_WritePort+0x74>
		break;
	case PC:
		PORTC = value;
    19fa:	e5 e3       	ldi	r30, 0x35	; 53
    19fc:	f0 e0       	ldi	r31, 0x00	; 0
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	80 83       	st	Z, r24
    1a02:	04 c0       	rjmp	.+8      	; 0x1a0c <DIO_WritePort+0x74>
		break;
	case PD:
		PORTD = value;
    1a04:	e2 e3       	ldi	r30, 0x32	; 50
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	80 83       	st	Z, r24
		break;
	}
}
    1a0c:	0f 90       	pop	r0
    1a0e:	0f 90       	pop	r0
    1a10:	0f 90       	pop	r0
    1a12:	0f 90       	pop	r0
    1a14:	cf 91       	pop	r28
    1a16:	df 91       	pop	r29
    1a18:	08 95       	ret

00001a1a <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin) {
    1a1a:	df 93       	push	r29
    1a1c:	cf 93       	push	r28
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <DIO_TogglePin+0x6>
    1a20:	00 d0       	rcall	.+0      	; 0x1a22 <DIO_TogglePin+0x8>
    1a22:	0f 92       	push	r0
    1a24:	cd b7       	in	r28, 0x3d	; 61
    1a26:	de b7       	in	r29, 0x3e	; 62
    1a28:	8b 83       	std	Y+3, r24	; 0x03
	DIO_Port_type port = pin / 8;
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	86 95       	lsr	r24
    1a2e:	86 95       	lsr	r24
    1a30:	86 95       	lsr	r24
    1a32:	8a 83       	std	Y+2, r24	; 0x02
	u8 pin_num = pin % 8;
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	87 70       	andi	r24, 0x07	; 7
    1a38:	89 83       	std	Y+1, r24	; 0x01

	switch (port) {
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	28 2f       	mov	r18, r24
    1a3e:	30 e0       	ldi	r19, 0x00	; 0
    1a40:	3d 83       	std	Y+5, r19	; 0x05
    1a42:	2c 83       	std	Y+4, r18	; 0x04
    1a44:	8c 81       	ldd	r24, Y+4	; 0x04
    1a46:	9d 81       	ldd	r25, Y+5	; 0x05
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	91 05       	cpc	r25, r1
    1a4c:	49 f1       	breq	.+82     	; 0x1aa0 <DIO_TogglePin+0x86>
    1a4e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a50:	3d 81       	ldd	r19, Y+5	; 0x05
    1a52:	22 30       	cpi	r18, 0x02	; 2
    1a54:	31 05       	cpc	r19, r1
    1a56:	2c f4       	brge	.+10     	; 0x1a62 <DIO_TogglePin+0x48>
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a5c:	00 97       	sbiw	r24, 0x00	; 0
    1a5e:	61 f0       	breq	.+24     	; 0x1a78 <DIO_TogglePin+0x5e>
    1a60:	5a c0       	rjmp	.+180    	; 0x1b16 <DIO_TogglePin+0xfc>
    1a62:	2c 81       	ldd	r18, Y+4	; 0x04
    1a64:	3d 81       	ldd	r19, Y+5	; 0x05
    1a66:	22 30       	cpi	r18, 0x02	; 2
    1a68:	31 05       	cpc	r19, r1
    1a6a:	71 f1       	breq	.+92     	; 0x1ac8 <DIO_TogglePin+0xae>
    1a6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a70:	83 30       	cpi	r24, 0x03	; 3
    1a72:	91 05       	cpc	r25, r1
    1a74:	e9 f1       	breq	.+122    	; 0x1af0 <DIO_TogglePin+0xd6>
    1a76:	4f c0       	rjmp	.+158    	; 0x1b16 <DIO_TogglePin+0xfc>
	case PA:

		TOG_BIT(PORTA, pin_num);
    1a78:	ab e3       	ldi	r26, 0x3B	; 59
    1a7a:	b0 e0       	ldi	r27, 0x00	; 0
    1a7c:	eb e3       	ldi	r30, 0x3B	; 59
    1a7e:	f0 e0       	ldi	r31, 0x00	; 0
    1a80:	80 81       	ld	r24, Z
    1a82:	48 2f       	mov	r20, r24
    1a84:	89 81       	ldd	r24, Y+1	; 0x01
    1a86:	28 2f       	mov	r18, r24
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	90 e0       	ldi	r25, 0x00	; 0
    1a8e:	02 2e       	mov	r0, r18
    1a90:	02 c0       	rjmp	.+4      	; 0x1a96 <DIO_TogglePin+0x7c>
    1a92:	88 0f       	add	r24, r24
    1a94:	99 1f       	adc	r25, r25
    1a96:	0a 94       	dec	r0
    1a98:	e2 f7       	brpl	.-8      	; 0x1a92 <DIO_TogglePin+0x78>
    1a9a:	84 27       	eor	r24, r20
    1a9c:	8c 93       	st	X, r24
    1a9e:	3b c0       	rjmp	.+118    	; 0x1b16 <DIO_TogglePin+0xfc>
		break;
	case PB:

		TOG_BIT(PORTB, pin_num);
    1aa0:	a8 e3       	ldi	r26, 0x38	; 56
    1aa2:	b0 e0       	ldi	r27, 0x00	; 0
    1aa4:	e8 e3       	ldi	r30, 0x38	; 56
    1aa6:	f0 e0       	ldi	r31, 0x00	; 0
    1aa8:	80 81       	ld	r24, Z
    1aaa:	48 2f       	mov	r20, r24
    1aac:	89 81       	ldd	r24, Y+1	; 0x01
    1aae:	28 2f       	mov	r18, r24
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	02 2e       	mov	r0, r18
    1ab8:	02 c0       	rjmp	.+4      	; 0x1abe <DIO_TogglePin+0xa4>
    1aba:	88 0f       	add	r24, r24
    1abc:	99 1f       	adc	r25, r25
    1abe:	0a 94       	dec	r0
    1ac0:	e2 f7       	brpl	.-8      	; 0x1aba <DIO_TogglePin+0xa0>
    1ac2:	84 27       	eor	r24, r20
    1ac4:	8c 93       	st	X, r24
    1ac6:	27 c0       	rjmp	.+78     	; 0x1b16 <DIO_TogglePin+0xfc>
		break;
	case PC:

		TOG_BIT(PORTC, pin_num);
    1ac8:	a5 e3       	ldi	r26, 0x35	; 53
    1aca:	b0 e0       	ldi	r27, 0x00	; 0
    1acc:	e5 e3       	ldi	r30, 0x35	; 53
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	80 81       	ld	r24, Z
    1ad2:	48 2f       	mov	r20, r24
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	28 2f       	mov	r18, r24
    1ad8:	30 e0       	ldi	r19, 0x00	; 0
    1ada:	81 e0       	ldi	r24, 0x01	; 1
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	02 2e       	mov	r0, r18
    1ae0:	02 c0       	rjmp	.+4      	; 0x1ae6 <DIO_TogglePin+0xcc>
    1ae2:	88 0f       	add	r24, r24
    1ae4:	99 1f       	adc	r25, r25
    1ae6:	0a 94       	dec	r0
    1ae8:	e2 f7       	brpl	.-8      	; 0x1ae2 <DIO_TogglePin+0xc8>
    1aea:	84 27       	eor	r24, r20
    1aec:	8c 93       	st	X, r24
    1aee:	13 c0       	rjmp	.+38     	; 0x1b16 <DIO_TogglePin+0xfc>
		break;
	case PD:

		TOG_BIT(PORTD, pin_num);
    1af0:	a2 e3       	ldi	r26, 0x32	; 50
    1af2:	b0 e0       	ldi	r27, 0x00	; 0
    1af4:	e2 e3       	ldi	r30, 0x32	; 50
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	48 2f       	mov	r20, r24
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
    1afe:	28 2f       	mov	r18, r24
    1b00:	30 e0       	ldi	r19, 0x00	; 0
    1b02:	81 e0       	ldi	r24, 0x01	; 1
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	02 2e       	mov	r0, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <DIO_TogglePin+0xf4>
    1b0a:	88 0f       	add	r24, r24
    1b0c:	99 1f       	adc	r25, r25
    1b0e:	0a 94       	dec	r0
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <DIO_TogglePin+0xf0>
    1b12:	84 27       	eor	r24, r20
    1b14:	8c 93       	st	X, r24
		break;
	}
}
    1b16:	0f 90       	pop	r0
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <convertdectobcd>:
#include "../../Utils.h"
#include "RTC.h"
#include "../../MCAL/I2C/TWI_Interface.h"
#include "../../MCAL/DIO/DIO_interface.h"

static u8 convertdectobcd(u8 var) {
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <convertdectobcd+0x6>
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	8a 83       	std	Y+2, r24	; 0x02
	u8 c;
	c = var % 10;
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	9a e0       	ldi	r25, 0x0A	; 10
    1b36:	69 2f       	mov	r22, r25
    1b38:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__udivmodqi4>
    1b3c:	89 2f       	mov	r24, r25
    1b3e:	89 83       	std	Y+1, r24	; 0x01
	var /= 10;
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	9a e0       	ldi	r25, 0x0A	; 10
    1b44:	69 2f       	mov	r22, r25
    1b46:	0e 94 53 18 	call	0x30a6	; 0x30a6 <__udivmodqi4>
    1b4a:	8a 83       	std	Y+2, r24	; 0x02

	c = (var << 4) | c;
    1b4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	82 95       	swap	r24
    1b54:	92 95       	swap	r25
    1b56:	90 7f       	andi	r25, 0xF0	; 240
    1b58:	98 27       	eor	r25, r24
    1b5a:	80 7f       	andi	r24, 0xF0	; 240
    1b5c:	98 27       	eor	r25, r24
    1b5e:	98 2f       	mov	r25, r24
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	89 2b       	or	r24, r25
    1b64:	89 83       	std	Y+1, r24	; 0x01

	return c;
    1b66:	89 81       	ldd	r24, Y+1	; 0x01

}
    1b68:	0f 90       	pop	r0
    1b6a:	0f 90       	pop	r0
    1b6c:	cf 91       	pop	r28
    1b6e:	df 91       	pop	r29
    1b70:	08 95       	ret

00001b72 <convertbcdtodec>:

static u8 convertbcdtodec(u8 var) {
    1b72:	df 93       	push	r29
    1b74:	cf 93       	push	r28
    1b76:	00 d0       	rcall	.+0      	; 0x1b78 <convertbcdtodec+0x6>
    1b78:	cd b7       	in	r28, 0x3d	; 61
    1b7a:	de b7       	in	r29, 0x3e	; 62
    1b7c:	8a 83       	std	Y+2, r24	; 0x02

	u8 temp = 0;
    1b7e:	19 82       	std	Y+1, r1	; 0x01

	temp = var & 0b11110000;
    1b80:	8a 81       	ldd	r24, Y+2	; 0x02
    1b82:	80 7f       	andi	r24, 0xF0	; 240
    1b84:	89 83       	std	Y+1, r24	; 0x01

	var &= 0b00001111;
    1b86:	8a 81       	ldd	r24, Y+2	; 0x02
    1b88:	8f 70       	andi	r24, 0x0F	; 15
    1b8a:	8a 83       	std	Y+2, r24	; 0x02

	temp = var + ((temp >> 4) * 10);
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	82 95       	swap	r24
    1b90:	8f 70       	andi	r24, 0x0F	; 15
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	9c 01       	movw	r18, r24
    1b98:	22 0f       	add	r18, r18
    1b9a:	33 1f       	adc	r19, r19
    1b9c:	c9 01       	movw	r24, r18
    1b9e:	88 0f       	add	r24, r24
    1ba0:	99 1f       	adc	r25, r25
    1ba2:	88 0f       	add	r24, r24
    1ba4:	99 1f       	adc	r25, r25
    1ba6:	82 0f       	add	r24, r18
    1ba8:	93 1f       	adc	r25, r19
    1baa:	98 2f       	mov	r25, r24
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	89 0f       	add	r24, r25
    1bb0:	89 83       	std	Y+1, r24	; 0x01

	return temp;
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb4:	0f 90       	pop	r0
    1bb6:	0f 90       	pop	r0
    1bb8:	cf 91       	pop	r28
    1bba:	df 91       	pop	r29
    1bbc:	08 95       	ret

00001bbe <RTC_Init>:
void RTC_Init() {
    1bbe:	df 93       	push	r29
    1bc0:	cf 93       	push	r28
    1bc2:	cd b7       	in	r28, 0x3d	; 61
    1bc4:	de b7       	in	r29, 0x3e	; 62

	/* direction pins as output */

	M_TWI_voidInit();
    1bc6:	0e 94 ae 07 	call	0xf5c	; 0xf5c <M_TWI_voidInit>
//	/* select second register */
////	sendByte(SECONDS_REGISTER_ADDRESS);
//	/* select ch */
//	sendByte(SECONDS_REGISTER_ADDRESS);
//	Send_Stop();
}
    1bca:	cf 91       	pop	r28
    1bcc:	df 91       	pop	r29
    1bce:	08 95       	ret

00001bd0 <RTC_SetTime>:

void RTC_SetTime(Time_t* time) {
    1bd0:	df 93       	push	r29
    1bd2:	cf 93       	push	r28
    1bd4:	00 d0       	rcall	.+0      	; 0x1bd6 <RTC_SetTime+0x6>
    1bd6:	00 d0       	rcall	.+0      	; 0x1bd8 <RTC_SetTime+0x8>
    1bd8:	0f 92       	push	r0
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	9d 83       	std	Y+5, r25	; 0x05
    1be0:	8c 83       	std	Y+4, r24	; 0x04

	u8 second = convertdectobcd(time->sec);
    1be2:	ec 81       	ldd	r30, Y+4	; 0x04
    1be4:	fd 81       	ldd	r31, Y+5	; 0x05
    1be6:	82 81       	ldd	r24, Z+2	; 0x02
    1be8:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <convertdectobcd>
    1bec:	8b 83       	std	Y+3, r24	; 0x03

	u8 minutes = convertdectobcd(time->min);
    1bee:	ec 81       	ldd	r30, Y+4	; 0x04
    1bf0:	fd 81       	ldd	r31, Y+5	; 0x05
    1bf2:	81 81       	ldd	r24, Z+1	; 0x01
    1bf4:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <convertdectobcd>
    1bf8:	8a 83       	std	Y+2, r24	; 0x02

	u8 hour = 0;
    1bfa:	19 82       	std	Y+1, r1	; 0x01



	Send_Start();
    1bfc:	0e 94 bc 07 	call	0xf78	; 0xf78 <Send_Start>
	sendByte(SETSLAVE_ADDRESS);
    1c00:	80 ed       	ldi	r24, 0xD0	; 208
    1c02:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	sendByte(SECONDS_REGISTER_ADDRESS);
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	sendByte(second);
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	sendByte(minutes);
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>

	/* checking the hours format */
	if (time->ampm == FORMATE_24) {
    1c18:	ec 81       	ldd	r30, Y+4	; 0x04
    1c1a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c1c:	83 81       	ldd	r24, Z+3	; 0x03
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	51 f4       	brne	.+20     	; 0x1c36 <RTC_SetTime+0x66>
		CLR_BIT(hour, 6);
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	8f 7b       	andi	r24, 0xBF	; 191
    1c26:	89 83       	std	Y+1, r24	; 0x01

		hour = convertdectobcd(time->hour);
    1c28:	ec 81       	ldd	r30, Y+4	; 0x04
    1c2a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c2c:	80 81       	ld	r24, Z
    1c2e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <convertdectobcd>
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	1a c0       	rjmp	.+52     	; 0x1c6a <RTC_SetTime+0x9a>

	} else {

		SET_BIT(hour, 6);
    1c36:	89 81       	ldd	r24, Y+1	; 0x01
    1c38:	80 64       	ori	r24, 0x40	; 64
    1c3a:	89 83       	std	Y+1, r24	; 0x01
		if (time->ampm == AM_12_FORMATE) {
    1c3c:	ec 81       	ldd	r30, Y+4	; 0x04
    1c3e:	fd 81       	ldd	r31, Y+5	; 0x05
    1c40:	83 81       	ldd	r24, Z+3	; 0x03
    1c42:	88 23       	and	r24, r24
    1c44:	21 f4       	brne	.+8      	; 0x1c4e <RTC_SetTime+0x7e>
			CLR_BIT(hour, 5);
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	8f 7d       	andi	r24, 0xDF	; 223
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	08 c0       	rjmp	.+16     	; 0x1c5e <RTC_SetTime+0x8e>
		} else if (time->ampm == PM_12_FORMATE) {
    1c4e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c50:	fd 81       	ldd	r31, Y+5	; 0x05
    1c52:	83 81       	ldd	r24, Z+3	; 0x03
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	19 f4       	brne	.+6      	; 0x1c5e <RTC_SetTime+0x8e>
			SET_BIT(hour, 5);
    1c58:	89 81       	ldd	r24, Y+1	; 0x01
    1c5a:	80 62       	ori	r24, 0x20	; 32
    1c5c:	89 83       	std	Y+1, r24	; 0x01
		}
		hour = convertdectobcd(time->hour);
    1c5e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c60:	fd 81       	ldd	r31, Y+5	; 0x05
    1c62:	80 81       	ld	r24, Z
    1c64:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <convertdectobcd>
    1c68:	89 83       	std	Y+1, r24	; 0x01
	}


	sendByte(hour);
    1c6a:	89 81       	ldd	r24, Y+1	; 0x01
    1c6c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	Send_Stop();
    1c70:	0e 94 35 08 	call	0x106a	; 0x106a <Send_Stop>

}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <RTC_GetTime>:

void RTC_GetTime(Time_t* time) {
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <RTC_GetTime+0x6>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <RTC_GetTime+0x8>
    1c8c:	0f 92       	push	r0
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	9d 83       	std	Y+5, r25	; 0x05
    1c94:	8c 83       	std	Y+4, r24	; 0x04

	u8 second = 0;
    1c96:	19 82       	std	Y+1, r1	; 0x01
	u8 minute = 0;
    1c98:	1a 82       	std	Y+2, r1	; 0x02
	u8 hour = 0;
    1c9a:	1b 82       	std	Y+3, r1	; 0x03

	Send_Start();
    1c9c:	0e 94 bc 07 	call	0xf78	; 0xf78 <Send_Start>
	sendByte(SETSLAVE_ADDRESS);
    1ca0:	80 ed       	ldi	r24, 0xD0	; 208
    1ca2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	sendByte(SECONDS_REGISTER_ADDRESS);
    1ca6:	80 e0       	ldi	r24, 0x00	; 0
    1ca8:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>

	M_U8_I2C_Repeated_Start();
    1cac:	0e 94 9a 08 	call	0x1134	; 0x1134 <M_U8_I2C_Repeated_Start>
	sendByte(GETSLAVE_ADDRESS);
    1cb0:	81 ed       	ldi	r24, 0xD1	; 209
    1cb2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>

	receiveByte_ACK(&second);
    1cb6:	ce 01       	movw	r24, r28
    1cb8:	01 96       	adiw	r24, 0x01	; 1
    1cba:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <receiveByte_ACK>
	time->sec = convertbcdtodec(second);
    1cbe:	89 81       	ldd	r24, Y+1	; 0x01
    1cc0:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <convertbcdtodec>
    1cc4:	ec 81       	ldd	r30, Y+4	; 0x04
    1cc6:	fd 81       	ldd	r31, Y+5	; 0x05
    1cc8:	82 83       	std	Z+2, r24	; 0x02
	receiveByte_ACK(&minute);
    1cca:	ce 01       	movw	r24, r28
    1ccc:	02 96       	adiw	r24, 0x02	; 2
    1cce:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <receiveByte_ACK>
	time->min = convertbcdtodec(minute);
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <convertbcdtodec>
    1cd8:	ec 81       	ldd	r30, Y+4	; 0x04
    1cda:	fd 81       	ldd	r31, Y+5	; 0x05
    1cdc:	81 83       	std	Z+1, r24	; 0x01
	receiveByte_NoACK(&hour);
    1cde:	ce 01       	movw	r24, r28
    1ce0:	03 96       	adiw	r24, 0x03	; 3
    1ce2:	0e 94 13 08 	call	0x1026	; 0x1026 <receiveByte_NoACK>

	/* 12 AM / PM format */
	if (READ_BIT(hour,6) == 1) {
    1ce6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ce8:	82 95       	swap	r24
    1cea:	86 95       	lsr	r24
    1cec:	86 95       	lsr	r24
    1cee:	83 70       	andi	r24, 0x03	; 3
    1cf0:	88 2f       	mov	r24, r24
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	81 70       	andi	r24, 0x01	; 1
    1cf6:	90 70       	andi	r25, 0x00	; 0
    1cf8:	88 23       	and	r24, r24
    1cfa:	f9 f0       	breq	.+62     	; 0x1d3a <RTC_GetTime+0xb6>
		/* 12 PM format */
		if (READ_BIT(hour , 5) == 1) {
    1cfc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfe:	82 95       	swap	r24
    1d00:	86 95       	lsr	r24
    1d02:	87 70       	andi	r24, 0x07	; 7
    1d04:	88 2f       	mov	r24, r24
    1d06:	90 e0       	ldi	r25, 0x00	; 0
    1d08:	81 70       	andi	r24, 0x01	; 1
    1d0a:	90 70       	andi	r25, 0x00	; 0
    1d0c:	88 23       	and	r24, r24
    1d0e:	59 f0       	breq	.+22     	; 0x1d26 <RTC_GetTime+0xa2>
			time->ampm = PM_12_FORMATE;
    1d10:	ec 81       	ldd	r30, Y+4	; 0x04
    1d12:	fd 81       	ldd	r31, Y+5	; 0x05
    1d14:	81 e0       	ldi	r24, 0x01	; 1
    1d16:	83 83       	std	Z+3, r24	; 0x03
			time->hour = convertbcdtodec(hour);
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <convertbcdtodec>
    1d1e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d20:	fd 81       	ldd	r31, Y+5	; 0x05
    1d22:	80 83       	st	Z, r24
    1d24:	14 c0       	rjmp	.+40     	; 0x1d4e <RTC_GetTime+0xca>

		}
		/* 12 AM format */
		else {
			time->ampm = AM_12_FORMATE;
    1d26:	ec 81       	ldd	r30, Y+4	; 0x04
    1d28:	fd 81       	ldd	r31, Y+5	; 0x05
    1d2a:	13 82       	std	Z+3, r1	; 0x03
			time->hour = convertbcdtodec(hour);
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <convertbcdtodec>
    1d32:	ec 81       	ldd	r30, Y+4	; 0x04
    1d34:	fd 81       	ldd	r31, Y+5	; 0x05
    1d36:	80 83       	st	Z, r24
    1d38:	0a c0       	rjmp	.+20     	; 0x1d4e <RTC_GetTime+0xca>
	}
	/* 24 format */
	else {


		time->hour = convertbcdtodec(hour);
    1d3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <convertbcdtodec>
    1d40:	ec 81       	ldd	r30, Y+4	; 0x04
    1d42:	fd 81       	ldd	r31, Y+5	; 0x05
    1d44:	80 83       	st	Z, r24
		time->ampm = FORMATE_24;
    1d46:	ec 81       	ldd	r30, Y+4	; 0x04
    1d48:	fd 81       	ldd	r31, Y+5	; 0x05
    1d4a:	82 e0       	ldi	r24, 0x02	; 2
    1d4c:	83 83       	std	Z+3, r24	; 0x03

	}

	Send_Stop();
    1d4e:	0e 94 35 08 	call	0x106a	; 0x106a <Send_Stop>

}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	cf 91       	pop	r28
    1d5e:	df 91       	pop	r29
    1d60:	08 95       	ret

00001d62 <RTC_SetDate>:

void RTC_SetDate(Date_t* date) {
    1d62:	df 93       	push	r29
    1d64:	cf 93       	push	r28
    1d66:	00 d0       	rcall	.+0      	; 0x1d68 <RTC_SetDate+0x6>
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <RTC_SetDate+0x8>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <RTC_SetDate+0xa>
    1d6c:	cd b7       	in	r28, 0x3d	; 61
    1d6e:	de b7       	in	r29, 0x3e	; 62
    1d70:	9e 83       	std	Y+6, r25	; 0x06
    1d72:	8d 83       	std	Y+5, r24	; 0x05

	Day_t day = date->day;
    1d74:	ed 81       	ldd	r30, Y+5	; 0x05
    1d76:	fe 81       	ldd	r31, Y+6	; 0x06
    1d78:	83 81       	ldd	r24, Z+3	; 0x03
    1d7a:	8c 83       	std	Y+4, r24	; 0x04
	u8 month = 0;
    1d7c:	1b 82       	std	Y+3, r1	; 0x03
	u8 year = 0;
    1d7e:	1a 82       	std	Y+2, r1	; 0x02
	u8 date2 = 0;
    1d80:	19 82       	std	Y+1, r1	; 0x01

	date2 = convertdectobcd(date->day_val);
    1d82:	ed 81       	ldd	r30, Y+5	; 0x05
    1d84:	fe 81       	ldd	r31, Y+6	; 0x06
    1d86:	84 81       	ldd	r24, Z+4	; 0x04
    1d88:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <convertdectobcd>
    1d8c:	89 83       	std	Y+1, r24	; 0x01

	month = convertdectobcd(date->month);
    1d8e:	ed 81       	ldd	r30, Y+5	; 0x05
    1d90:	fe 81       	ldd	r31, Y+6	; 0x06
    1d92:	82 81       	ldd	r24, Z+2	; 0x02
    1d94:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <convertdectobcd>
    1d98:	8b 83       	std	Y+3, r24	; 0x03

	year = convertdectobcd(date->year);
    1d9a:	ed 81       	ldd	r30, Y+5	; 0x05
    1d9c:	fe 81       	ldd	r31, Y+6	; 0x06
    1d9e:	80 81       	ld	r24, Z
    1da0:	91 81       	ldd	r25, Z+1	; 0x01
    1da2:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <convertdectobcd>
    1da6:	8a 83       	std	Y+2, r24	; 0x02

	Send_Start();
    1da8:	0e 94 bc 07 	call	0xf78	; 0xf78 <Send_Start>
	sendByte(SETSLAVE_ADDRESS);
    1dac:	80 ed       	ldi	r24, 0xD0	; 208
    1dae:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	sendByte(DAY_REGISTER_ADDRESS);
    1db2:	83 e0       	ldi	r24, 0x03	; 3
    1db4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	sendByte(day);
    1db8:	8c 81       	ldd	r24, Y+4	; 0x04
    1dba:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	sendByte(date2);
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	sendByte(month);
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	sendByte(year);
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	Send_Stop();
    1dd0:	0e 94 35 08 	call	0x106a	; 0x106a <Send_Stop>

}
    1dd4:	26 96       	adiw	r28, 0x06	; 6
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret

00001de6 <RTC_GetDate>:

void RTC_GetDate(Date_t* date) {
    1de6:	df 93       	push	r29
    1de8:	cf 93       	push	r28
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <RTC_GetDate+0x6>
    1dec:	00 d0       	rcall	.+0      	; 0x1dee <RTC_GetDate+0x8>
    1dee:	00 d0       	rcall	.+0      	; 0x1df0 <RTC_GetDate+0xa>
    1df0:	cd b7       	in	r28, 0x3d	; 61
    1df2:	de b7       	in	r29, 0x3e	; 62
    1df4:	9e 83       	std	Y+6, r25	; 0x06
    1df6:	8d 83       	std	Y+5, r24	; 0x05

	Day_t day = 0;
    1df8:	19 82       	std	Y+1, r1	; 0x01
	u8 month = 0;
    1dfa:	1a 82       	std	Y+2, r1	; 0x02
	u8 year = 0;
    1dfc:	1b 82       	std	Y+3, r1	; 0x03
	u8 date2 = 0;
    1dfe:	1c 82       	std	Y+4, r1	; 0x04
	Send_Start();
    1e00:	0e 94 bc 07 	call	0xf78	; 0xf78 <Send_Start>
	sendByte(SETSLAVE_ADDRESS);
    1e04:	80 ed       	ldi	r24, 0xD0	; 208
    1e06:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>
	sendByte(DAY_REGISTER_ADDRESS);
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>

	M_U8_I2C_Repeated_Start();
    1e10:	0e 94 9a 08 	call	0x1134	; 0x1134 <M_U8_I2C_Repeated_Start>
	sendByte(GETSLAVE_ADDRESS);
    1e14:	81 ed       	ldi	r24, 0xD1	; 209
    1e16:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <sendByte>

	receiveByte_ACK(&day);
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	01 96       	adiw	r24, 0x01	; 1
    1e1e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <receiveByte_ACK>
	date->day = day;
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	ed 81       	ldd	r30, Y+5	; 0x05
    1e26:	fe 81       	ldd	r31, Y+6	; 0x06
    1e28:	83 83       	std	Z+3, r24	; 0x03

	receiveByte_ACK(&date2);
    1e2a:	ce 01       	movw	r24, r28
    1e2c:	04 96       	adiw	r24, 0x04	; 4
    1e2e:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <receiveByte_ACK>
	date->day_val = convertbcdtodec(date2);
    1e32:	8c 81       	ldd	r24, Y+4	; 0x04
    1e34:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <convertbcdtodec>
    1e38:	ed 81       	ldd	r30, Y+5	; 0x05
    1e3a:	fe 81       	ldd	r31, Y+6	; 0x06
    1e3c:	84 83       	std	Z+4, r24	; 0x04

	receiveByte_ACK(&month);
    1e3e:	ce 01       	movw	r24, r28
    1e40:	02 96       	adiw	r24, 0x02	; 2
    1e42:	0e 94 f1 07 	call	0xfe2	; 0xfe2 <receiveByte_ACK>
	date->month = convertbcdtodec(month);
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <convertbcdtodec>
    1e4c:	ed 81       	ldd	r30, Y+5	; 0x05
    1e4e:	fe 81       	ldd	r31, Y+6	; 0x06
    1e50:	82 83       	std	Z+2, r24	; 0x02

	receiveByte_NoACK(&year);
    1e52:	ce 01       	movw	r24, r28
    1e54:	03 96       	adiw	r24, 0x03	; 3
    1e56:	0e 94 13 08 	call	0x1026	; 0x1026 <receiveByte_NoACK>
	date->year = convertbcdtodec(year);
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	0e 94 b9 0d 	call	0x1b72	; 0x1b72 <convertbcdtodec>
    1e60:	88 2f       	mov	r24, r24
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	ed 81       	ldd	r30, Y+5	; 0x05
    1e66:	fe 81       	ldd	r31, Y+6	; 0x06
    1e68:	91 83       	std	Z+1, r25	; 0x01
    1e6a:	80 83       	st	Z, r24
	Send_Stop();
    1e6c:	0e 94 35 08 	call	0x106a	; 0x106a <Send_Stop>

}
    1e70:	26 96       	adiw	r28, 0x06	; 6
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	cf 91       	pop	r28
    1e7e:	df 91       	pop	r29
    1e80:	08 95       	ret

00001e82 <LCD_WRITEINSTRACTION>:
/* write on DDRAM */

#if 	LCD_MODE == LCD_4_BIT_MODE

/* LCD 4 bit Mode */
static void LCD_WRITEINSTRACTION(u8 instraction) {
    1e82:	df 93       	push	r29
    1e84:	cf 93       	push	r28
    1e86:	cd b7       	in	r28, 0x3d	; 61
    1e88:	de b7       	in	r29, 0x3e	; 62
    1e8a:	e9 97       	sbiw	r28, 0x39	; 57
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
    1e96:	89 af       	std	Y+57, r24	; 0x39

	DIO_WritePin(RS, LOW);
    1e98:	83 e0       	ldi	r24, 0x03	; 3
    1e9a:	60 e0       	ldi	r22, 0x00	; 0
    1e9c:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>


	/* so here we will get bit for every data that will be entered to lcd */
	/* i do that becouse i want to be generic and be able to put the pins any where i want */

	DIO_WritePin(D7, READ_BIT(instraction, 7));
    1ea0:	89 ad       	ldd	r24, Y+57	; 0x39
    1ea2:	98 2f       	mov	r25, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	99 27       	eor	r25, r25
    1ea8:	99 1f       	adc	r25, r25
    1eaa:	8c e0       	ldi	r24, 0x0C	; 12
    1eac:	69 2f       	mov	r22, r25
    1eae:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D6, READ_BIT(instraction, 6));
    1eb2:	89 ad       	ldd	r24, Y+57	; 0x39
    1eb4:	82 95       	swap	r24
    1eb6:	86 95       	lsr	r24
    1eb8:	86 95       	lsr	r24
    1eba:	83 70       	andi	r24, 0x03	; 3
    1ebc:	98 2f       	mov	r25, r24
    1ebe:	91 70       	andi	r25, 0x01	; 1
    1ec0:	8a e0       	ldi	r24, 0x0A	; 10
    1ec2:	69 2f       	mov	r22, r25
    1ec4:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D5, READ_BIT(instraction, 5));
    1ec8:	89 ad       	ldd	r24, Y+57	; 0x39
    1eca:	82 95       	swap	r24
    1ecc:	86 95       	lsr	r24
    1ece:	87 70       	andi	r24, 0x07	; 7
    1ed0:	98 2f       	mov	r25, r24
    1ed2:	91 70       	andi	r25, 0x01	; 1
    1ed4:	89 e0       	ldi	r24, 0x09	; 9
    1ed6:	69 2f       	mov	r22, r25
    1ed8:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D4, READ_BIT(instraction, 4));
    1edc:	89 ad       	ldd	r24, Y+57	; 0x39
    1ede:	82 95       	swap	r24
    1ee0:	8f 70       	andi	r24, 0x0F	; 15
    1ee2:	98 2f       	mov	r25, r24
    1ee4:	91 70       	andi	r25, 0x01	; 1
    1ee6:	88 e0       	ldi	r24, 0x08	; 8
    1ee8:	69 2f       	mov	r22, r25
    1eea:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>

	DIO_WritePin(EN, HIGH);
    1eee:	82 e0       	ldi	r24, 0x02	; 2
    1ef0:	61 e0       	ldi	r22, 0x01	; 1
    1ef2:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	a0 e8       	ldi	r26, 0x80	; 128
    1efc:	bf e3       	ldi	r27, 0x3F	; 63
    1efe:	8d ab       	std	Y+53, r24	; 0x35
    1f00:	9e ab       	std	Y+54, r25	; 0x36
    1f02:	af ab       	std	Y+55, r26	; 0x37
    1f04:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f06:	6d a9       	ldd	r22, Y+53	; 0x35
    1f08:	7e a9       	ldd	r23, Y+54	; 0x36
    1f0a:	8f a9       	ldd	r24, Y+55	; 0x37
    1f0c:	98 ad       	ldd	r25, Y+56	; 0x38
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a e7       	ldi	r20, 0x7A	; 122
    1f14:	55 e4       	ldi	r21, 0x45	; 69
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	89 ab       	std	Y+49, r24	; 0x31
    1f20:	9a ab       	std	Y+50, r25	; 0x32
    1f22:	ab ab       	std	Y+51, r26	; 0x33
    1f24:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f26:	69 a9       	ldd	r22, Y+49	; 0x31
    1f28:	7a a9       	ldd	r23, Y+50	; 0x32
    1f2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e8       	ldi	r20, 0x80	; 128
    1f34:	5f e3       	ldi	r21, 0x3F	; 63
    1f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <LCD_WRITEINSTRACTION+0xc6>
		__ticks = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	98 ab       	std	Y+48, r25	; 0x30
    1f44:	8f a7       	std	Y+47, r24	; 0x2f
    1f46:	3f c0       	rjmp	.+126    	; 0x1fc6 <LCD_WRITEINSTRACTION+0x144>
	else if (__tmp > 65535)
    1f48:	69 a9       	ldd	r22, Y+49	; 0x31
    1f4a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f4c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f4e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	3f ef       	ldi	r19, 0xFF	; 255
    1f54:	4f e7       	ldi	r20, 0x7F	; 127
    1f56:	57 e4       	ldi	r21, 0x47	; 71
    1f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	4c f5       	brge	.+82     	; 0x1fb2 <LCD_WRITEINSTRACTION+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f60:	6d a9       	ldd	r22, Y+53	; 0x35
    1f62:	7e a9       	ldd	r23, Y+54	; 0x36
    1f64:	8f a9       	ldd	r24, Y+55	; 0x37
    1f66:	98 ad       	ldd	r25, Y+56	; 0x38
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e2       	ldi	r20, 0x20	; 32
    1f6e:	51 e4       	ldi	r21, 0x41	; 65
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	98 ab       	std	Y+48, r25	; 0x30
    1f86:	8f a7       	std	Y+47, r24	; 0x2f
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <LCD_WRITEINSTRACTION+0x126>
    1f8a:	80 e9       	ldi	r24, 0x90	; 144
    1f8c:	91 e0       	ldi	r25, 0x01	; 1
    1f8e:	9e a7       	std	Y+46, r25	; 0x2e
    1f90:	8d a7       	std	Y+45, r24	; 0x2d
    1f92:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f94:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <LCD_WRITEINSTRACTION+0x114>
    1f9a:	9e a7       	std	Y+46, r25	; 0x2e
    1f9c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fa0:	98 a9       	ldd	r25, Y+48	; 0x30
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	98 ab       	std	Y+48, r25	; 0x30
    1fa6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1faa:	98 a9       	ldd	r25, Y+48	; 0x30
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	69 f7       	brne	.-38     	; 0x1f8a <LCD_WRITEINSTRACTION+0x108>
    1fb0:	14 c0       	rjmp	.+40     	; 0x1fda <LCD_WRITEINSTRACTION+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb2:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb4:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb6:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb8:	9c a9       	ldd	r25, Y+52	; 0x34
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	98 ab       	std	Y+48, r25	; 0x30
    1fc4:	8f a7       	std	Y+47, r24	; 0x2f
    1fc6:	8f a5       	ldd	r24, Y+47	; 0x2f
    1fc8:	98 a9       	ldd	r25, Y+48	; 0x30
    1fca:	9c a7       	std	Y+44, r25	; 0x2c
    1fcc:	8b a7       	std	Y+43, r24	; 0x2b
    1fce:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fd0:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <LCD_WRITEINSTRACTION+0x150>
    1fd6:	9c a7       	std	Y+44, r25	; 0x2c
    1fd8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(EN, LOW);
    1fda:	82 e0       	ldi	r24, 0x02	; 2
    1fdc:	60 e0       	ldi	r22, 0x00	; 0
    1fde:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
    1fe2:	80 e0       	ldi	r24, 0x00	; 0
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	a0 e8       	ldi	r26, 0x80	; 128
    1fe8:	bf e3       	ldi	r27, 0x3F	; 63
    1fea:	8f a3       	std	Y+39, r24	; 0x27
    1fec:	98 a7       	std	Y+40, r25	; 0x28
    1fee:	a9 a7       	std	Y+41, r26	; 0x29
    1ff0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff2:	6f a1       	ldd	r22, Y+39	; 0x27
    1ff4:	78 a5       	ldd	r23, Y+40	; 0x28
    1ff6:	89 a5       	ldd	r24, Y+41	; 0x29
    1ff8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	4a e7       	ldi	r20, 0x7A	; 122
    2000:	55 e4       	ldi	r21, 0x45	; 69
    2002:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2006:	dc 01       	movw	r26, r24
    2008:	cb 01       	movw	r24, r22
    200a:	8b a3       	std	Y+35, r24	; 0x23
    200c:	9c a3       	std	Y+36, r25	; 0x24
    200e:	ad a3       	std	Y+37, r26	; 0x25
    2010:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2012:	6b a1       	ldd	r22, Y+35	; 0x23
    2014:	7c a1       	ldd	r23, Y+36	; 0x24
    2016:	8d a1       	ldd	r24, Y+37	; 0x25
    2018:	9e a1       	ldd	r25, Y+38	; 0x26
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	40 e8       	ldi	r20, 0x80	; 128
    2020:	5f e3       	ldi	r21, 0x3F	; 63
    2022:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2026:	88 23       	and	r24, r24
    2028:	2c f4       	brge	.+10     	; 0x2034 <LCD_WRITEINSTRACTION+0x1b2>
		__ticks = 1;
    202a:	81 e0       	ldi	r24, 0x01	; 1
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9a a3       	std	Y+34, r25	; 0x22
    2030:	89 a3       	std	Y+33, r24	; 0x21
    2032:	3f c0       	rjmp	.+126    	; 0x20b2 <LCD_WRITEINSTRACTION+0x230>
	else if (__tmp > 65535)
    2034:	6b a1       	ldd	r22, Y+35	; 0x23
    2036:	7c a1       	ldd	r23, Y+36	; 0x24
    2038:	8d a1       	ldd	r24, Y+37	; 0x25
    203a:	9e a1       	ldd	r25, Y+38	; 0x26
    203c:	20 e0       	ldi	r18, 0x00	; 0
    203e:	3f ef       	ldi	r19, 0xFF	; 255
    2040:	4f e7       	ldi	r20, 0x7F	; 127
    2042:	57 e4       	ldi	r21, 0x47	; 71
    2044:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2048:	18 16       	cp	r1, r24
    204a:	4c f5       	brge	.+82     	; 0x209e <LCD_WRITEINSTRACTION+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    204c:	6f a1       	ldd	r22, Y+39	; 0x27
    204e:	78 a5       	ldd	r23, Y+40	; 0x28
    2050:	89 a5       	ldd	r24, Y+41	; 0x29
    2052:	9a a5       	ldd	r25, Y+42	; 0x2a
    2054:	20 e0       	ldi	r18, 0x00	; 0
    2056:	30 e0       	ldi	r19, 0x00	; 0
    2058:	40 e2       	ldi	r20, 0x20	; 32
    205a:	51 e4       	ldi	r21, 0x41	; 65
    205c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2060:	dc 01       	movw	r26, r24
    2062:	cb 01       	movw	r24, r22
    2064:	bc 01       	movw	r22, r24
    2066:	cd 01       	movw	r24, r26
    2068:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    206c:	dc 01       	movw	r26, r24
    206e:	cb 01       	movw	r24, r22
    2070:	9a a3       	std	Y+34, r25	; 0x22
    2072:	89 a3       	std	Y+33, r24	; 0x21
    2074:	0f c0       	rjmp	.+30     	; 0x2094 <LCD_WRITEINSTRACTION+0x212>
    2076:	80 e9       	ldi	r24, 0x90	; 144
    2078:	91 e0       	ldi	r25, 0x01	; 1
    207a:	98 a3       	std	Y+32, r25	; 0x20
    207c:	8f 8f       	std	Y+31, r24	; 0x1f
    207e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2080:	98 a1       	ldd	r25, Y+32	; 0x20
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	f1 f7       	brne	.-4      	; 0x2082 <LCD_WRITEINSTRACTION+0x200>
    2086:	98 a3       	std	Y+32, r25	; 0x20
    2088:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    208a:	89 a1       	ldd	r24, Y+33	; 0x21
    208c:	9a a1       	ldd	r25, Y+34	; 0x22
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	9a a3       	std	Y+34, r25	; 0x22
    2092:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2094:	89 a1       	ldd	r24, Y+33	; 0x21
    2096:	9a a1       	ldd	r25, Y+34	; 0x22
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	69 f7       	brne	.-38     	; 0x2076 <LCD_WRITEINSTRACTION+0x1f4>
    209c:	14 c0       	rjmp	.+40     	; 0x20c6 <LCD_WRITEINSTRACTION+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    209e:	6b a1       	ldd	r22, Y+35	; 0x23
    20a0:	7c a1       	ldd	r23, Y+36	; 0x24
    20a2:	8d a1       	ldd	r24, Y+37	; 0x25
    20a4:	9e a1       	ldd	r25, Y+38	; 0x26
    20a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	9a a3       	std	Y+34, r25	; 0x22
    20b0:	89 a3       	std	Y+33, r24	; 0x21
    20b2:	89 a1       	ldd	r24, Y+33	; 0x21
    20b4:	9a a1       	ldd	r25, Y+34	; 0x22
    20b6:	9e 8f       	std	Y+30, r25	; 0x1e
    20b8:	8d 8f       	std	Y+29, r24	; 0x1d
    20ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    20bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    20be:	01 97       	sbiw	r24, 0x01	; 1
    20c0:	f1 f7       	brne	.-4      	; 0x20be <LCD_WRITEINSTRACTION+0x23c>
    20c2:	9e 8f       	std	Y+30, r25	; 0x1e
    20c4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_WritePin(D7, READ_BIT(instraction, 3));
    20c6:	89 ad       	ldd	r24, Y+57	; 0x39
    20c8:	86 95       	lsr	r24
    20ca:	86 95       	lsr	r24
    20cc:	86 95       	lsr	r24
    20ce:	98 2f       	mov	r25, r24
    20d0:	91 70       	andi	r25, 0x01	; 1
    20d2:	8c e0       	ldi	r24, 0x0C	; 12
    20d4:	69 2f       	mov	r22, r25
    20d6:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D6, READ_BIT(instraction, 2));
    20da:	89 ad       	ldd	r24, Y+57	; 0x39
    20dc:	86 95       	lsr	r24
    20de:	86 95       	lsr	r24
    20e0:	98 2f       	mov	r25, r24
    20e2:	91 70       	andi	r25, 0x01	; 1
    20e4:	8a e0       	ldi	r24, 0x0A	; 10
    20e6:	69 2f       	mov	r22, r25
    20e8:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D5, READ_BIT(instraction, 1));
    20ec:	89 ad       	ldd	r24, Y+57	; 0x39
    20ee:	86 95       	lsr	r24
    20f0:	98 2f       	mov	r25, r24
    20f2:	91 70       	andi	r25, 0x01	; 1
    20f4:	89 e0       	ldi	r24, 0x09	; 9
    20f6:	69 2f       	mov	r22, r25
    20f8:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D4, READ_BIT(instraction, 0));
    20fc:	89 ad       	ldd	r24, Y+57	; 0x39
    20fe:	98 2f       	mov	r25, r24
    2100:	91 70       	andi	r25, 0x01	; 1
    2102:	88 e0       	ldi	r24, 0x08	; 8
    2104:	69 2f       	mov	r22, r25
    2106:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>

	DIO_WritePin(EN, HIGH);
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
    2112:	80 e0       	ldi	r24, 0x00	; 0
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	a0 e8       	ldi	r26, 0x80	; 128
    2118:	bf e3       	ldi	r27, 0x3F	; 63
    211a:	89 8f       	std	Y+25, r24	; 0x19
    211c:	9a 8f       	std	Y+26, r25	; 0x1a
    211e:	ab 8f       	std	Y+27, r26	; 0x1b
    2120:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2122:	69 8d       	ldd	r22, Y+25	; 0x19
    2124:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2126:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2128:	9c 8d       	ldd	r25, Y+28	; 0x1c
    212a:	20 e0       	ldi	r18, 0x00	; 0
    212c:	30 e0       	ldi	r19, 0x00	; 0
    212e:	4a e7       	ldi	r20, 0x7A	; 122
    2130:	55 e4       	ldi	r21, 0x45	; 69
    2132:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2136:	dc 01       	movw	r26, r24
    2138:	cb 01       	movw	r24, r22
    213a:	8d 8b       	std	Y+21, r24	; 0x15
    213c:	9e 8b       	std	Y+22, r25	; 0x16
    213e:	af 8b       	std	Y+23, r26	; 0x17
    2140:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2142:	6d 89       	ldd	r22, Y+21	; 0x15
    2144:	7e 89       	ldd	r23, Y+22	; 0x16
    2146:	8f 89       	ldd	r24, Y+23	; 0x17
    2148:	98 8d       	ldd	r25, Y+24	; 0x18
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e8       	ldi	r20, 0x80	; 128
    2150:	5f e3       	ldi	r21, 0x3F	; 63
    2152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2156:	88 23       	and	r24, r24
    2158:	2c f4       	brge	.+10     	; 0x2164 <LCD_WRITEINSTRACTION+0x2e2>
		__ticks = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	9c 8b       	std	Y+20, r25	; 0x14
    2160:	8b 8b       	std	Y+19, r24	; 0x13
    2162:	3f c0       	rjmp	.+126    	; 0x21e2 <LCD_WRITEINSTRACTION+0x360>
	else if (__tmp > 65535)
    2164:	6d 89       	ldd	r22, Y+21	; 0x15
    2166:	7e 89       	ldd	r23, Y+22	; 0x16
    2168:	8f 89       	ldd	r24, Y+23	; 0x17
    216a:	98 8d       	ldd	r25, Y+24	; 0x18
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	3f ef       	ldi	r19, 0xFF	; 255
    2170:	4f e7       	ldi	r20, 0x7F	; 127
    2172:	57 e4       	ldi	r21, 0x47	; 71
    2174:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2178:	18 16       	cp	r1, r24
    217a:	4c f5       	brge	.+82     	; 0x21ce <LCD_WRITEINSTRACTION+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217c:	69 8d       	ldd	r22, Y+25	; 0x19
    217e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2180:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2182:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2184:	20 e0       	ldi	r18, 0x00	; 0
    2186:	30 e0       	ldi	r19, 0x00	; 0
    2188:	40 e2       	ldi	r20, 0x20	; 32
    218a:	51 e4       	ldi	r21, 0x41	; 65
    218c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	bc 01       	movw	r22, r24
    2196:	cd 01       	movw	r24, r26
    2198:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	9c 8b       	std	Y+20, r25	; 0x14
    21a2:	8b 8b       	std	Y+19, r24	; 0x13
    21a4:	0f c0       	rjmp	.+30     	; 0x21c4 <LCD_WRITEINSTRACTION+0x342>
    21a6:	80 e9       	ldi	r24, 0x90	; 144
    21a8:	91 e0       	ldi	r25, 0x01	; 1
    21aa:	9a 8b       	std	Y+18, r25	; 0x12
    21ac:	89 8b       	std	Y+17, r24	; 0x11
    21ae:	89 89       	ldd	r24, Y+17	; 0x11
    21b0:	9a 89       	ldd	r25, Y+18	; 0x12
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	f1 f7       	brne	.-4      	; 0x21b2 <LCD_WRITEINSTRACTION+0x330>
    21b6:	9a 8b       	std	Y+18, r25	; 0x12
    21b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ba:	8b 89       	ldd	r24, Y+19	; 0x13
    21bc:	9c 89       	ldd	r25, Y+20	; 0x14
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	9c 8b       	std	Y+20, r25	; 0x14
    21c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c4:	8b 89       	ldd	r24, Y+19	; 0x13
    21c6:	9c 89       	ldd	r25, Y+20	; 0x14
    21c8:	00 97       	sbiw	r24, 0x00	; 0
    21ca:	69 f7       	brne	.-38     	; 0x21a6 <LCD_WRITEINSTRACTION+0x324>
    21cc:	14 c0       	rjmp	.+40     	; 0x21f6 <LCD_WRITEINSTRACTION+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ce:	6d 89       	ldd	r22, Y+21	; 0x15
    21d0:	7e 89       	ldd	r23, Y+22	; 0x16
    21d2:	8f 89       	ldd	r24, Y+23	; 0x17
    21d4:	98 8d       	ldd	r25, Y+24	; 0x18
    21d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	9c 8b       	std	Y+20, r25	; 0x14
    21e0:	8b 8b       	std	Y+19, r24	; 0x13
    21e2:	8b 89       	ldd	r24, Y+19	; 0x13
    21e4:	9c 89       	ldd	r25, Y+20	; 0x14
    21e6:	98 8b       	std	Y+16, r25	; 0x10
    21e8:	8f 87       	std	Y+15, r24	; 0x0f
    21ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    21ec:	98 89       	ldd	r25, Y+16	; 0x10
    21ee:	01 97       	sbiw	r24, 0x01	; 1
    21f0:	f1 f7       	brne	.-4      	; 0x21ee <LCD_WRITEINSTRACTION+0x36c>
    21f2:	98 8b       	std	Y+16, r25	; 0x10
    21f4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(EN, LOW);
    21f6:	82 e0       	ldi	r24, 0x02	; 2
    21f8:	60 e0       	ldi	r22, 0x00	; 0
    21fa:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
    21fe:	80 e0       	ldi	r24, 0x00	; 0
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	a0 e8       	ldi	r26, 0x80	; 128
    2204:	bf e3       	ldi	r27, 0x3F	; 63
    2206:	8b 87       	std	Y+11, r24	; 0x0b
    2208:	9c 87       	std	Y+12, r25	; 0x0c
    220a:	ad 87       	std	Y+13, r26	; 0x0d
    220c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    220e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2210:	7c 85       	ldd	r23, Y+12	; 0x0c
    2212:	8d 85       	ldd	r24, Y+13	; 0x0d
    2214:	9e 85       	ldd	r25, Y+14	; 0x0e
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	4a e7       	ldi	r20, 0x7A	; 122
    221c:	55 e4       	ldi	r21, 0x45	; 69
    221e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2222:	dc 01       	movw	r26, r24
    2224:	cb 01       	movw	r24, r22
    2226:	8f 83       	std	Y+7, r24	; 0x07
    2228:	98 87       	std	Y+8, r25	; 0x08
    222a:	a9 87       	std	Y+9, r26	; 0x09
    222c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    222e:	6f 81       	ldd	r22, Y+7	; 0x07
    2230:	78 85       	ldd	r23, Y+8	; 0x08
    2232:	89 85       	ldd	r24, Y+9	; 0x09
    2234:	9a 85       	ldd	r25, Y+10	; 0x0a
    2236:	20 e0       	ldi	r18, 0x00	; 0
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	40 e8       	ldi	r20, 0x80	; 128
    223c:	5f e3       	ldi	r21, 0x3F	; 63
    223e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2242:	88 23       	and	r24, r24
    2244:	2c f4       	brge	.+10     	; 0x2250 <LCD_WRITEINSTRACTION+0x3ce>
		__ticks = 1;
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	9e 83       	std	Y+6, r25	; 0x06
    224c:	8d 83       	std	Y+5, r24	; 0x05
    224e:	3f c0       	rjmp	.+126    	; 0x22ce <LCD_WRITEINSTRACTION+0x44c>
	else if (__tmp > 65535)
    2250:	6f 81       	ldd	r22, Y+7	; 0x07
    2252:	78 85       	ldd	r23, Y+8	; 0x08
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	9a 85       	ldd	r25, Y+10	; 0x0a
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	3f ef       	ldi	r19, 0xFF	; 255
    225c:	4f e7       	ldi	r20, 0x7F	; 127
    225e:	57 e4       	ldi	r21, 0x47	; 71
    2260:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2264:	18 16       	cp	r1, r24
    2266:	4c f5       	brge	.+82     	; 0x22ba <LCD_WRITEINSTRACTION+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2268:	6b 85       	ldd	r22, Y+11	; 0x0b
    226a:	7c 85       	ldd	r23, Y+12	; 0x0c
    226c:	8d 85       	ldd	r24, Y+13	; 0x0d
    226e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	40 e2       	ldi	r20, 0x20	; 32
    2276:	51 e4       	ldi	r21, 0x41	; 65
    2278:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    227c:	dc 01       	movw	r26, r24
    227e:	cb 01       	movw	r24, r22
    2280:	bc 01       	movw	r22, r24
    2282:	cd 01       	movw	r24, r26
    2284:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
    2290:	0f c0       	rjmp	.+30     	; 0x22b0 <LCD_WRITEINSTRACTION+0x42e>
    2292:	80 e9       	ldi	r24, 0x90	; 144
    2294:	91 e0       	ldi	r25, 0x01	; 1
    2296:	9c 83       	std	Y+4, r25	; 0x04
    2298:	8b 83       	std	Y+3, r24	; 0x03
    229a:	8b 81       	ldd	r24, Y+3	; 0x03
    229c:	9c 81       	ldd	r25, Y+4	; 0x04
    229e:	01 97       	sbiw	r24, 0x01	; 1
    22a0:	f1 f7       	brne	.-4      	; 0x229e <LCD_WRITEINSTRACTION+0x41c>
    22a2:	9c 83       	std	Y+4, r25	; 0x04
    22a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	01 97       	sbiw	r24, 0x01	; 1
    22ac:	9e 83       	std	Y+6, r25	; 0x06
    22ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b0:	8d 81       	ldd	r24, Y+5	; 0x05
    22b2:	9e 81       	ldd	r25, Y+6	; 0x06
    22b4:	00 97       	sbiw	r24, 0x00	; 0
    22b6:	69 f7       	brne	.-38     	; 0x2292 <LCD_WRITEINSTRACTION+0x410>
    22b8:	14 c0       	rjmp	.+40     	; 0x22e2 <LCD_WRITEINSTRACTION+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22ba:	6f 81       	ldd	r22, Y+7	; 0x07
    22bc:	78 85       	ldd	r23, Y+8	; 0x08
    22be:	89 85       	ldd	r24, Y+9	; 0x09
    22c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	9e 83       	std	Y+6, r25	; 0x06
    22cc:	8d 83       	std	Y+5, r24	; 0x05
    22ce:	8d 81       	ldd	r24, Y+5	; 0x05
    22d0:	9e 81       	ldd	r25, Y+6	; 0x06
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	89 83       	std	Y+1, r24	; 0x01
    22d6:	89 81       	ldd	r24, Y+1	; 0x01
    22d8:	9a 81       	ldd	r25, Y+2	; 0x02
    22da:	01 97       	sbiw	r24, 0x01	; 1
    22dc:	f1 f7       	brne	.-4      	; 0x22da <LCD_WRITEINSTRACTION+0x458>
    22de:	9a 83       	std	Y+2, r25	; 0x02
    22e0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    22e2:	e9 96       	adiw	r28, 0x39	; 57
    22e4:	0f b6       	in	r0, 0x3f	; 63
    22e6:	f8 94       	cli
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	0f be       	out	0x3f, r0	; 63
    22ec:	cd bf       	out	0x3d, r28	; 61
    22ee:	cf 91       	pop	r28
    22f0:	df 91       	pop	r29
    22f2:	08 95       	ret

000022f4 <LCD_WRITEDATA>:

static void LCD_WRITEDATA(u8 data) {
    22f4:	df 93       	push	r29
    22f6:	cf 93       	push	r28
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	e9 97       	sbiw	r28, 0x39	; 57
    22fe:	0f b6       	in	r0, 0x3f	; 63
    2300:	f8 94       	cli
    2302:	de bf       	out	0x3e, r29	; 62
    2304:	0f be       	out	0x3f, r0	; 63
    2306:	cd bf       	out	0x3d, r28	; 61
    2308:	89 af       	std	Y+57, r24	; 0x39

	DIO_WritePin(RS, HIGH);
    230a:	83 e0       	ldi	r24, 0x03	; 3
    230c:	61 e0       	ldi	r22, 0x01	; 1
    230e:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>

	/* so here we will get bit for every data that will be entered to lcd */
	/* i do that becouse i want to be generic and be able to put the pins any where i want */

	DIO_WritePin(D7, READ_BIT(data, 7));
    2312:	89 ad       	ldd	r24, Y+57	; 0x39
    2314:	98 2f       	mov	r25, r24
    2316:	99 1f       	adc	r25, r25
    2318:	99 27       	eor	r25, r25
    231a:	99 1f       	adc	r25, r25
    231c:	8c e0       	ldi	r24, 0x0C	; 12
    231e:	69 2f       	mov	r22, r25
    2320:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D6, READ_BIT(data, 6));
    2324:	89 ad       	ldd	r24, Y+57	; 0x39
    2326:	82 95       	swap	r24
    2328:	86 95       	lsr	r24
    232a:	86 95       	lsr	r24
    232c:	83 70       	andi	r24, 0x03	; 3
    232e:	98 2f       	mov	r25, r24
    2330:	91 70       	andi	r25, 0x01	; 1
    2332:	8a e0       	ldi	r24, 0x0A	; 10
    2334:	69 2f       	mov	r22, r25
    2336:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D5, READ_BIT(data, 5));
    233a:	89 ad       	ldd	r24, Y+57	; 0x39
    233c:	82 95       	swap	r24
    233e:	86 95       	lsr	r24
    2340:	87 70       	andi	r24, 0x07	; 7
    2342:	98 2f       	mov	r25, r24
    2344:	91 70       	andi	r25, 0x01	; 1
    2346:	89 e0       	ldi	r24, 0x09	; 9
    2348:	69 2f       	mov	r22, r25
    234a:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D4, READ_BIT(data, 4));
    234e:	89 ad       	ldd	r24, Y+57	; 0x39
    2350:	82 95       	swap	r24
    2352:	8f 70       	andi	r24, 0x0F	; 15
    2354:	98 2f       	mov	r25, r24
    2356:	91 70       	andi	r25, 0x01	; 1
    2358:	88 e0       	ldi	r24, 0x08	; 8
    235a:	69 2f       	mov	r22, r25
    235c:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>

	DIO_WritePin(EN, HIGH);
    2360:	82 e0       	ldi	r24, 0x02	; 2
    2362:	61 e0       	ldi	r22, 0x01	; 1
    2364:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
    2368:	80 e0       	ldi	r24, 0x00	; 0
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	a0 e8       	ldi	r26, 0x80	; 128
    236e:	bf e3       	ldi	r27, 0x3F	; 63
    2370:	8d ab       	std	Y+53, r24	; 0x35
    2372:	9e ab       	std	Y+54, r25	; 0x36
    2374:	af ab       	std	Y+55, r26	; 0x37
    2376:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2378:	6d a9       	ldd	r22, Y+53	; 0x35
    237a:	7e a9       	ldd	r23, Y+54	; 0x36
    237c:	8f a9       	ldd	r24, Y+55	; 0x37
    237e:	98 ad       	ldd	r25, Y+56	; 0x38
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	4a e7       	ldi	r20, 0x7A	; 122
    2386:	55 e4       	ldi	r21, 0x45	; 69
    2388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	89 ab       	std	Y+49, r24	; 0x31
    2392:	9a ab       	std	Y+50, r25	; 0x32
    2394:	ab ab       	std	Y+51, r26	; 0x33
    2396:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2398:	69 a9       	ldd	r22, Y+49	; 0x31
    239a:	7a a9       	ldd	r23, Y+50	; 0x32
    239c:	8b a9       	ldd	r24, Y+51	; 0x33
    239e:	9c a9       	ldd	r25, Y+52	; 0x34
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	40 e8       	ldi	r20, 0x80	; 128
    23a6:	5f e3       	ldi	r21, 0x3F	; 63
    23a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ac:	88 23       	and	r24, r24
    23ae:	2c f4       	brge	.+10     	; 0x23ba <LCD_WRITEDATA+0xc6>
		__ticks = 1;
    23b0:	81 e0       	ldi	r24, 0x01	; 1
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	98 ab       	std	Y+48, r25	; 0x30
    23b6:	8f a7       	std	Y+47, r24	; 0x2f
    23b8:	3f c0       	rjmp	.+126    	; 0x2438 <LCD_WRITEDATA+0x144>
	else if (__tmp > 65535)
    23ba:	69 a9       	ldd	r22, Y+49	; 0x31
    23bc:	7a a9       	ldd	r23, Y+50	; 0x32
    23be:	8b a9       	ldd	r24, Y+51	; 0x33
    23c0:	9c a9       	ldd	r25, Y+52	; 0x34
    23c2:	20 e0       	ldi	r18, 0x00	; 0
    23c4:	3f ef       	ldi	r19, 0xFF	; 255
    23c6:	4f e7       	ldi	r20, 0x7F	; 127
    23c8:	57 e4       	ldi	r21, 0x47	; 71
    23ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23ce:	18 16       	cp	r1, r24
    23d0:	4c f5       	brge	.+82     	; 0x2424 <LCD_WRITEDATA+0x130>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d2:	6d a9       	ldd	r22, Y+53	; 0x35
    23d4:	7e a9       	ldd	r23, Y+54	; 0x36
    23d6:	8f a9       	ldd	r24, Y+55	; 0x37
    23d8:	98 ad       	ldd	r25, Y+56	; 0x38
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	40 e2       	ldi	r20, 0x20	; 32
    23e0:	51 e4       	ldi	r21, 0x41	; 65
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	bc 01       	movw	r22, r24
    23ec:	cd 01       	movw	r24, r26
    23ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	98 ab       	std	Y+48, r25	; 0x30
    23f8:	8f a7       	std	Y+47, r24	; 0x2f
    23fa:	0f c0       	rjmp	.+30     	; 0x241a <LCD_WRITEDATA+0x126>
    23fc:	80 e9       	ldi	r24, 0x90	; 144
    23fe:	91 e0       	ldi	r25, 0x01	; 1
    2400:	9e a7       	std	Y+46, r25	; 0x2e
    2402:	8d a7       	std	Y+45, r24	; 0x2d
    2404:	8d a5       	ldd	r24, Y+45	; 0x2d
    2406:	9e a5       	ldd	r25, Y+46	; 0x2e
    2408:	01 97       	sbiw	r24, 0x01	; 1
    240a:	f1 f7       	brne	.-4      	; 0x2408 <LCD_WRITEDATA+0x114>
    240c:	9e a7       	std	Y+46, r25	; 0x2e
    240e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2410:	8f a5       	ldd	r24, Y+47	; 0x2f
    2412:	98 a9       	ldd	r25, Y+48	; 0x30
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	98 ab       	std	Y+48, r25	; 0x30
    2418:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    241a:	8f a5       	ldd	r24, Y+47	; 0x2f
    241c:	98 a9       	ldd	r25, Y+48	; 0x30
    241e:	00 97       	sbiw	r24, 0x00	; 0
    2420:	69 f7       	brne	.-38     	; 0x23fc <LCD_WRITEDATA+0x108>
    2422:	14 c0       	rjmp	.+40     	; 0x244c <LCD_WRITEDATA+0x158>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2424:	69 a9       	ldd	r22, Y+49	; 0x31
    2426:	7a a9       	ldd	r23, Y+50	; 0x32
    2428:	8b a9       	ldd	r24, Y+51	; 0x33
    242a:	9c a9       	ldd	r25, Y+52	; 0x34
    242c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2430:	dc 01       	movw	r26, r24
    2432:	cb 01       	movw	r24, r22
    2434:	98 ab       	std	Y+48, r25	; 0x30
    2436:	8f a7       	std	Y+47, r24	; 0x2f
    2438:	8f a5       	ldd	r24, Y+47	; 0x2f
    243a:	98 a9       	ldd	r25, Y+48	; 0x30
    243c:	9c a7       	std	Y+44, r25	; 0x2c
    243e:	8b a7       	std	Y+43, r24	; 0x2b
    2440:	8b a5       	ldd	r24, Y+43	; 0x2b
    2442:	9c a5       	ldd	r25, Y+44	; 0x2c
    2444:	01 97       	sbiw	r24, 0x01	; 1
    2446:	f1 f7       	brne	.-4      	; 0x2444 <LCD_WRITEDATA+0x150>
    2448:	9c a7       	std	Y+44, r25	; 0x2c
    244a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_WritePin(EN, LOW);
    244c:	82 e0       	ldi	r24, 0x02	; 2
    244e:	60 e0       	ldi	r22, 0x00	; 0
    2450:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
    2454:	80 e0       	ldi	r24, 0x00	; 0
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	a0 e8       	ldi	r26, 0x80	; 128
    245a:	bf e3       	ldi	r27, 0x3F	; 63
    245c:	8f a3       	std	Y+39, r24	; 0x27
    245e:	98 a7       	std	Y+40, r25	; 0x28
    2460:	a9 a7       	std	Y+41, r26	; 0x29
    2462:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2464:	6f a1       	ldd	r22, Y+39	; 0x27
    2466:	78 a5       	ldd	r23, Y+40	; 0x28
    2468:	89 a5       	ldd	r24, Y+41	; 0x29
    246a:	9a a5       	ldd	r25, Y+42	; 0x2a
    246c:	20 e0       	ldi	r18, 0x00	; 0
    246e:	30 e0       	ldi	r19, 0x00	; 0
    2470:	4a e7       	ldi	r20, 0x7A	; 122
    2472:	55 e4       	ldi	r21, 0x45	; 69
    2474:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2478:	dc 01       	movw	r26, r24
    247a:	cb 01       	movw	r24, r22
    247c:	8b a3       	std	Y+35, r24	; 0x23
    247e:	9c a3       	std	Y+36, r25	; 0x24
    2480:	ad a3       	std	Y+37, r26	; 0x25
    2482:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2484:	6b a1       	ldd	r22, Y+35	; 0x23
    2486:	7c a1       	ldd	r23, Y+36	; 0x24
    2488:	8d a1       	ldd	r24, Y+37	; 0x25
    248a:	9e a1       	ldd	r25, Y+38	; 0x26
    248c:	20 e0       	ldi	r18, 0x00	; 0
    248e:	30 e0       	ldi	r19, 0x00	; 0
    2490:	40 e8       	ldi	r20, 0x80	; 128
    2492:	5f e3       	ldi	r21, 0x3F	; 63
    2494:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2498:	88 23       	and	r24, r24
    249a:	2c f4       	brge	.+10     	; 0x24a6 <LCD_WRITEDATA+0x1b2>
		__ticks = 1;
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	9a a3       	std	Y+34, r25	; 0x22
    24a2:	89 a3       	std	Y+33, r24	; 0x21
    24a4:	3f c0       	rjmp	.+126    	; 0x2524 <LCD_WRITEDATA+0x230>
	else if (__tmp > 65535)
    24a6:	6b a1       	ldd	r22, Y+35	; 0x23
    24a8:	7c a1       	ldd	r23, Y+36	; 0x24
    24aa:	8d a1       	ldd	r24, Y+37	; 0x25
    24ac:	9e a1       	ldd	r25, Y+38	; 0x26
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	3f ef       	ldi	r19, 0xFF	; 255
    24b2:	4f e7       	ldi	r20, 0x7F	; 127
    24b4:	57 e4       	ldi	r21, 0x47	; 71
    24b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ba:	18 16       	cp	r1, r24
    24bc:	4c f5       	brge	.+82     	; 0x2510 <LCD_WRITEDATA+0x21c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24be:	6f a1       	ldd	r22, Y+39	; 0x27
    24c0:	78 a5       	ldd	r23, Y+40	; 0x28
    24c2:	89 a5       	ldd	r24, Y+41	; 0x29
    24c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    24c6:	20 e0       	ldi	r18, 0x00	; 0
    24c8:	30 e0       	ldi	r19, 0x00	; 0
    24ca:	40 e2       	ldi	r20, 0x20	; 32
    24cc:	51 e4       	ldi	r21, 0x41	; 65
    24ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24d2:	dc 01       	movw	r26, r24
    24d4:	cb 01       	movw	r24, r22
    24d6:	bc 01       	movw	r22, r24
    24d8:	cd 01       	movw	r24, r26
    24da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	9a a3       	std	Y+34, r25	; 0x22
    24e4:	89 a3       	std	Y+33, r24	; 0x21
    24e6:	0f c0       	rjmp	.+30     	; 0x2506 <LCD_WRITEDATA+0x212>
    24e8:	80 e9       	ldi	r24, 0x90	; 144
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	98 a3       	std	Y+32, r25	; 0x20
    24ee:	8f 8f       	std	Y+31, r24	; 0x1f
    24f0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    24f2:	98 a1       	ldd	r25, Y+32	; 0x20
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <LCD_WRITEDATA+0x200>
    24f8:	98 a3       	std	Y+32, r25	; 0x20
    24fa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24fc:	89 a1       	ldd	r24, Y+33	; 0x21
    24fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2500:	01 97       	sbiw	r24, 0x01	; 1
    2502:	9a a3       	std	Y+34, r25	; 0x22
    2504:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2506:	89 a1       	ldd	r24, Y+33	; 0x21
    2508:	9a a1       	ldd	r25, Y+34	; 0x22
    250a:	00 97       	sbiw	r24, 0x00	; 0
    250c:	69 f7       	brne	.-38     	; 0x24e8 <LCD_WRITEDATA+0x1f4>
    250e:	14 c0       	rjmp	.+40     	; 0x2538 <LCD_WRITEDATA+0x244>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2510:	6b a1       	ldd	r22, Y+35	; 0x23
    2512:	7c a1       	ldd	r23, Y+36	; 0x24
    2514:	8d a1       	ldd	r24, Y+37	; 0x25
    2516:	9e a1       	ldd	r25, Y+38	; 0x26
    2518:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	9a a3       	std	Y+34, r25	; 0x22
    2522:	89 a3       	std	Y+33, r24	; 0x21
    2524:	89 a1       	ldd	r24, Y+33	; 0x21
    2526:	9a a1       	ldd	r25, Y+34	; 0x22
    2528:	9e 8f       	std	Y+30, r25	; 0x1e
    252a:	8d 8f       	std	Y+29, r24	; 0x1d
    252c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    252e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	f1 f7       	brne	.-4      	; 0x2530 <LCD_WRITEDATA+0x23c>
    2534:	9e 8f       	std	Y+30, r25	; 0x1e
    2536:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	DIO_WritePin(D7, READ_BIT(data, 3));
    2538:	89 ad       	ldd	r24, Y+57	; 0x39
    253a:	86 95       	lsr	r24
    253c:	86 95       	lsr	r24
    253e:	86 95       	lsr	r24
    2540:	98 2f       	mov	r25, r24
    2542:	91 70       	andi	r25, 0x01	; 1
    2544:	8c e0       	ldi	r24, 0x0C	; 12
    2546:	69 2f       	mov	r22, r25
    2548:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D6, READ_BIT(data, 2));
    254c:	89 ad       	ldd	r24, Y+57	; 0x39
    254e:	86 95       	lsr	r24
    2550:	86 95       	lsr	r24
    2552:	98 2f       	mov	r25, r24
    2554:	91 70       	andi	r25, 0x01	; 1
    2556:	8a e0       	ldi	r24, 0x0A	; 10
    2558:	69 2f       	mov	r22, r25
    255a:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D5, READ_BIT(data, 1));
    255e:	89 ad       	ldd	r24, Y+57	; 0x39
    2560:	86 95       	lsr	r24
    2562:	98 2f       	mov	r25, r24
    2564:	91 70       	andi	r25, 0x01	; 1
    2566:	89 e0       	ldi	r24, 0x09	; 9
    2568:	69 2f       	mov	r22, r25
    256a:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
	DIO_WritePin(D4, READ_BIT(data, 0));
    256e:	89 ad       	ldd	r24, Y+57	; 0x39
    2570:	98 2f       	mov	r25, r24
    2572:	91 70       	andi	r25, 0x01	; 1
    2574:	88 e0       	ldi	r24, 0x08	; 8
    2576:	69 2f       	mov	r22, r25
    2578:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>

	DIO_WritePin(EN, HIGH);
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	61 e0       	ldi	r22, 0x01	; 1
    2580:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
    2584:	80 e0       	ldi	r24, 0x00	; 0
    2586:	90 e0       	ldi	r25, 0x00	; 0
    2588:	a0 e8       	ldi	r26, 0x80	; 128
    258a:	bf e3       	ldi	r27, 0x3F	; 63
    258c:	89 8f       	std	Y+25, r24	; 0x19
    258e:	9a 8f       	std	Y+26, r25	; 0x1a
    2590:	ab 8f       	std	Y+27, r26	; 0x1b
    2592:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2594:	69 8d       	ldd	r22, Y+25	; 0x19
    2596:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    259a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	4a e7       	ldi	r20, 0x7A	; 122
    25a2:	55 e4       	ldi	r21, 0x45	; 69
    25a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a8:	dc 01       	movw	r26, r24
    25aa:	cb 01       	movw	r24, r22
    25ac:	8d 8b       	std	Y+21, r24	; 0x15
    25ae:	9e 8b       	std	Y+22, r25	; 0x16
    25b0:	af 8b       	std	Y+23, r26	; 0x17
    25b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25b4:	6d 89       	ldd	r22, Y+21	; 0x15
    25b6:	7e 89       	ldd	r23, Y+22	; 0x16
    25b8:	8f 89       	ldd	r24, Y+23	; 0x17
    25ba:	98 8d       	ldd	r25, Y+24	; 0x18
    25bc:	20 e0       	ldi	r18, 0x00	; 0
    25be:	30 e0       	ldi	r19, 0x00	; 0
    25c0:	40 e8       	ldi	r20, 0x80	; 128
    25c2:	5f e3       	ldi	r21, 0x3F	; 63
    25c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c8:	88 23       	and	r24, r24
    25ca:	2c f4       	brge	.+10     	; 0x25d6 <LCD_WRITEDATA+0x2e2>
		__ticks = 1;
    25cc:	81 e0       	ldi	r24, 0x01	; 1
    25ce:	90 e0       	ldi	r25, 0x00	; 0
    25d0:	9c 8b       	std	Y+20, r25	; 0x14
    25d2:	8b 8b       	std	Y+19, r24	; 0x13
    25d4:	3f c0       	rjmp	.+126    	; 0x2654 <LCD_WRITEDATA+0x360>
	else if (__tmp > 65535)
    25d6:	6d 89       	ldd	r22, Y+21	; 0x15
    25d8:	7e 89       	ldd	r23, Y+22	; 0x16
    25da:	8f 89       	ldd	r24, Y+23	; 0x17
    25dc:	98 8d       	ldd	r25, Y+24	; 0x18
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	3f ef       	ldi	r19, 0xFF	; 255
    25e2:	4f e7       	ldi	r20, 0x7F	; 127
    25e4:	57 e4       	ldi	r21, 0x47	; 71
    25e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ea:	18 16       	cp	r1, r24
    25ec:	4c f5       	brge	.+82     	; 0x2640 <LCD_WRITEDATA+0x34c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ee:	69 8d       	ldd	r22, Y+25	; 0x19
    25f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	30 e0       	ldi	r19, 0x00	; 0
    25fa:	40 e2       	ldi	r20, 0x20	; 32
    25fc:	51 e4       	ldi	r21, 0x41	; 65
    25fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2602:	dc 01       	movw	r26, r24
    2604:	cb 01       	movw	r24, r22
    2606:	bc 01       	movw	r22, r24
    2608:	cd 01       	movw	r24, r26
    260a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260e:	dc 01       	movw	r26, r24
    2610:	cb 01       	movw	r24, r22
    2612:	9c 8b       	std	Y+20, r25	; 0x14
    2614:	8b 8b       	std	Y+19, r24	; 0x13
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <LCD_WRITEDATA+0x342>
    2618:	80 e9       	ldi	r24, 0x90	; 144
    261a:	91 e0       	ldi	r25, 0x01	; 1
    261c:	9a 8b       	std	Y+18, r25	; 0x12
    261e:	89 8b       	std	Y+17, r24	; 0x11
    2620:	89 89       	ldd	r24, Y+17	; 0x11
    2622:	9a 89       	ldd	r25, Y+18	; 0x12
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <LCD_WRITEDATA+0x330>
    2628:	9a 8b       	std	Y+18, r25	; 0x12
    262a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262c:	8b 89       	ldd	r24, Y+19	; 0x13
    262e:	9c 89       	ldd	r25, Y+20	; 0x14
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	9c 8b       	std	Y+20, r25	; 0x14
    2634:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2636:	8b 89       	ldd	r24, Y+19	; 0x13
    2638:	9c 89       	ldd	r25, Y+20	; 0x14
    263a:	00 97       	sbiw	r24, 0x00	; 0
    263c:	69 f7       	brne	.-38     	; 0x2618 <LCD_WRITEDATA+0x324>
    263e:	14 c0       	rjmp	.+40     	; 0x2668 <LCD_WRITEDATA+0x374>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2640:	6d 89       	ldd	r22, Y+21	; 0x15
    2642:	7e 89       	ldd	r23, Y+22	; 0x16
    2644:	8f 89       	ldd	r24, Y+23	; 0x17
    2646:	98 8d       	ldd	r25, Y+24	; 0x18
    2648:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264c:	dc 01       	movw	r26, r24
    264e:	cb 01       	movw	r24, r22
    2650:	9c 8b       	std	Y+20, r25	; 0x14
    2652:	8b 8b       	std	Y+19, r24	; 0x13
    2654:	8b 89       	ldd	r24, Y+19	; 0x13
    2656:	9c 89       	ldd	r25, Y+20	; 0x14
    2658:	98 8b       	std	Y+16, r25	; 0x10
    265a:	8f 87       	std	Y+15, r24	; 0x0f
    265c:	8f 85       	ldd	r24, Y+15	; 0x0f
    265e:	98 89       	ldd	r25, Y+16	; 0x10
    2660:	01 97       	sbiw	r24, 0x01	; 1
    2662:	f1 f7       	brne	.-4      	; 0x2660 <LCD_WRITEDATA+0x36c>
    2664:	98 8b       	std	Y+16, r25	; 0x10
    2666:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_WritePin(EN, LOW);
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	0e 94 27 0b 	call	0x164e	; 0x164e <DIO_WritePin>
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	a0 e8       	ldi	r26, 0x80	; 128
    2676:	bf e3       	ldi	r27, 0x3F	; 63
    2678:	8b 87       	std	Y+11, r24	; 0x0b
    267a:	9c 87       	std	Y+12, r25	; 0x0c
    267c:	ad 87       	std	Y+13, r26	; 0x0d
    267e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2680:	6b 85       	ldd	r22, Y+11	; 0x0b
    2682:	7c 85       	ldd	r23, Y+12	; 0x0c
    2684:	8d 85       	ldd	r24, Y+13	; 0x0d
    2686:	9e 85       	ldd	r25, Y+14	; 0x0e
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	4a e7       	ldi	r20, 0x7A	; 122
    268e:	55 e4       	ldi	r21, 0x45	; 69
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	8f 83       	std	Y+7, r24	; 0x07
    269a:	98 87       	std	Y+8, r25	; 0x08
    269c:	a9 87       	std	Y+9, r26	; 0x09
    269e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e8       	ldi	r20, 0x80	; 128
    26ae:	5f e3       	ldi	r21, 0x3F	; 63
    26b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b4:	88 23       	and	r24, r24
    26b6:	2c f4       	brge	.+10     	; 0x26c2 <LCD_WRITEDATA+0x3ce>
		__ticks = 1;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
    26c0:	3f c0       	rjmp	.+126    	; 0x2740 <LCD_WRITEDATA+0x44c>
	else if (__tmp > 65535)
    26c2:	6f 81       	ldd	r22, Y+7	; 0x07
    26c4:	78 85       	ldd	r23, Y+8	; 0x08
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	3f ef       	ldi	r19, 0xFF	; 255
    26ce:	4f e7       	ldi	r20, 0x7F	; 127
    26d0:	57 e4       	ldi	r21, 0x47	; 71
    26d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d6:	18 16       	cp	r1, r24
    26d8:	4c f5       	brge	.+82     	; 0x272c <LCD_WRITEDATA+0x438>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26da:	6b 85       	ldd	r22, Y+11	; 0x0b
    26dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26de:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e2       	ldi	r20, 0x20	; 32
    26e8:	51 e4       	ldi	r21, 0x41	; 65
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	bc 01       	movw	r22, r24
    26f4:	cd 01       	movw	r24, r26
    26f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
    2702:	0f c0       	rjmp	.+30     	; 0x2722 <LCD_WRITEDATA+0x42e>
    2704:	80 e9       	ldi	r24, 0x90	; 144
    2706:	91 e0       	ldi	r25, 0x01	; 1
    2708:	9c 83       	std	Y+4, r25	; 0x04
    270a:	8b 83       	std	Y+3, r24	; 0x03
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <LCD_WRITEDATA+0x41c>
    2714:	9c 83       	std	Y+4, r25	; 0x04
    2716:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2718:	8d 81       	ldd	r24, Y+5	; 0x05
    271a:	9e 81       	ldd	r25, Y+6	; 0x06
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	69 f7       	brne	.-38     	; 0x2704 <LCD_WRITEDATA+0x410>
    272a:	14 c0       	rjmp	.+40     	; 0x2754 <LCD_WRITEDATA+0x460>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9e 83       	std	Y+6, r25	; 0x06
    273e:	8d 83       	std	Y+5, r24	; 0x05
    2740:	8d 81       	ldd	r24, Y+5	; 0x05
    2742:	9e 81       	ldd	r25, Y+6	; 0x06
    2744:	9a 83       	std	Y+2, r25	; 0x02
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	9a 81       	ldd	r25, Y+2	; 0x02
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <LCD_WRITEDATA+0x458>
    2750:	9a 83       	std	Y+2, r25	; 0x02
    2752:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    2754:	e9 96       	adiw	r28, 0x39	; 57
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <LCD_INIT>:

void LCD_INIT(void) {
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	cd b7       	in	r28, 0x3d	; 61
    276c:	de b7       	in	r29, 0x3e	; 62
    276e:	6c 97       	sbiw	r28, 0x1c	; 28
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a8 e4       	ldi	r26, 0x48	; 72
    2780:	b2 e4       	ldi	r27, 0x42	; 66
    2782:	89 8f       	std	Y+25, r24	; 0x19
    2784:	9a 8f       	std	Y+26, r25	; 0x1a
    2786:	ab 8f       	std	Y+27, r26	; 0x1b
    2788:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    278a:	69 8d       	ldd	r22, Y+25	; 0x19
    278c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    278e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2790:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2792:	20 e0       	ldi	r18, 0x00	; 0
    2794:	30 e0       	ldi	r19, 0x00	; 0
    2796:	4a e7       	ldi	r20, 0x7A	; 122
    2798:	55 e4       	ldi	r21, 0x45	; 69
    279a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    279e:	dc 01       	movw	r26, r24
    27a0:	cb 01       	movw	r24, r22
    27a2:	8d 8b       	std	Y+21, r24	; 0x15
    27a4:	9e 8b       	std	Y+22, r25	; 0x16
    27a6:	af 8b       	std	Y+23, r26	; 0x17
    27a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27aa:	6d 89       	ldd	r22, Y+21	; 0x15
    27ac:	7e 89       	ldd	r23, Y+22	; 0x16
    27ae:	8f 89       	ldd	r24, Y+23	; 0x17
    27b0:	98 8d       	ldd	r25, Y+24	; 0x18
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	30 e0       	ldi	r19, 0x00	; 0
    27b6:	40 e8       	ldi	r20, 0x80	; 128
    27b8:	5f e3       	ldi	r21, 0x3F	; 63
    27ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27be:	88 23       	and	r24, r24
    27c0:	2c f4       	brge	.+10     	; 0x27cc <LCD_INIT+0x66>
		__ticks = 1;
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	9c 8b       	std	Y+20, r25	; 0x14
    27c8:	8b 8b       	std	Y+19, r24	; 0x13
    27ca:	3f c0       	rjmp	.+126    	; 0x284a <LCD_INIT+0xe4>
	else if (__tmp > 65535)
    27cc:	6d 89       	ldd	r22, Y+21	; 0x15
    27ce:	7e 89       	ldd	r23, Y+22	; 0x16
    27d0:	8f 89       	ldd	r24, Y+23	; 0x17
    27d2:	98 8d       	ldd	r25, Y+24	; 0x18
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	3f ef       	ldi	r19, 0xFF	; 255
    27d8:	4f e7       	ldi	r20, 0x7F	; 127
    27da:	57 e4       	ldi	r21, 0x47	; 71
    27dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27e0:	18 16       	cp	r1, r24
    27e2:	4c f5       	brge	.+82     	; 0x2836 <LCD_INIT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27e4:	69 8d       	ldd	r22, Y+25	; 0x19
    27e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27ec:	20 e0       	ldi	r18, 0x00	; 0
    27ee:	30 e0       	ldi	r19, 0x00	; 0
    27f0:	40 e2       	ldi	r20, 0x20	; 32
    27f2:	51 e4       	ldi	r21, 0x41	; 65
    27f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	bc 01       	movw	r22, r24
    27fe:	cd 01       	movw	r24, r26
    2800:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	9c 8b       	std	Y+20, r25	; 0x14
    280a:	8b 8b       	std	Y+19, r24	; 0x13
    280c:	0f c0       	rjmp	.+30     	; 0x282c <LCD_INIT+0xc6>
    280e:	80 e9       	ldi	r24, 0x90	; 144
    2810:	91 e0       	ldi	r25, 0x01	; 1
    2812:	9a 8b       	std	Y+18, r25	; 0x12
    2814:	89 8b       	std	Y+17, r24	; 0x11
    2816:	89 89       	ldd	r24, Y+17	; 0x11
    2818:	9a 89       	ldd	r25, Y+18	; 0x12
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	f1 f7       	brne	.-4      	; 0x281a <LCD_INIT+0xb4>
    281e:	9a 8b       	std	Y+18, r25	; 0x12
    2820:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2822:	8b 89       	ldd	r24, Y+19	; 0x13
    2824:	9c 89       	ldd	r25, Y+20	; 0x14
    2826:	01 97       	sbiw	r24, 0x01	; 1
    2828:	9c 8b       	std	Y+20, r25	; 0x14
    282a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    282c:	8b 89       	ldd	r24, Y+19	; 0x13
    282e:	9c 89       	ldd	r25, Y+20	; 0x14
    2830:	00 97       	sbiw	r24, 0x00	; 0
    2832:	69 f7       	brne	.-38     	; 0x280e <LCD_INIT+0xa8>
    2834:	14 c0       	rjmp	.+40     	; 0x285e <LCD_INIT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2836:	6d 89       	ldd	r22, Y+21	; 0x15
    2838:	7e 89       	ldd	r23, Y+22	; 0x16
    283a:	8f 89       	ldd	r24, Y+23	; 0x17
    283c:	98 8d       	ldd	r25, Y+24	; 0x18
    283e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	9c 8b       	std	Y+20, r25	; 0x14
    2848:	8b 8b       	std	Y+19, r24	; 0x13
    284a:	8b 89       	ldd	r24, Y+19	; 0x13
    284c:	9c 89       	ldd	r25, Y+20	; 0x14
    284e:	98 8b       	std	Y+16, r25	; 0x10
    2850:	8f 87       	std	Y+15, r24	; 0x0f
    2852:	8f 85       	ldd	r24, Y+15	; 0x0f
    2854:	98 89       	ldd	r25, Y+16	; 0x10
    2856:	01 97       	sbiw	r24, 0x01	; 1
    2858:	f1 f7       	brne	.-4      	; 0x2856 <LCD_INIT+0xf0>
    285a:	98 8b       	std	Y+16, r25	; 0x10
    285c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(50);
	LCD_WRITEINSTRACTION(0x02);
    285e:	82 e0       	ldi	r24, 0x02	; 2
    2860:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_WRITEINSTRACTION>
	LCD_WRITEINSTRACTION(0x28);
    2864:	88 e2       	ldi	r24, 0x28	; 40
    2866:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_WRITEINSTRACTION>
	LCD_WRITEINSTRACTION(0x0c);
    286a:	8c e0       	ldi	r24, 0x0C	; 12
    286c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_WRITEINSTRACTION>
	LCD_WRITEINSTRACTION(0x01);
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_WRITEINSTRACTION>
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	a0 e8       	ldi	r26, 0x80	; 128
    287c:	bf e3       	ldi	r27, 0x3F	; 63
    287e:	8b 87       	std	Y+11, r24	; 0x0b
    2880:	9c 87       	std	Y+12, r25	; 0x0c
    2882:	ad 87       	std	Y+13, r26	; 0x0d
    2884:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a e7       	ldi	r20, 0x7A	; 122
    2894:	55 e4       	ldi	r21, 0x45	; 69
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	8f 83       	std	Y+7, r24	; 0x07
    28a0:	98 87       	std	Y+8, r25	; 0x08
    28a2:	a9 87       	std	Y+9, r26	; 0x09
    28a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a6:	6f 81       	ldd	r22, Y+7	; 0x07
    28a8:	78 85       	ldd	r23, Y+8	; 0x08
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ba:	88 23       	and	r24, r24
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <LCD_INIT+0x162>
		__ticks = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	3f c0       	rjmp	.+126    	; 0x2946 <LCD_INIT+0x1e0>
	else if (__tmp > 65535)
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
    28d4:	4f e7       	ldi	r20, 0x7F	; 127
    28d6:	57 e4       	ldi	r21, 0x47	; 71
    28d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28dc:	18 16       	cp	r1, r24
    28de:	4c f5       	brge	.+82     	; 0x2932 <LCD_INIT+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9e 83       	std	Y+6, r25	; 0x06
    2906:	8d 83       	std	Y+5, r24	; 0x05
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <LCD_INIT+0x1c2>
    290a:	80 e9       	ldi	r24, 0x90	; 144
    290c:	91 e0       	ldi	r25, 0x01	; 1
    290e:	9c 83       	std	Y+4, r25	; 0x04
    2910:	8b 83       	std	Y+3, r24	; 0x03
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	9c 81       	ldd	r25, Y+4	; 0x04
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LCD_INIT+0x1b0>
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	69 f7       	brne	.-38     	; 0x290a <LCD_INIT+0x1a4>
    2930:	14 c0       	rjmp	.+40     	; 0x295a <LCD_INIT+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	8d 81       	ldd	r24, Y+5	; 0x05
    2948:	9e 81       	ldd	r25, Y+6	; 0x06
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LCD_INIT+0x1ec>
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_WRITEINSTRACTION(0x06);
    295a:	86 e0       	ldi	r24, 0x06	; 6
    295c:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_WRITEINSTRACTION>

}
    2960:	6c 96       	adiw	r28, 0x1c	; 28
    2962:	0f b6       	in	r0, 0x3f	; 63
    2964:	f8 94       	cli
    2966:	de bf       	out	0x3e, r29	; 62
    2968:	0f be       	out	0x3f, r0	; 63
    296a:	cd bf       	out	0x3d, r28	; 61
    296c:	cf 91       	pop	r28
    296e:	df 91       	pop	r29
    2970:	08 95       	ret

00002972 <LCD_CLEAR>:
}
#endif



void LCD_CLEAR(void) {
    2972:	df 93       	push	r29
    2974:	cf 93       	push	r28
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	2e 97       	sbiw	r28, 0x0e	; 14
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61

	LCD_WRITEINSTRACTION(0x01);
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_WRITEINSTRACTION>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	a0 e0       	ldi	r26, 0x00	; 0
    2992:	b0 e4       	ldi	r27, 0x40	; 64
    2994:	8b 87       	std	Y+11, r24	; 0x0b
    2996:	9c 87       	std	Y+12, r25	; 0x0c
    2998:	ad 87       	std	Y+13, r26	; 0x0d
    299a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299c:	6b 85       	ldd	r22, Y+11	; 0x0b
    299e:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4a e7       	ldi	r20, 0x7A	; 122
    29aa:	55 e4       	ldi	r21, 0x45	; 69
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	8f 83       	std	Y+7, r24	; 0x07
    29b6:	98 87       	std	Y+8, r25	; 0x08
    29b8:	a9 87       	std	Y+9, r26	; 0x09
    29ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29bc:	6f 81       	ldd	r22, Y+7	; 0x07
    29be:	78 85       	ldd	r23, Y+8	; 0x08
    29c0:	89 85       	ldd	r24, Y+9	; 0x09
    29c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	2c f4       	brge	.+10     	; 0x29de <LCD_CLEAR+0x6c>
		__ticks = 1;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	9e 83       	std	Y+6, r25	; 0x06
    29da:	8d 83       	std	Y+5, r24	; 0x05
    29dc:	3f c0       	rjmp	.+126    	; 0x2a5c <LCD_CLEAR+0xea>
	else if (__tmp > 65535)
    29de:	6f 81       	ldd	r22, Y+7	; 0x07
    29e0:	78 85       	ldd	r23, Y+8	; 0x08
    29e2:	89 85       	ldd	r24, Y+9	; 0x09
    29e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	3f ef       	ldi	r19, 0xFF	; 255
    29ea:	4f e7       	ldi	r20, 0x7F	; 127
    29ec:	57 e4       	ldi	r21, 0x47	; 71
    29ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f2:	18 16       	cp	r1, r24
    29f4:	4c f5       	brge	.+82     	; 0x2a48 <LCD_CLEAR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e2       	ldi	r20, 0x20	; 32
    2a04:	51 e4       	ldi	r21, 0x41	; 65
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	9e 83       	std	Y+6, r25	; 0x06
    2a1c:	8d 83       	std	Y+5, r24	; 0x05
    2a1e:	0f c0       	rjmp	.+30     	; 0x2a3e <LCD_CLEAR+0xcc>
    2a20:	80 e9       	ldi	r24, 0x90	; 144
    2a22:	91 e0       	ldi	r25, 0x01	; 1
    2a24:	9c 83       	std	Y+4, r25	; 0x04
    2a26:	8b 83       	std	Y+3, r24	; 0x03
    2a28:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <LCD_CLEAR+0xba>
    2a30:	9c 83       	std	Y+4, r25	; 0x04
    2a32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a34:	8d 81       	ldd	r24, Y+5	; 0x05
    2a36:	9e 81       	ldd	r25, Y+6	; 0x06
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	9e 83       	std	Y+6, r25	; 0x06
    2a3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a40:	9e 81       	ldd	r25, Y+6	; 0x06
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	69 f7       	brne	.-38     	; 0x2a20 <LCD_CLEAR+0xae>
    2a46:	14 c0       	rjmp	.+40     	; 0x2a70 <LCD_CLEAR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a48:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4a:	78 85       	ldd	r23, Y+8	; 0x08
    2a4c:	89 85       	ldd	r24, Y+9	; 0x09
    2a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	9e 81       	ldd	r25, Y+6	; 0x06
    2a60:	9a 83       	std	Y+2, r25	; 0x02
    2a62:	89 83       	std	Y+1, r24	; 0x01
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	9a 81       	ldd	r25, Y+2	; 0x02
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <LCD_CLEAR+0xf6>
    2a6c:	9a 83       	std	Y+2, r25	; 0x02
    2a6e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

}
    2a70:	2e 96       	adiw	r28, 0x0e	; 14
    2a72:	0f b6       	in	r0, 0x3f	; 63
    2a74:	f8 94       	cli
    2a76:	de bf       	out	0x3e, r29	; 62
    2a78:	0f be       	out	0x3f, r0	; 63
    2a7a:	cd bf       	out	0x3d, r28	; 61
    2a7c:	cf 91       	pop	r28
    2a7e:	df 91       	pop	r29
    2a80:	08 95       	ret

00002a82 <LCD_WRITENUMBER>:

void LCD_WRITENUMBER(s32 num) // 2504
{
    2a82:	0f 93       	push	r16
    2a84:	1f 93       	push	r17
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	66 97       	sbiw	r28, 0x16	; 22
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	6b 8b       	std	Y+19, r22	; 0x13
    2a9c:	7c 8b       	std	Y+20, r23	; 0x14
    2a9e:	8d 8b       	std	Y+21, r24	; 0x15
    2aa0:	9e 8b       	std	Y+22, r25	; 0x16
	u8 i = 0, str[16];
    2aa2:	1a 82       	std	Y+2, r1	; 0x02
	s8 j;

	if (num == 0) {
    2aa4:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa6:	9c 89       	ldd	r25, Y+20	; 0x14
    2aa8:	ad 89       	ldd	r26, Y+21	; 0x15
    2aaa:	be 89       	ldd	r27, Y+22	; 0x16
    2aac:	00 97       	sbiw	r24, 0x00	; 0
    2aae:	a1 05       	cpc	r26, r1
    2ab0:	b1 05       	cpc	r27, r1
    2ab2:	21 f4       	brne	.+8      	; 0x2abc <LCD_WRITENUMBER+0x3a>
		LCD_WRITECHAR('0');
    2ab4:	80 e3       	ldi	r24, 0x30	; 48
    2ab6:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>
    2aba:	67 c0       	rjmp	.+206    	; 0x2b8a <LCD_WRITENUMBER+0x108>
		return;
	}
	if (num < 0) {
    2abc:	8b 89       	ldd	r24, Y+19	; 0x13
    2abe:	9c 89       	ldd	r25, Y+20	; 0x14
    2ac0:	ad 89       	ldd	r26, Y+21	; 0x15
    2ac2:	be 89       	ldd	r27, Y+22	; 0x16
    2ac4:	bb 23       	and	r27, r27
    2ac6:	0c f0       	brlt	.+2      	; 0x2aca <LCD_WRITENUMBER+0x48>
    2ac8:	41 c0       	rjmp	.+130    	; 0x2b4c <LCD_WRITENUMBER+0xca>
		LCD_WRITECHAR('-');
    2aca:	8d e2       	ldi	r24, 0x2D	; 45
    2acc:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>
		num = num * (-1);
    2ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    2ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    2ad4:	ad 89       	ldd	r26, Y+21	; 0x15
    2ad6:	be 89       	ldd	r27, Y+22	; 0x16
    2ad8:	b0 95       	com	r27
    2ada:	a0 95       	com	r26
    2adc:	90 95       	com	r25
    2ade:	81 95       	neg	r24
    2ae0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ae2:	af 4f       	sbci	r26, 0xFF	; 255
    2ae4:	bf 4f       	sbci	r27, 0xFF	; 255
    2ae6:	8b 8b       	std	Y+19, r24	; 0x13
    2ae8:	9c 8b       	std	Y+20, r25	; 0x14
    2aea:	ad 8b       	std	Y+21, r26	; 0x15
    2aec:	be 8b       	std	Y+22, r27	; 0x16
    2aee:	2e c0       	rjmp	.+92     	; 0x2b4c <LCD_WRITENUMBER+0xca>
	}
	while (num) {
		str[i] = (num % 10) + '0';
    2af0:	8a 81       	ldd	r24, Y+2	; 0x02
    2af2:	08 2f       	mov	r16, r24
    2af4:	10 e0       	ldi	r17, 0x00	; 0
    2af6:	8b 89       	ldd	r24, Y+19	; 0x13
    2af8:	9c 89       	ldd	r25, Y+20	; 0x14
    2afa:	ad 89       	ldd	r26, Y+21	; 0x15
    2afc:	be 89       	ldd	r27, Y+22	; 0x16
    2afe:	2a e0       	ldi	r18, 0x0A	; 10
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	40 e0       	ldi	r20, 0x00	; 0
    2b04:	50 e0       	ldi	r21, 0x00	; 0
    2b06:	bc 01       	movw	r22, r24
    2b08:	cd 01       	movw	r24, r26
    2b0a:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__divmodsi4>
    2b0e:	dc 01       	movw	r26, r24
    2b10:	cb 01       	movw	r24, r22
    2b12:	28 2f       	mov	r18, r24
    2b14:	20 5d       	subi	r18, 0xD0	; 208
    2b16:	ce 01       	movw	r24, r28
    2b18:	03 96       	adiw	r24, 0x03	; 3
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	e0 0f       	add	r30, r16
    2b1e:	f1 1f       	adc	r31, r17
    2b20:	20 83       	st	Z, r18
		num = num / 10;
    2b22:	8b 89       	ldd	r24, Y+19	; 0x13
    2b24:	9c 89       	ldd	r25, Y+20	; 0x14
    2b26:	ad 89       	ldd	r26, Y+21	; 0x15
    2b28:	be 89       	ldd	r27, Y+22	; 0x16
    2b2a:	2a e0       	ldi	r18, 0x0A	; 10
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e0       	ldi	r20, 0x00	; 0
    2b30:	50 e0       	ldi	r21, 0x00	; 0
    2b32:	bc 01       	movw	r22, r24
    2b34:	cd 01       	movw	r24, r26
    2b36:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__divmodsi4>
    2b3a:	da 01       	movw	r26, r20
    2b3c:	c9 01       	movw	r24, r18
    2b3e:	8b 8b       	std	Y+19, r24	; 0x13
    2b40:	9c 8b       	std	Y+20, r25	; 0x14
    2b42:	ad 8b       	std	Y+21, r26	; 0x15
    2b44:	be 8b       	std	Y+22, r27	; 0x16
		i++;
    2b46:	8a 81       	ldd	r24, Y+2	; 0x02
    2b48:	8f 5f       	subi	r24, 0xFF	; 255
    2b4a:	8a 83       	std	Y+2, r24	; 0x02
	}
	if (num < 0) {
		LCD_WRITECHAR('-');
		num = num * (-1);
	}
	while (num) {
    2b4c:	8b 89       	ldd	r24, Y+19	; 0x13
    2b4e:	9c 89       	ldd	r25, Y+20	; 0x14
    2b50:	ad 89       	ldd	r26, Y+21	; 0x15
    2b52:	be 89       	ldd	r27, Y+22	; 0x16
    2b54:	00 97       	sbiw	r24, 0x00	; 0
    2b56:	a1 05       	cpc	r26, r1
    2b58:	b1 05       	cpc	r27, r1
    2b5a:	51 f6       	brne	.-108    	; 0x2af0 <LCD_WRITENUMBER+0x6e>
		str[i] = (num % 10) + '0';
		num = num / 10;
		i++;
	}
	for (j = i - 1; j >= 0; j--) {
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	81 50       	subi	r24, 0x01	; 1
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	10 c0       	rjmp	.+32     	; 0x2b84 <LCD_WRITENUMBER+0x102>
		LCD_WRITECHAR(str[j]);
    2b64:	89 81       	ldd	r24, Y+1	; 0x01
    2b66:	28 2f       	mov	r18, r24
    2b68:	33 27       	eor	r19, r19
    2b6a:	27 fd       	sbrc	r18, 7
    2b6c:	30 95       	com	r19
    2b6e:	ce 01       	movw	r24, r28
    2b70:	03 96       	adiw	r24, 0x03	; 3
    2b72:	fc 01       	movw	r30, r24
    2b74:	e2 0f       	add	r30, r18
    2b76:	f3 1f       	adc	r31, r19
    2b78:	80 81       	ld	r24, Z
    2b7a:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>
	while (num) {
		str[i] = (num % 10) + '0';
		num = num / 10;
		i++;
	}
	for (j = i - 1; j >= 0; j--) {
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	81 50       	subi	r24, 0x01	; 1
    2b82:	89 83       	std	Y+1, r24	; 0x01
    2b84:	89 81       	ldd	r24, Y+1	; 0x01
    2b86:	88 23       	and	r24, r24
    2b88:	6c f7       	brge	.-38     	; 0x2b64 <LCD_WRITENUMBER+0xe2>
		LCD_WRITECHAR(str[j]);
	}
	
}
    2b8a:	66 96       	adiw	r28, 0x16	; 22
    2b8c:	0f b6       	in	r0, 0x3f	; 63
    2b8e:	f8 94       	cli
    2b90:	de bf       	out	0x3e, r29	; 62
    2b92:	0f be       	out	0x3f, r0	; 63
    2b94:	cd bf       	out	0x3d, r28	; 61
    2b96:	cf 91       	pop	r28
    2b98:	df 91       	pop	r29
    2b9a:	1f 91       	pop	r17
    2b9c:	0f 91       	pop	r16
    2b9e:	08 95       	ret

00002ba0 <LCD_WRITECHAR>:



void LCD_WRITECHAR(u8 character) {
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	0f 92       	push	r0
    2ba6:	cd b7       	in	r28, 0x3d	; 61
    2ba8:	de b7       	in	r29, 0x3e	; 62
    2baa:	89 83       	std	Y+1, r24	; 0x01

	LCD_WRITEDATA(character);
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <LCD_WRITEDATA>
}
    2bb2:	0f 90       	pop	r0
    2bb4:	cf 91       	pop	r28
    2bb6:	df 91       	pop	r29
    2bb8:	08 95       	ret

00002bba <LCD_WRITESTRING>:

void LCD_WRITESTRING(c8*string) {
    2bba:	df 93       	push	r29
    2bbc:	cf 93       	push	r28
    2bbe:	00 d0       	rcall	.+0      	; 0x2bc0 <LCD_WRITESTRING+0x6>
    2bc0:	0f 92       	push	r0
    2bc2:	cd b7       	in	r28, 0x3d	; 61
    2bc4:	de b7       	in	r29, 0x3e	; 62
    2bc6:	9b 83       	std	Y+3, r25	; 0x03
    2bc8:	8a 83       	std	Y+2, r24	; 0x02


	u8 i;
	for (i = 0; string[i]; i++) {
    2bca:	19 82       	std	Y+1, r1	; 0x01
    2bcc:	0e c0       	rjmp	.+28     	; 0x2bea <LCD_WRITESTRING+0x30>
		LCD_WRITECHAR(string[i]);
    2bce:	89 81       	ldd	r24, Y+1	; 0x01
    2bd0:	28 2f       	mov	r18, r24
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd8:	fc 01       	movw	r30, r24
    2bda:	e2 0f       	add	r30, r18
    2bdc:	f3 1f       	adc	r31, r19
    2bde:	80 81       	ld	r24, Z
    2be0:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>

void LCD_WRITESTRING(c8*string) {


	u8 i;
	for (i = 0; string[i]; i++) {
    2be4:	89 81       	ldd	r24, Y+1	; 0x01
    2be6:	8f 5f       	subi	r24, 0xFF	; 255
    2be8:	89 83       	std	Y+1, r24	; 0x01
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	28 2f       	mov	r18, r24
    2bee:	30 e0       	ldi	r19, 0x00	; 0
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	e2 0f       	add	r30, r18
    2bf8:	f3 1f       	adc	r31, r19
    2bfa:	80 81       	ld	r24, Z
    2bfc:	88 23       	and	r24, r24
    2bfe:	39 f7       	brne	.-50     	; 0x2bce <LCD_WRITESTRING+0x14>
		LCD_WRITECHAR(string[i]);
	}

}
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	cf 91       	pop	r28
    2c08:	df 91       	pop	r29
    2c0a:	08 95       	ret

00002c0c <LCD_WRITEBINARY>:

void LCD_WRITEBINARY(u8 number) {
    2c0c:	df 93       	push	r29
    2c0e:	cf 93       	push	r28
    2c10:	00 d0       	rcall	.+0      	; 0x2c12 <LCD_WRITEBINARY+0x6>
    2c12:	cd b7       	in	r28, 0x3d	; 61
    2c14:	de b7       	in	r29, 0x3e	; 62
    2c16:	8a 83       	std	Y+2, r24	; 0x02

	u8 i;
	LCD_WRITESTRING("0b");
    2c18:	80 e6       	ldi	r24, 0x60	; 96
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_WRITESTRING>
	for (i = sizeof(u8) * 8; i > 0; i--) {
    2c20:	88 e0       	ldi	r24, 0x08	; 8
    2c22:	89 83       	std	Y+1, r24	; 0x01
    2c24:	1b c0       	rjmp	.+54     	; 0x2c5c <LCD_WRITEBINARY+0x50>

		if (READ_BIT(number,i) == 1) {
    2c26:	8a 81       	ldd	r24, Y+2	; 0x02
    2c28:	28 2f       	mov	r18, r24
    2c2a:	30 e0       	ldi	r19, 0x00	; 0
    2c2c:	89 81       	ldd	r24, Y+1	; 0x01
    2c2e:	88 2f       	mov	r24, r24
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	a9 01       	movw	r20, r18
    2c34:	02 c0       	rjmp	.+4      	; 0x2c3a <LCD_WRITEBINARY+0x2e>
    2c36:	55 95       	asr	r21
    2c38:	47 95       	ror	r20
    2c3a:	8a 95       	dec	r24
    2c3c:	e2 f7       	brpl	.-8      	; 0x2c36 <LCD_WRITEBINARY+0x2a>
    2c3e:	ca 01       	movw	r24, r20
    2c40:	81 70       	andi	r24, 0x01	; 1
    2c42:	90 70       	andi	r25, 0x00	; 0
    2c44:	88 23       	and	r24, r24
    2c46:	21 f0       	breq	.+8      	; 0x2c50 <LCD_WRITEBINARY+0x44>
			LCD_WRITECHAR('1');
    2c48:	81 e3       	ldi	r24, 0x31	; 49
    2c4a:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>
    2c4e:	03 c0       	rjmp	.+6      	; 0x2c56 <LCD_WRITEBINARY+0x4a>
		} else {
			LCD_WRITECHAR('0');
    2c50:	80 e3       	ldi	r24, 0x30	; 48
    2c52:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>

void LCD_WRITEBINARY(u8 number) {

	u8 i;
	LCD_WRITESTRING("0b");
	for (i = sizeof(u8) * 8; i > 0; i--) {
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	81 50       	subi	r24, 0x01	; 1
    2c5a:	89 83       	std	Y+1, r24	; 0x01
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
    2c5e:	88 23       	and	r24, r24
    2c60:	11 f7       	brne	.-60     	; 0x2c26 <LCD_WRITEBINARY+0x1a>
			LCD_WRITECHAR('1');
		} else {
			LCD_WRITECHAR('0');
		}
	}
}
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <private>:

static void private(u8 num) {
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	00 d0       	rcall	.+0      	; 0x2c72 <private+0x6>
    2c72:	0f 92       	push	r0
    2c74:	cd b7       	in	r28, 0x3d	; 61
    2c76:	de b7       	in	r29, 0x3e	; 62
    2c78:	89 83       	std	Y+1, r24	; 0x01
	switch (num) {
    2c7a:	89 81       	ldd	r24, Y+1	; 0x01
    2c7c:	28 2f       	mov	r18, r24
    2c7e:	30 e0       	ldi	r19, 0x00	; 0
    2c80:	3b 83       	std	Y+3, r19	; 0x03
    2c82:	2a 83       	std	Y+2, r18	; 0x02
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	9b 81       	ldd	r25, Y+3	; 0x03
    2c88:	8c 30       	cpi	r24, 0x0C	; 12
    2c8a:	91 05       	cpc	r25, r1
    2c8c:	41 f1       	breq	.+80     	; 0x2cde <private+0x72>
    2c8e:	2a 81       	ldd	r18, Y+2	; 0x02
    2c90:	3b 81       	ldd	r19, Y+3	; 0x03
    2c92:	2d 30       	cpi	r18, 0x0D	; 13
    2c94:	31 05       	cpc	r19, r1
    2c96:	5c f4       	brge	.+22     	; 0x2cae <private+0x42>
    2c98:	8a 81       	ldd	r24, Y+2	; 0x02
    2c9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c9c:	8a 30       	cpi	r24, 0x0A	; 10
    2c9e:	91 05       	cpc	r25, r1
    2ca0:	b1 f0       	breq	.+44     	; 0x2cce <private+0x62>
    2ca2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ca4:	3b 81       	ldd	r19, Y+3	; 0x03
    2ca6:	2b 30       	cpi	r18, 0x0B	; 11
    2ca8:	31 05       	cpc	r19, r1
    2caa:	a9 f0       	breq	.+42     	; 0x2cd6 <private+0x6a>
    2cac:	28 c0       	rjmp	.+80     	; 0x2cfe <private+0x92>
    2cae:	8a 81       	ldd	r24, Y+2	; 0x02
    2cb0:	9b 81       	ldd	r25, Y+3	; 0x03
    2cb2:	8e 30       	cpi	r24, 0x0E	; 14
    2cb4:	91 05       	cpc	r25, r1
    2cb6:	d9 f0       	breq	.+54     	; 0x2cee <private+0x82>
    2cb8:	2a 81       	ldd	r18, Y+2	; 0x02
    2cba:	3b 81       	ldd	r19, Y+3	; 0x03
    2cbc:	2e 30       	cpi	r18, 0x0E	; 14
    2cbe:	31 05       	cpc	r19, r1
    2cc0:	94 f0       	brlt	.+36     	; 0x2ce6 <private+0x7a>
    2cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc6:	8f 30       	cpi	r24, 0x0F	; 15
    2cc8:	91 05       	cpc	r25, r1
    2cca:	a9 f0       	breq	.+42     	; 0x2cf6 <private+0x8a>
    2ccc:	18 c0       	rjmp	.+48     	; 0x2cfe <private+0x92>
	case 10:
		LCD_WRITECHAR('A');
    2cce:	81 e4       	ldi	r24, 0x41	; 65
    2cd0:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>
    2cd4:	1d c0       	rjmp	.+58     	; 0x2d10 <private+0xa4>
		break;
	case 11:
		LCD_WRITECHAR('B');
    2cd6:	82 e4       	ldi	r24, 0x42	; 66
    2cd8:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>
    2cdc:	19 c0       	rjmp	.+50     	; 0x2d10 <private+0xa4>
		break;
	case 12:
		LCD_WRITECHAR('C');
    2cde:	83 e4       	ldi	r24, 0x43	; 67
    2ce0:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>
    2ce4:	15 c0       	rjmp	.+42     	; 0x2d10 <private+0xa4>
		break;
	case 13:
		LCD_WRITECHAR('D');
    2ce6:	84 e4       	ldi	r24, 0x44	; 68
    2ce8:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>
    2cec:	11 c0       	rjmp	.+34     	; 0x2d10 <private+0xa4>
		break;
	case 14:
		LCD_WRITECHAR('E');
    2cee:	85 e4       	ldi	r24, 0x45	; 69
    2cf0:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>
    2cf4:	0d c0       	rjmp	.+26     	; 0x2d10 <private+0xa4>
		break;
	case 15:
		LCD_WRITECHAR('F');
    2cf6:	86 e4       	ldi	r24, 0x46	; 70
    2cf8:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>
    2cfc:	09 c0       	rjmp	.+18     	; 0x2d10 <private+0xa4>
		break;
	default:
		LCD_WRITENUMBER(num);
    2cfe:	89 81       	ldd	r24, Y+1	; 0x01
    2d00:	88 2f       	mov	r24, r24
    2d02:	90 e0       	ldi	r25, 0x00	; 0
    2d04:	a0 e0       	ldi	r26, 0x00	; 0
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	bc 01       	movw	r22, r24
    2d0a:	cd 01       	movw	r24, r26
    2d0c:	0e 94 41 15 	call	0x2a82	; 0x2a82 <LCD_WRITENUMBER>
		break;
	}
}
    2d10:	0f 90       	pop	r0
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	cf 91       	pop	r28
    2d18:	df 91       	pop	r29
    2d1a:	08 95       	ret

00002d1c <LCD_WRITEHEX>:

void LCD_WRITEHEX(u8 number) {
    2d1c:	df 93       	push	r29
    2d1e:	cf 93       	push	r28
    2d20:	cd b7       	in	r28, 0x3d	; 61
    2d22:	de b7       	in	r29, 0x3e	; 62
    2d24:	61 97       	sbiw	r28, 0x11	; 17
    2d26:	0f b6       	in	r0, 0x3f	; 63
    2d28:	f8 94       	cli
    2d2a:	de bf       	out	0x3e, r29	; 62
    2d2c:	0f be       	out	0x3f, r0	; 63
    2d2e:	cd bf       	out	0x3d, r28	; 61
    2d30:	89 8b       	std	Y+17, r24	; 0x11

	LCD_WRITESTRING("0x");
    2d32:	83 e6       	ldi	r24, 0x63	; 99
    2d34:	90 e0       	ldi	r25, 0x00	; 0
    2d36:	0e 94 dd 15 	call	0x2bba	; 0x2bba <LCD_WRITESTRING>
	u8 i, j = 0, sum = 0, res = 0;
    2d3a:	1b 82       	std	Y+3, r1	; 0x03
    2d3c:	1a 82       	std	Y+2, r1	; 0x02
    2d3e:	19 82       	std	Y+1, r1	; 0x01
	u8 str_iterate[4] = { 1, 2, 4, 8 };
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	8d 83       	std	Y+5, r24	; 0x05
    2d44:	82 e0       	ldi	r24, 0x02	; 2
    2d46:	8e 83       	std	Y+6, r24	; 0x06
    2d48:	84 e0       	ldi	r24, 0x04	; 4
    2d4a:	8f 83       	std	Y+7, r24	; 0x07
    2d4c:	88 e0       	ldi	r24, 0x08	; 8
    2d4e:	88 87       	std	Y+8, r24	; 0x08
	u8 str[8];
	for (i = 0; i < 8; i++) {
    2d50:	1c 82       	std	Y+4, r1	; 0x04
    2d52:	1b c0       	rjmp	.+54     	; 0x2d8a <LCD_WRITEHEX+0x6e>
		str[i] = READ_BIT(number, i);
    2d54:	8c 81       	ldd	r24, Y+4	; 0x04
    2d56:	48 2f       	mov	r20, r24
    2d58:	50 e0       	ldi	r21, 0x00	; 0
    2d5a:	89 89       	ldd	r24, Y+17	; 0x11
    2d5c:	28 2f       	mov	r18, r24
    2d5e:	30 e0       	ldi	r19, 0x00	; 0
    2d60:	8c 81       	ldd	r24, Y+4	; 0x04
    2d62:	88 2f       	mov	r24, r24
    2d64:	90 e0       	ldi	r25, 0x00	; 0
    2d66:	b9 01       	movw	r22, r18
    2d68:	02 c0       	rjmp	.+4      	; 0x2d6e <LCD_WRITEHEX+0x52>
    2d6a:	75 95       	asr	r23
    2d6c:	67 95       	ror	r22
    2d6e:	8a 95       	dec	r24
    2d70:	e2 f7       	brpl	.-8      	; 0x2d6a <LCD_WRITEHEX+0x4e>
    2d72:	cb 01       	movw	r24, r22
    2d74:	28 2f       	mov	r18, r24
    2d76:	21 70       	andi	r18, 0x01	; 1
    2d78:	ce 01       	movw	r24, r28
    2d7a:	09 96       	adiw	r24, 0x09	; 9
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	e4 0f       	add	r30, r20
    2d80:	f5 1f       	adc	r31, r21
    2d82:	20 83       	st	Z, r18

	LCD_WRITESTRING("0x");
	u8 i, j = 0, sum = 0, res = 0;
	u8 str_iterate[4] = { 1, 2, 4, 8 };
	u8 str[8];
	for (i = 0; i < 8; i++) {
    2d84:	8c 81       	ldd	r24, Y+4	; 0x04
    2d86:	8f 5f       	subi	r24, 0xFF	; 255
    2d88:	8c 83       	std	Y+4, r24	; 0x04
    2d8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8c:	88 30       	cpi	r24, 0x08	; 8
    2d8e:	10 f3       	brcs	.-60     	; 0x2d54 <LCD_WRITEHEX+0x38>
		str[i] = READ_BIT(number, i);
	}

	for (i = 4; i < 8; i++) {
    2d90:	84 e0       	ldi	r24, 0x04	; 4
    2d92:	8c 83       	std	Y+4, r24	; 0x04
    2d94:	29 c0       	rjmp	.+82     	; 0x2de8 <LCD_WRITEHEX+0xcc>
		if (str[i] == 1) {
    2d96:	8c 81       	ldd	r24, Y+4	; 0x04
    2d98:	28 2f       	mov	r18, r24
    2d9a:	30 e0       	ldi	r19, 0x00	; 0
    2d9c:	ce 01       	movw	r24, r28
    2d9e:	09 96       	adiw	r24, 0x09	; 9
    2da0:	fc 01       	movw	r30, r24
    2da2:	e2 0f       	add	r30, r18
    2da4:	f3 1f       	adc	r31, r19
    2da6:	80 81       	ld	r24, Z
    2da8:	81 30       	cpi	r24, 0x01	; 1
    2daa:	c1 f4       	brne	.+48     	; 0x2ddc <LCD_WRITEHEX+0xc0>
			res = res + (str[i] * str_iterate[j]);
    2dac:	8c 81       	ldd	r24, Y+4	; 0x04
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	ce 01       	movw	r24, r28
    2db4:	09 96       	adiw	r24, 0x09	; 9
    2db6:	fc 01       	movw	r30, r24
    2db8:	e2 0f       	add	r30, r18
    2dba:	f3 1f       	adc	r31, r19
    2dbc:	40 81       	ld	r20, Z
    2dbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2dc0:	28 2f       	mov	r18, r24
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	05 96       	adiw	r24, 0x05	; 5
    2dc8:	fc 01       	movw	r30, r24
    2dca:	e2 0f       	add	r30, r18
    2dcc:	f3 1f       	adc	r31, r19
    2dce:	80 81       	ld	r24, Z
    2dd0:	48 9f       	mul	r20, r24
    2dd2:	90 2d       	mov	r25, r0
    2dd4:	11 24       	eor	r1, r1
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	89 0f       	add	r24, r25
    2dda:	89 83       	std	Y+1, r24	; 0x01
		}
		j++;
    2ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dde:	8f 5f       	subi	r24, 0xFF	; 255
    2de0:	8b 83       	std	Y+3, r24	; 0x03
	u8 str[8];
	for (i = 0; i < 8; i++) {
		str[i] = READ_BIT(number, i);
	}

	for (i = 4; i < 8; i++) {
    2de2:	8c 81       	ldd	r24, Y+4	; 0x04
    2de4:	8f 5f       	subi	r24, 0xFF	; 255
    2de6:	8c 83       	std	Y+4, r24	; 0x04
    2de8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dea:	88 30       	cpi	r24, 0x08	; 8
    2dec:	a0 f2       	brcs	.-88     	; 0x2d96 <LCD_WRITEHEX+0x7a>
		if (str[i] == 1) {
			res = res + (str[i] * str_iterate[j]);
		}
		j++;
	}
private(res);
    2dee:	89 81       	ldd	r24, Y+1	; 0x01
    2df0:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <private>
	j = 0;
    2df4:	1b 82       	std	Y+3, r1	; 0x03

	for (i = 0; i < 4; i++) {
    2df6:	1c 82       	std	Y+4, r1	; 0x04
    2df8:	29 c0       	rjmp	.+82     	; 0x2e4c <LCD_WRITEHEX+0x130>
		if (str[i] == 1) {
    2dfa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dfc:	28 2f       	mov	r18, r24
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	ce 01       	movw	r24, r28
    2e02:	09 96       	adiw	r24, 0x09	; 9
    2e04:	fc 01       	movw	r30, r24
    2e06:	e2 0f       	add	r30, r18
    2e08:	f3 1f       	adc	r31, r19
    2e0a:	80 81       	ld	r24, Z
    2e0c:	81 30       	cpi	r24, 0x01	; 1
    2e0e:	c1 f4       	brne	.+48     	; 0x2e40 <LCD_WRITEHEX+0x124>
			sum = sum + (str[i] * str_iterate[j]);
    2e10:	8c 81       	ldd	r24, Y+4	; 0x04
    2e12:	28 2f       	mov	r18, r24
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	ce 01       	movw	r24, r28
    2e18:	09 96       	adiw	r24, 0x09	; 9
    2e1a:	fc 01       	movw	r30, r24
    2e1c:	e2 0f       	add	r30, r18
    2e1e:	f3 1f       	adc	r31, r19
    2e20:	40 81       	ld	r20, Z
    2e22:	8b 81       	ldd	r24, Y+3	; 0x03
    2e24:	28 2f       	mov	r18, r24
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	ce 01       	movw	r24, r28
    2e2a:	05 96       	adiw	r24, 0x05	; 5
    2e2c:	fc 01       	movw	r30, r24
    2e2e:	e2 0f       	add	r30, r18
    2e30:	f3 1f       	adc	r31, r19
    2e32:	80 81       	ld	r24, Z
    2e34:	48 9f       	mul	r20, r24
    2e36:	90 2d       	mov	r25, r0
    2e38:	11 24       	eor	r1, r1
    2e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3c:	89 0f       	add	r24, r25
    2e3e:	8a 83       	std	Y+2, r24	; 0x02
		}
		j++;
    2e40:	8b 81       	ldd	r24, Y+3	; 0x03
    2e42:	8f 5f       	subi	r24, 0xFF	; 255
    2e44:	8b 83       	std	Y+3, r24	; 0x03
		j++;
	}
private(res);
	j = 0;

	for (i = 0; i < 4; i++) {
    2e46:	8c 81       	ldd	r24, Y+4	; 0x04
    2e48:	8f 5f       	subi	r24, 0xFF	; 255
    2e4a:	8c 83       	std	Y+4, r24	; 0x04
    2e4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4e:	84 30       	cpi	r24, 0x04	; 4
    2e50:	a0 f2       	brcs	.-88     	; 0x2dfa <LCD_WRITEHEX+0xde>
		if (str[i] == 1) {
			sum = sum + (str[i] * str_iterate[j]);
		}
		j++;
	}
private(sum);
    2e52:	8a 81       	ldd	r24, Y+2	; 0x02
    2e54:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <private>

}
    2e58:	61 96       	adiw	r28, 0x11	; 17
    2e5a:	0f b6       	in	r0, 0x3f	; 63
    2e5c:	f8 94       	cli
    2e5e:	de bf       	out	0x3e, r29	; 62
    2e60:	0f be       	out	0x3f, r0	; 63
    2e62:	cd bf       	out	0x3d, r28	; 61
    2e64:	cf 91       	pop	r28
    2e66:	df 91       	pop	r29
    2e68:	08 95       	ret

00002e6a <LCD_SETCURSOR>:

void LCD_SETCURSOR(u8 line, u8 cell) {
    2e6a:	df 93       	push	r29
    2e6c:	cf 93       	push	r28
    2e6e:	00 d0       	rcall	.+0      	; 0x2e70 <LCD_SETCURSOR+0x6>
    2e70:	cd b7       	in	r28, 0x3d	; 61
    2e72:	de b7       	in	r29, 0x3e	; 62
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	6a 83       	std	Y+2, r22	; 0x02
		address = cell + 0x40;
	}
	 LCD_WRITEINSTRACTION(address + 128);*/

	/* or */
	if (line == FIRST_LINE) {
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	88 23       	and	r24, r24
    2e7c:	29 f4       	brne	.+10     	; 0x2e88 <LCD_SETCURSOR+0x1e>
		LCD_WRITEINSTRACTION(cell | 128); // -> cell + 128
    2e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e80:	80 68       	ori	r24, 0x80	; 128
    2e82:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_WRITEINSTRACTION>
    2e86:	07 c0       	rjmp	.+14     	; 0x2e96 <LCD_SETCURSOR+0x2c>
	} else if (line == SECOND_LINE) {
    2e88:	89 81       	ldd	r24, Y+1	; 0x01
    2e8a:	81 30       	cpi	r24, 0x01	; 1
    2e8c:	21 f4       	brne	.+8      	; 0x2e96 <LCD_SETCURSOR+0x2c>
		LCD_WRITEINSTRACTION(0x40 | cell | 128);
    2e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e90:	80 6c       	ori	r24, 0xC0	; 192
    2e92:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_WRITEINSTRACTION>
}


}
    2e96:	0f 90       	pop	r0
    2e98:	0f 90       	pop	r0
    2e9a:	cf 91       	pop	r28
    2e9c:	df 91       	pop	r29
    2e9e:	08 95       	ret

00002ea0 <LCD_WRITENUMBER_4DIGITE>:

void LCD_WRITENUMBER_4DIGITE(u16 number) {
    2ea0:	df 93       	push	r29
    2ea2:	cf 93       	push	r28
    2ea4:	cd b7       	in	r28, 0x3d	; 61
    2ea6:	de b7       	in	r29, 0x3e	; 62
    2ea8:	28 97       	sbiw	r28, 0x08	; 8
    2eaa:	0f b6       	in	r0, 0x3f	; 63
    2eac:	f8 94       	cli
    2eae:	de bf       	out	0x3e, r29	; 62
    2eb0:	0f be       	out	0x3f, r0	; 63
    2eb2:	cd bf       	out	0x3d, r28	; 61
    2eb4:	98 87       	std	Y+8, r25	; 0x08
    2eb6:	8f 83       	std	Y+7, r24	; 0x07

	u8 i = 0, j = 0;
    2eb8:	1a 82       	std	Y+2, r1	; 0x02
    2eba:	19 82       	std	Y+1, r1	; 0x01
	u8 str[4];

	if (number <= 9999) {
    2ebc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ebe:	98 85       	ldd	r25, Y+8	; 0x08
    2ec0:	27 e2       	ldi	r18, 0x27	; 39
    2ec2:	80 31       	cpi	r24, 0x10	; 16
    2ec4:	92 07       	cpc	r25, r18
    2ec6:	48 f5       	brcc	.+82     	; 0x2f1a <LCD_WRITENUMBER_4DIGITE+0x7a>
		for (i = 0; i < 4; i++) {
    2ec8:	1a 82       	std	Y+2, r1	; 0x02
    2eca:	23 c0       	rjmp	.+70     	; 0x2f12 <LCD_WRITENUMBER_4DIGITE+0x72>
			str[3 - i] = number % 10 + '0';
    2ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ece:	28 2f       	mov	r18, r24
    2ed0:	30 e0       	ldi	r19, 0x00	; 0
    2ed2:	83 e0       	ldi	r24, 0x03	; 3
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	fc 01       	movw	r30, r24
    2ed8:	e2 1b       	sub	r30, r18
    2eda:	f3 0b       	sbc	r31, r19
    2edc:	8f 81       	ldd	r24, Y+7	; 0x07
    2ede:	98 85       	ldd	r25, Y+8	; 0x08
    2ee0:	2a e0       	ldi	r18, 0x0A	; 10
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	b9 01       	movw	r22, r18
    2ee6:	0e 94 5f 18 	call	0x30be	; 0x30be <__udivmodhi4>
    2eea:	28 2f       	mov	r18, r24
    2eec:	20 5d       	subi	r18, 0xD0	; 208
    2eee:	ce 01       	movw	r24, r28
    2ef0:	03 96       	adiw	r24, 0x03	; 3
    2ef2:	e8 0f       	add	r30, r24
    2ef4:	f9 1f       	adc	r31, r25
    2ef6:	20 83       	st	Z, r18
			number = number / 10;
    2ef8:	8f 81       	ldd	r24, Y+7	; 0x07
    2efa:	98 85       	ldd	r25, Y+8	; 0x08
    2efc:	2a e0       	ldi	r18, 0x0A	; 10
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	b9 01       	movw	r22, r18
    2f02:	0e 94 5f 18 	call	0x30be	; 0x30be <__udivmodhi4>
    2f06:	cb 01       	movw	r24, r22
    2f08:	98 87       	std	Y+8, r25	; 0x08
    2f0a:	8f 83       	std	Y+7, r24	; 0x07

	u8 i = 0, j = 0;
	u8 str[4];

	if (number <= 9999) {
		for (i = 0; i < 4; i++) {
    2f0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f0e:	8f 5f       	subi	r24, 0xFF	; 255
    2f10:	8a 83       	std	Y+2, r24	; 0x02
    2f12:	8a 81       	ldd	r24, Y+2	; 0x02
    2f14:	84 30       	cpi	r24, 0x04	; 4
    2f16:	d0 f2       	brcs	.-76     	; 0x2ecc <LCD_WRITENUMBER_4DIGITE+0x2c>
    2f18:	32 c0       	rjmp	.+100    	; 0x2f7e <LCD_WRITENUMBER_4DIGITE+0xde>
			str[3 - i] = number % 10 + '0';
			number = number / 10;
		}
	}
	else {
		number = number / 10;
    2f1a:	8f 81       	ldd	r24, Y+7	; 0x07
    2f1c:	98 85       	ldd	r25, Y+8	; 0x08
    2f1e:	2a e0       	ldi	r18, 0x0A	; 10
    2f20:	30 e0       	ldi	r19, 0x00	; 0
    2f22:	b9 01       	movw	r22, r18
    2f24:	0e 94 5f 18 	call	0x30be	; 0x30be <__udivmodhi4>
    2f28:	cb 01       	movw	r24, r22
    2f2a:	98 87       	std	Y+8, r25	; 0x08
    2f2c:	8f 83       	std	Y+7, r24	; 0x07
		for (i = 0; i < 4; i++) {
    2f2e:	1a 82       	std	Y+2, r1	; 0x02
    2f30:	23 c0       	rjmp	.+70     	; 0x2f78 <LCD_WRITENUMBER_4DIGITE+0xd8>
			str[3 - i] = number % 10 + '0';
    2f32:	8a 81       	ldd	r24, Y+2	; 0x02
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	83 e0       	ldi	r24, 0x03	; 3
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	fc 01       	movw	r30, r24
    2f3e:	e2 1b       	sub	r30, r18
    2f40:	f3 0b       	sbc	r31, r19
    2f42:	8f 81       	ldd	r24, Y+7	; 0x07
    2f44:	98 85       	ldd	r25, Y+8	; 0x08
    2f46:	2a e0       	ldi	r18, 0x0A	; 10
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	b9 01       	movw	r22, r18
    2f4c:	0e 94 5f 18 	call	0x30be	; 0x30be <__udivmodhi4>
    2f50:	28 2f       	mov	r18, r24
    2f52:	20 5d       	subi	r18, 0xD0	; 208
    2f54:	ce 01       	movw	r24, r28
    2f56:	03 96       	adiw	r24, 0x03	; 3
    2f58:	e8 0f       	add	r30, r24
    2f5a:	f9 1f       	adc	r31, r25
    2f5c:	20 83       	st	Z, r18
			number = number / 10;
    2f5e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f60:	98 85       	ldd	r25, Y+8	; 0x08
    2f62:	2a e0       	ldi	r18, 0x0A	; 10
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	b9 01       	movw	r22, r18
    2f68:	0e 94 5f 18 	call	0x30be	; 0x30be <__udivmodhi4>
    2f6c:	cb 01       	movw	r24, r22
    2f6e:	98 87       	std	Y+8, r25	; 0x08
    2f70:	8f 83       	std	Y+7, r24	; 0x07
			number = number / 10;
		}
	}
	else {
		number = number / 10;
		for (i = 0; i < 4; i++) {
    2f72:	8a 81       	ldd	r24, Y+2	; 0x02
    2f74:	8f 5f       	subi	r24, 0xFF	; 255
    2f76:	8a 83       	std	Y+2, r24	; 0x02
    2f78:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7a:	84 30       	cpi	r24, 0x04	; 4
    2f7c:	d0 f2       	brcs	.-76     	; 0x2f32 <LCD_WRITENUMBER_4DIGITE+0x92>
			str[3 - i] = number % 10 + '0';
			number = number / 10;
		}
	}
	for (j = 0; j < 4; j++) {
    2f7e:	19 82       	std	Y+1, r1	; 0x01
    2f80:	0e c0       	rjmp	.+28     	; 0x2f9e <LCD_WRITENUMBER_4DIGITE+0xfe>
		LCD_WRITECHAR(str[j]);
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	28 2f       	mov	r18, r24
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	ce 01       	movw	r24, r28
    2f8a:	03 96       	adiw	r24, 0x03	; 3
    2f8c:	fc 01       	movw	r30, r24
    2f8e:	e2 0f       	add	r30, r18
    2f90:	f3 1f       	adc	r31, r19
    2f92:	80 81       	ld	r24, Z
    2f94:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>
		for (i = 0; i < 4; i++) {
			str[3 - i] = number % 10 + '0';
			number = number / 10;
		}
	}
	for (j = 0; j < 4; j++) {
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	8f 5f       	subi	r24, 0xFF	; 255
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	84 30       	cpi	r24, 0x04	; 4
    2fa2:	78 f3       	brcs	.-34     	; 0x2f82 <LCD_WRITENUMBER_4DIGITE+0xe2>
		LCD_WRITECHAR(str[j]);
	}

}
    2fa4:	28 96       	adiw	r28, 0x08	; 8
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	f8 94       	cli
    2faa:	de bf       	out	0x3e, r29	; 62
    2fac:	0f be       	out	0x3f, r0	; 63
    2fae:	cd bf       	out	0x3d, r28	; 61
    2fb0:	cf 91       	pop	r28
    2fb2:	df 91       	pop	r29
    2fb4:	08 95       	ret

00002fb6 <LCD_CLEARPOSITION>:

void LCD_CLEARPOSITION(u8 line, u8 cell, u8 numofcells) {
    2fb6:	df 93       	push	r29
    2fb8:	cf 93       	push	r28
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <LCD_CLEARPOSITION+0x6>
    2fbc:	00 d0       	rcall	.+0      	; 0x2fbe <LCD_CLEARPOSITION+0x8>
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	8a 83       	std	Y+2, r24	; 0x02
    2fc4:	6b 83       	std	Y+3, r22	; 0x03
    2fc6:	4c 83       	std	Y+4, r20	; 0x04
	LCD_SETCURSOR(line, cell);
    2fc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fca:	6b 81       	ldd	r22, Y+3	; 0x03
    2fcc:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_SETCURSOR>
	for (u8 i = 0; i < numofcells; i++) {
    2fd0:	19 82       	std	Y+1, r1	; 0x01
    2fd2:	06 c0       	rjmp	.+12     	; 0x2fe0 <LCD_CLEARPOSITION+0x2a>
		LCD_WRITECHAR(' ');
    2fd4:	80 e2       	ldi	r24, 0x20	; 32
    2fd6:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <LCD_WRITECHAR>

}

void LCD_CLEARPOSITION(u8 line, u8 cell, u8 numofcells) {
	LCD_SETCURSOR(line, cell);
	for (u8 i = 0; i < numofcells; i++) {
    2fda:	89 81       	ldd	r24, Y+1	; 0x01
    2fdc:	8f 5f       	subi	r24, 0xFF	; 255
    2fde:	89 83       	std	Y+1, r24	; 0x01
    2fe0:	99 81       	ldd	r25, Y+1	; 0x01
    2fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe4:	98 17       	cp	r25, r24
    2fe6:	b0 f3       	brcs	.-20     	; 0x2fd4 <LCD_CLEARPOSITION+0x1e>
		LCD_WRITECHAR(' ');
	}
	
}
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	cf 91       	pop	r28
    2ff2:	df 91       	pop	r29
    2ff4:	08 95       	ret

00002ff6 <LCD_WRITEPATTERN>:

// writing inside CGRAM -> have to had address of the position i want to write in
void LCD_WRITEPATTERN(u8* pattern, u8 blocknumber, u8 line, u8 cell) {
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    2ffe:	27 97       	sbiw	r28, 0x07	; 7
    3000:	0f b6       	in	r0, 0x3f	; 63
    3002:	f8 94       	cli
    3004:	de bf       	out	0x3e, r29	; 62
    3006:	0f be       	out	0x3f, r0	; 63
    3008:	cd bf       	out	0x3d, r28	; 61
    300a:	9c 83       	std	Y+4, r25	; 0x04
    300c:	8b 83       	std	Y+3, r24	; 0x03
    300e:	6d 83       	std	Y+5, r22	; 0x05
    3010:	4e 83       	std	Y+6, r20	; 0x06
    3012:	2f 83       	std	Y+7, r18	; 0x07


	// block number between 1 to 8

	u8 i, address = 0;
    3014:	19 82       	std	Y+1, r1	; 0x01

	address = blocknumber * 8; // position to not overwrite on the same position
    3016:	8d 81       	ldd	r24, Y+5	; 0x05
    3018:	88 2f       	mov	r24, r24
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	88 0f       	add	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	88 0f       	add	r24, r24
    3026:	99 1f       	adc	r25, r25
    3028:	89 83       	std	Y+1, r24	; 0x01

	LCD_WRITEINSTRACTION(address + 64);
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	80 5c       	subi	r24, 0xC0	; 192
    302e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <LCD_WRITEINSTRACTION>

	for (i = 0; i < 8; i++) {
    3032:	1a 82       	std	Y+2, r1	; 0x02
    3034:	0e c0       	rjmp	.+28     	; 0x3052 <LCD_WRITEPATTERN+0x5c>

		LCD_WRITEDATA(pattern[i]);
    3036:	8a 81       	ldd	r24, Y+2	; 0x02
    3038:	28 2f       	mov	r18, r24
    303a:	30 e0       	ldi	r19, 0x00	; 0
    303c:	8b 81       	ldd	r24, Y+3	; 0x03
    303e:	9c 81       	ldd	r25, Y+4	; 0x04
    3040:	fc 01       	movw	r30, r24
    3042:	e2 0f       	add	r30, r18
    3044:	f3 1f       	adc	r31, r19
    3046:	80 81       	ld	r24, Z
    3048:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <LCD_WRITEDATA>

	address = blocknumber * 8; // position to not overwrite on the same position

	LCD_WRITEINSTRACTION(address + 64);

	for (i = 0; i < 8; i++) {
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	8f 5f       	subi	r24, 0xFF	; 255
    3050:	8a 83       	std	Y+2, r24	; 0x02
    3052:	8a 81       	ldd	r24, Y+2	; 0x02
    3054:	88 30       	cpi	r24, 0x08	; 8
    3056:	78 f3       	brcs	.-34     	; 0x3036 <LCD_WRITEPATTERN+0x40>

		LCD_WRITEDATA(pattern[i]);
	}

	LCD_SETCURSOR(line, cell);
    3058:	8e 81       	ldd	r24, Y+6	; 0x06
    305a:	6f 81       	ldd	r22, Y+7	; 0x07
    305c:	0e 94 35 17 	call	0x2e6a	; 0x2e6a <LCD_SETCURSOR>

	LCD_WRITEDATA(blocknumber);
    3060:	8d 81       	ldd	r24, Y+5	; 0x05
    3062:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <LCD_WRITEDATA>
}
    3066:	27 96       	adiw	r28, 0x07	; 7
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	de bf       	out	0x3e, r29	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	cd bf       	out	0x3d, r28	; 61
    3072:	cf 91       	pop	r28
    3074:	df 91       	pop	r29
    3076:	08 95       	ret

00003078 <main>:

Time_t sttime = {
		22,12,25,FORMATE_24
};

int main() {
    3078:	df 93       	push	r29
    307a:	cf 93       	push	r28
    307c:	cd b7       	in	r28, 0x3d	; 61
    307e:	de b7       	in	r29, 0x3e	; 62
	//UART_Init();




	RTC_Init();
    3080:	0e 94 df 0d 	call	0x1bbe	; 0x1bbe <RTC_Init>
	RTC_SetTime(&sttime);
    3084:	83 e7       	ldi	r24, 0x73	; 115
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <RTC_SetTime>
	RTC_SetDate(&stdate);
    308c:	8e e6       	ldi	r24, 0x6E	; 110
    308e:	90 e0       	ldi	r25, 0x00	; 0
    3090:	0e 94 b1 0e 	call	0x1d62	; 0x1d62 <RTC_SetDate>

	RTC_GetTime(&sttime);
    3094:	83 e7       	ldi	r24, 0x73	; 115
    3096:	90 e0       	ldi	r25, 0x00	; 0
    3098:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <RTC_GetTime>
	RTC_GetDate(&stdate);
    309c:	8e e6       	ldi	r24, 0x6E	; 110
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0e 94 f3 0e 	call	0x1de6	; 0x1de6 <RTC_GetDate>
    30a4:	ff cf       	rjmp	.-2      	; 0x30a4 <main+0x2c>

000030a6 <__udivmodqi4>:
    30a6:	99 1b       	sub	r25, r25
    30a8:	79 e0       	ldi	r23, 0x09	; 9
    30aa:	04 c0       	rjmp	.+8      	; 0x30b4 <__udivmodqi4_ep>

000030ac <__udivmodqi4_loop>:
    30ac:	99 1f       	adc	r25, r25
    30ae:	96 17       	cp	r25, r22
    30b0:	08 f0       	brcs	.+2      	; 0x30b4 <__udivmodqi4_ep>
    30b2:	96 1b       	sub	r25, r22

000030b4 <__udivmodqi4_ep>:
    30b4:	88 1f       	adc	r24, r24
    30b6:	7a 95       	dec	r23
    30b8:	c9 f7       	brne	.-14     	; 0x30ac <__udivmodqi4_loop>
    30ba:	80 95       	com	r24
    30bc:	08 95       	ret

000030be <__udivmodhi4>:
    30be:	aa 1b       	sub	r26, r26
    30c0:	bb 1b       	sub	r27, r27
    30c2:	51 e1       	ldi	r21, 0x11	; 17
    30c4:	07 c0       	rjmp	.+14     	; 0x30d4 <__udivmodhi4_ep>

000030c6 <__udivmodhi4_loop>:
    30c6:	aa 1f       	adc	r26, r26
    30c8:	bb 1f       	adc	r27, r27
    30ca:	a6 17       	cp	r26, r22
    30cc:	b7 07       	cpc	r27, r23
    30ce:	10 f0       	brcs	.+4      	; 0x30d4 <__udivmodhi4_ep>
    30d0:	a6 1b       	sub	r26, r22
    30d2:	b7 0b       	sbc	r27, r23

000030d4 <__udivmodhi4_ep>:
    30d4:	88 1f       	adc	r24, r24
    30d6:	99 1f       	adc	r25, r25
    30d8:	5a 95       	dec	r21
    30da:	a9 f7       	brne	.-22     	; 0x30c6 <__udivmodhi4_loop>
    30dc:	80 95       	com	r24
    30de:	90 95       	com	r25
    30e0:	bc 01       	movw	r22, r24
    30e2:	cd 01       	movw	r24, r26
    30e4:	08 95       	ret

000030e6 <__divmodsi4>:
    30e6:	97 fb       	bst	r25, 7
    30e8:	09 2e       	mov	r0, r25
    30ea:	05 26       	eor	r0, r21
    30ec:	0e d0       	rcall	.+28     	; 0x310a <__divmodsi4_neg1>
    30ee:	57 fd       	sbrc	r21, 7
    30f0:	04 d0       	rcall	.+8      	; 0x30fa <__divmodsi4_neg2>
    30f2:	14 d0       	rcall	.+40     	; 0x311c <__udivmodsi4>
    30f4:	0a d0       	rcall	.+20     	; 0x310a <__divmodsi4_neg1>
    30f6:	00 1c       	adc	r0, r0
    30f8:	38 f4       	brcc	.+14     	; 0x3108 <__divmodsi4_exit>

000030fa <__divmodsi4_neg2>:
    30fa:	50 95       	com	r21
    30fc:	40 95       	com	r20
    30fe:	30 95       	com	r19
    3100:	21 95       	neg	r18
    3102:	3f 4f       	sbci	r19, 0xFF	; 255
    3104:	4f 4f       	sbci	r20, 0xFF	; 255
    3106:	5f 4f       	sbci	r21, 0xFF	; 255

00003108 <__divmodsi4_exit>:
    3108:	08 95       	ret

0000310a <__divmodsi4_neg1>:
    310a:	f6 f7       	brtc	.-4      	; 0x3108 <__divmodsi4_exit>
    310c:	90 95       	com	r25
    310e:	80 95       	com	r24
    3110:	70 95       	com	r23
    3112:	61 95       	neg	r22
    3114:	7f 4f       	sbci	r23, 0xFF	; 255
    3116:	8f 4f       	sbci	r24, 0xFF	; 255
    3118:	9f 4f       	sbci	r25, 0xFF	; 255
    311a:	08 95       	ret

0000311c <__udivmodsi4>:
    311c:	a1 e2       	ldi	r26, 0x21	; 33
    311e:	1a 2e       	mov	r1, r26
    3120:	aa 1b       	sub	r26, r26
    3122:	bb 1b       	sub	r27, r27
    3124:	fd 01       	movw	r30, r26
    3126:	0d c0       	rjmp	.+26     	; 0x3142 <__udivmodsi4_ep>

00003128 <__udivmodsi4_loop>:
    3128:	aa 1f       	adc	r26, r26
    312a:	bb 1f       	adc	r27, r27
    312c:	ee 1f       	adc	r30, r30
    312e:	ff 1f       	adc	r31, r31
    3130:	a2 17       	cp	r26, r18
    3132:	b3 07       	cpc	r27, r19
    3134:	e4 07       	cpc	r30, r20
    3136:	f5 07       	cpc	r31, r21
    3138:	20 f0       	brcs	.+8      	; 0x3142 <__udivmodsi4_ep>
    313a:	a2 1b       	sub	r26, r18
    313c:	b3 0b       	sbc	r27, r19
    313e:	e4 0b       	sbc	r30, r20
    3140:	f5 0b       	sbc	r31, r21

00003142 <__udivmodsi4_ep>:
    3142:	66 1f       	adc	r22, r22
    3144:	77 1f       	adc	r23, r23
    3146:	88 1f       	adc	r24, r24
    3148:	99 1f       	adc	r25, r25
    314a:	1a 94       	dec	r1
    314c:	69 f7       	brne	.-38     	; 0x3128 <__udivmodsi4_loop>
    314e:	60 95       	com	r22
    3150:	70 95       	com	r23
    3152:	80 95       	com	r24
    3154:	90 95       	com	r25
    3156:	9b 01       	movw	r18, r22
    3158:	ac 01       	movw	r20, r24
    315a:	bd 01       	movw	r22, r26
    315c:	cf 01       	movw	r24, r30
    315e:	08 95       	ret

00003160 <__prologue_saves__>:
    3160:	2f 92       	push	r2
    3162:	3f 92       	push	r3
    3164:	4f 92       	push	r4
    3166:	5f 92       	push	r5
    3168:	6f 92       	push	r6
    316a:	7f 92       	push	r7
    316c:	8f 92       	push	r8
    316e:	9f 92       	push	r9
    3170:	af 92       	push	r10
    3172:	bf 92       	push	r11
    3174:	cf 92       	push	r12
    3176:	df 92       	push	r13
    3178:	ef 92       	push	r14
    317a:	ff 92       	push	r15
    317c:	0f 93       	push	r16
    317e:	1f 93       	push	r17
    3180:	cf 93       	push	r28
    3182:	df 93       	push	r29
    3184:	cd b7       	in	r28, 0x3d	; 61
    3186:	de b7       	in	r29, 0x3e	; 62
    3188:	ca 1b       	sub	r28, r26
    318a:	db 0b       	sbc	r29, r27
    318c:	0f b6       	in	r0, 0x3f	; 63
    318e:	f8 94       	cli
    3190:	de bf       	out	0x3e, r29	; 62
    3192:	0f be       	out	0x3f, r0	; 63
    3194:	cd bf       	out	0x3d, r28	; 61
    3196:	09 94       	ijmp

00003198 <__epilogue_restores__>:
    3198:	2a 88       	ldd	r2, Y+18	; 0x12
    319a:	39 88       	ldd	r3, Y+17	; 0x11
    319c:	48 88       	ldd	r4, Y+16	; 0x10
    319e:	5f 84       	ldd	r5, Y+15	; 0x0f
    31a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    31a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    31a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    31a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    31a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    31aa:	b9 84       	ldd	r11, Y+9	; 0x09
    31ac:	c8 84       	ldd	r12, Y+8	; 0x08
    31ae:	df 80       	ldd	r13, Y+7	; 0x07
    31b0:	ee 80       	ldd	r14, Y+6	; 0x06
    31b2:	fd 80       	ldd	r15, Y+5	; 0x05
    31b4:	0c 81       	ldd	r16, Y+4	; 0x04
    31b6:	1b 81       	ldd	r17, Y+3	; 0x03
    31b8:	aa 81       	ldd	r26, Y+2	; 0x02
    31ba:	b9 81       	ldd	r27, Y+1	; 0x01
    31bc:	ce 0f       	add	r28, r30
    31be:	d1 1d       	adc	r29, r1
    31c0:	0f b6       	in	r0, 0x3f	; 63
    31c2:	f8 94       	cli
    31c4:	de bf       	out	0x3e, r29	; 62
    31c6:	0f be       	out	0x3f, r0	; 63
    31c8:	cd bf       	out	0x3d, r28	; 61
    31ca:	ed 01       	movw	r28, r26
    31cc:	08 95       	ret

000031ce <_exit>:
    31ce:	f8 94       	cli

000031d0 <__stop_program>:
    31d0:	ff cf       	rjmp	.-2      	; 0x31d0 <__stop_program>
